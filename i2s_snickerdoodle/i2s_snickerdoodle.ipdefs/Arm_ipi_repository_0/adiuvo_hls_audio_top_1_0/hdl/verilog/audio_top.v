// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="audio_top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-3,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=235,HLS_SYN_LUT=543,HLS_VERSION=2018_3}" *)

module audio_top (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        AudioA_TDATA,
        AudioA_TVALID,
        AudioA_TREADY,
        AudioA_TKEEP,
        AudioA_TSTRB,
        AudioA_TUSER,
        AudioA_TLAST,
        AudioA_TID,
        AudioA_TDEST,
        AudioB_TDATA,
        AudioB_TVALID,
        AudioB_TREADY,
        AudioB_TKEEP,
        AudioB_TSTRB,
        AudioB_TUSER,
        AudioB_TLAST,
        AudioB_TID,
        AudioB_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] AudioA_TDATA;
input   AudioA_TVALID;
output   AudioA_TREADY;
input  [3:0] AudioA_TKEEP;
input  [3:0] AudioA_TSTRB;
input  [0:0] AudioA_TUSER;
input  [0:0] AudioA_TLAST;
input  [0:0] AudioA_TID;
input  [0:0] AudioA_TDEST;
output  [31:0] AudioB_TDATA;
output   AudioB_TVALID;
input   AudioB_TREADY;
output  [3:0] AudioB_TKEEP;
output  [3:0] AudioB_TSTRB;
output  [0:0] AudioB_TUSER;
output  [0:0] AudioB_TLAST;
output  [0:0] AudioB_TID;
output  [0:0] AudioB_TDEST;

reg ap_idle;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] AudioA_V_data_V_0_data_out;
wire    AudioA_V_data_V_0_vld_in;
wire    AudioA_V_data_V_0_vld_out;
wire    AudioA_V_data_V_0_ack_in;
reg    AudioA_V_data_V_0_ack_out;
reg   [31:0] AudioA_V_data_V_0_payload_A;
reg   [31:0] AudioA_V_data_V_0_payload_B;
reg    AudioA_V_data_V_0_sel_rd;
reg    AudioA_V_data_V_0_sel_wr;
wire    AudioA_V_data_V_0_sel;
wire    AudioA_V_data_V_0_load_A;
wire    AudioA_V_data_V_0_load_B;
reg   [1:0] AudioA_V_data_V_0_state;
wire    AudioA_V_data_V_0_state_cmp_full;
reg   [3:0] AudioA_V_keep_V_0_data_out;
wire    AudioA_V_keep_V_0_vld_in;
wire    AudioA_V_keep_V_0_vld_out;
wire    AudioA_V_keep_V_0_ack_in;
reg    AudioA_V_keep_V_0_ack_out;
reg   [3:0] AudioA_V_keep_V_0_payload_A;
reg   [3:0] AudioA_V_keep_V_0_payload_B;
reg    AudioA_V_keep_V_0_sel_rd;
reg    AudioA_V_keep_V_0_sel_wr;
wire    AudioA_V_keep_V_0_sel;
wire    AudioA_V_keep_V_0_load_A;
wire    AudioA_V_keep_V_0_load_B;
reg   [1:0] AudioA_V_keep_V_0_state;
wire    AudioA_V_keep_V_0_state_cmp_full;
reg   [3:0] AudioA_V_strb_V_0_data_out;
wire    AudioA_V_strb_V_0_vld_in;
wire    AudioA_V_strb_V_0_vld_out;
wire    AudioA_V_strb_V_0_ack_in;
reg    AudioA_V_strb_V_0_ack_out;
reg   [3:0] AudioA_V_strb_V_0_payload_A;
reg   [3:0] AudioA_V_strb_V_0_payload_B;
reg    AudioA_V_strb_V_0_sel_rd;
reg    AudioA_V_strb_V_0_sel_wr;
wire    AudioA_V_strb_V_0_sel;
wire    AudioA_V_strb_V_0_load_A;
wire    AudioA_V_strb_V_0_load_B;
reg   [1:0] AudioA_V_strb_V_0_state;
wire    AudioA_V_strb_V_0_state_cmp_full;
reg   [0:0] AudioA_V_user_V_0_data_out;
wire    AudioA_V_user_V_0_vld_in;
wire    AudioA_V_user_V_0_vld_out;
wire    AudioA_V_user_V_0_ack_in;
reg    AudioA_V_user_V_0_ack_out;
reg   [0:0] AudioA_V_user_V_0_payload_A;
reg   [0:0] AudioA_V_user_V_0_payload_B;
reg    AudioA_V_user_V_0_sel_rd;
reg    AudioA_V_user_V_0_sel_wr;
wire    AudioA_V_user_V_0_sel;
wire    AudioA_V_user_V_0_load_A;
wire    AudioA_V_user_V_0_load_B;
reg   [1:0] AudioA_V_user_V_0_state;
wire    AudioA_V_user_V_0_state_cmp_full;
reg   [0:0] AudioA_V_last_V_0_data_out;
wire    AudioA_V_last_V_0_vld_in;
wire    AudioA_V_last_V_0_vld_out;
wire    AudioA_V_last_V_0_ack_in;
reg    AudioA_V_last_V_0_ack_out;
reg   [0:0] AudioA_V_last_V_0_payload_A;
reg   [0:0] AudioA_V_last_V_0_payload_B;
reg    AudioA_V_last_V_0_sel_rd;
reg    AudioA_V_last_V_0_sel_wr;
wire    AudioA_V_last_V_0_sel;
wire    AudioA_V_last_V_0_load_A;
wire    AudioA_V_last_V_0_load_B;
reg   [1:0] AudioA_V_last_V_0_state;
wire    AudioA_V_last_V_0_state_cmp_full;
reg   [0:0] AudioA_V_id_V_0_data_out;
wire    AudioA_V_id_V_0_vld_in;
wire    AudioA_V_id_V_0_vld_out;
wire    AudioA_V_id_V_0_ack_in;
reg    AudioA_V_id_V_0_ack_out;
reg   [0:0] AudioA_V_id_V_0_payload_A;
reg   [0:0] AudioA_V_id_V_0_payload_B;
reg    AudioA_V_id_V_0_sel_rd;
reg    AudioA_V_id_V_0_sel_wr;
wire    AudioA_V_id_V_0_sel;
wire    AudioA_V_id_V_0_load_A;
wire    AudioA_V_id_V_0_load_B;
reg   [1:0] AudioA_V_id_V_0_state;
wire    AudioA_V_id_V_0_state_cmp_full;
reg   [0:0] AudioA_V_dest_V_0_data_out;
wire    AudioA_V_dest_V_0_vld_in;
wire    AudioA_V_dest_V_0_vld_out;
wire    AudioA_V_dest_V_0_ack_in;
reg    AudioA_V_dest_V_0_ack_out;
reg   [0:0] AudioA_V_dest_V_0_payload_A;
reg   [0:0] AudioA_V_dest_V_0_payload_B;
reg    AudioA_V_dest_V_0_sel_rd;
reg    AudioA_V_dest_V_0_sel_wr;
wire    AudioA_V_dest_V_0_sel;
wire    AudioA_V_dest_V_0_load_A;
wire    AudioA_V_dest_V_0_load_B;
reg   [1:0] AudioA_V_dest_V_0_state;
wire    AudioA_V_dest_V_0_state_cmp_full;
reg   [31:0] AudioB_V_data_V_1_data_out;
reg    AudioB_V_data_V_1_vld_in;
wire    AudioB_V_data_V_1_vld_out;
wire    AudioB_V_data_V_1_ack_in;
wire    AudioB_V_data_V_1_ack_out;
reg   [31:0] AudioB_V_data_V_1_payload_A;
reg   [31:0] AudioB_V_data_V_1_payload_B;
reg    AudioB_V_data_V_1_sel_rd;
reg    AudioB_V_data_V_1_sel_wr;
wire    AudioB_V_data_V_1_sel;
wire    AudioB_V_data_V_1_load_A;
wire    AudioB_V_data_V_1_load_B;
reg   [1:0] AudioB_V_data_V_1_state;
wire    AudioB_V_data_V_1_state_cmp_full;
reg   [3:0] AudioB_V_keep_V_1_data_out;
reg    AudioB_V_keep_V_1_vld_in;
wire    AudioB_V_keep_V_1_vld_out;
wire    AudioB_V_keep_V_1_ack_in;
wire    AudioB_V_keep_V_1_ack_out;
reg   [3:0] AudioB_V_keep_V_1_payload_A;
reg   [3:0] AudioB_V_keep_V_1_payload_B;
reg    AudioB_V_keep_V_1_sel_rd;
reg    AudioB_V_keep_V_1_sel_wr;
wire    AudioB_V_keep_V_1_sel;
wire    AudioB_V_keep_V_1_load_A;
wire    AudioB_V_keep_V_1_load_B;
reg   [1:0] AudioB_V_keep_V_1_state;
wire    AudioB_V_keep_V_1_state_cmp_full;
reg   [3:0] AudioB_V_strb_V_1_data_out;
reg    AudioB_V_strb_V_1_vld_in;
wire    AudioB_V_strb_V_1_vld_out;
wire    AudioB_V_strb_V_1_ack_in;
wire    AudioB_V_strb_V_1_ack_out;
reg   [3:0] AudioB_V_strb_V_1_payload_A;
reg   [3:0] AudioB_V_strb_V_1_payload_B;
reg    AudioB_V_strb_V_1_sel_rd;
reg    AudioB_V_strb_V_1_sel_wr;
wire    AudioB_V_strb_V_1_sel;
wire    AudioB_V_strb_V_1_load_A;
wire    AudioB_V_strb_V_1_load_B;
reg   [1:0] AudioB_V_strb_V_1_state;
wire    AudioB_V_strb_V_1_state_cmp_full;
reg   [0:0] AudioB_V_user_V_1_data_out;
reg    AudioB_V_user_V_1_vld_in;
wire    AudioB_V_user_V_1_vld_out;
wire    AudioB_V_user_V_1_ack_in;
wire    AudioB_V_user_V_1_ack_out;
reg   [0:0] AudioB_V_user_V_1_payload_A;
reg   [0:0] AudioB_V_user_V_1_payload_B;
reg    AudioB_V_user_V_1_sel_rd;
reg    AudioB_V_user_V_1_sel_wr;
wire    AudioB_V_user_V_1_sel;
wire    AudioB_V_user_V_1_load_A;
wire    AudioB_V_user_V_1_load_B;
reg   [1:0] AudioB_V_user_V_1_state;
wire    AudioB_V_user_V_1_state_cmp_full;
reg   [0:0] AudioB_V_last_V_1_data_out;
reg    AudioB_V_last_V_1_vld_in;
wire    AudioB_V_last_V_1_vld_out;
wire    AudioB_V_last_V_1_ack_in;
wire    AudioB_V_last_V_1_ack_out;
reg   [0:0] AudioB_V_last_V_1_payload_A;
reg   [0:0] AudioB_V_last_V_1_payload_B;
reg    AudioB_V_last_V_1_sel_rd;
reg    AudioB_V_last_V_1_sel_wr;
wire    AudioB_V_last_V_1_sel;
wire    AudioB_V_last_V_1_load_A;
wire    AudioB_V_last_V_1_load_B;
reg   [1:0] AudioB_V_last_V_1_state;
wire    AudioB_V_last_V_1_state_cmp_full;
reg   [0:0] AudioB_V_id_V_1_data_out;
reg    AudioB_V_id_V_1_vld_in;
wire    AudioB_V_id_V_1_vld_out;
wire    AudioB_V_id_V_1_ack_in;
wire    AudioB_V_id_V_1_ack_out;
reg   [0:0] AudioB_V_id_V_1_payload_A;
reg   [0:0] AudioB_V_id_V_1_payload_B;
reg    AudioB_V_id_V_1_sel_rd;
reg    AudioB_V_id_V_1_sel_wr;
wire    AudioB_V_id_V_1_sel;
wire    AudioB_V_id_V_1_load_A;
wire    AudioB_V_id_V_1_load_B;
reg   [1:0] AudioB_V_id_V_1_state;
wire    AudioB_V_id_V_1_state_cmp_full;
reg   [0:0] AudioB_V_dest_V_1_data_out;
reg    AudioB_V_dest_V_1_vld_in;
wire    AudioB_V_dest_V_1_vld_out;
wire    AudioB_V_dest_V_1_ack_in;
wire    AudioB_V_dest_V_1_ack_out;
reg   [0:0] AudioB_V_dest_V_1_payload_A;
reg   [0:0] AudioB_V_dest_V_1_payload_B;
reg    AudioB_V_dest_V_1_sel_rd;
reg    AudioB_V_dest_V_1_sel_wr;
wire    AudioB_V_dest_V_1_sel;
wire    AudioB_V_dest_V_1_load_A;
wire    AudioB_V_dest_V_1_load_B;
reg   [1:0] AudioB_V_dest_V_1_state;
wire    AudioB_V_dest_V_1_state_cmp_full;
reg    AudioA_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    AudioB_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 AudioA_V_data_V_0_sel_rd = 1'b0;
#0 AudioA_V_data_V_0_sel_wr = 1'b0;
#0 AudioA_V_data_V_0_state = 2'd0;
#0 AudioA_V_keep_V_0_sel_rd = 1'b0;
#0 AudioA_V_keep_V_0_sel_wr = 1'b0;
#0 AudioA_V_keep_V_0_state = 2'd0;
#0 AudioA_V_strb_V_0_sel_rd = 1'b0;
#0 AudioA_V_strb_V_0_sel_wr = 1'b0;
#0 AudioA_V_strb_V_0_state = 2'd0;
#0 AudioA_V_user_V_0_sel_rd = 1'b0;
#0 AudioA_V_user_V_0_sel_wr = 1'b0;
#0 AudioA_V_user_V_0_state = 2'd0;
#0 AudioA_V_last_V_0_sel_rd = 1'b0;
#0 AudioA_V_last_V_0_sel_wr = 1'b0;
#0 AudioA_V_last_V_0_state = 2'd0;
#0 AudioA_V_id_V_0_sel_rd = 1'b0;
#0 AudioA_V_id_V_0_sel_wr = 1'b0;
#0 AudioA_V_id_V_0_state = 2'd0;
#0 AudioA_V_dest_V_0_sel_rd = 1'b0;
#0 AudioA_V_dest_V_0_sel_wr = 1'b0;
#0 AudioA_V_dest_V_0_state = 2'd0;
#0 AudioB_V_data_V_1_sel_rd = 1'b0;
#0 AudioB_V_data_V_1_sel_wr = 1'b0;
#0 AudioB_V_data_V_1_state = 2'd0;
#0 AudioB_V_keep_V_1_sel_rd = 1'b0;
#0 AudioB_V_keep_V_1_sel_wr = 1'b0;
#0 AudioB_V_keep_V_1_state = 2'd0;
#0 AudioB_V_strb_V_1_sel_rd = 1'b0;
#0 AudioB_V_strb_V_1_sel_wr = 1'b0;
#0 AudioB_V_strb_V_1_state = 2'd0;
#0 AudioB_V_user_V_1_sel_rd = 1'b0;
#0 AudioB_V_user_V_1_sel_wr = 1'b0;
#0 AudioB_V_user_V_1_state = 2'd0;
#0 AudioB_V_last_V_1_sel_rd = 1'b0;
#0 AudioB_V_last_V_1_sel_wr = 1'b0;
#0 AudioB_V_last_V_1_state = 2'd0;
#0 AudioB_V_id_V_1_sel_rd = 1'b0;
#0 AudioB_V_id_V_1_sel_wr = 1'b0;
#0 AudioB_V_id_V_1_state = 2'd0;
#0 AudioB_V_dest_V_1_sel_rd = 1'b0;
#0 AudioB_V_dest_V_1_sel_wr = 1'b0;
#0 AudioB_V_dest_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_data_V_0_ack_out) & (1'b1 == AudioA_V_data_V_0_vld_out))) begin
            AudioA_V_data_V_0_sel_rd <= ~AudioA_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_data_V_0_ack_in) & (1'b1 == AudioA_V_data_V_0_vld_in))) begin
            AudioA_V_data_V_0_sel_wr <= ~AudioA_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioA_V_data_V_0_state) & (1'b0 == AudioA_V_data_V_0_vld_in)) | ((2'd3 == AudioA_V_data_V_0_state) & (1'b0 == AudioA_V_data_V_0_vld_in) & (1'b1 == AudioA_V_data_V_0_ack_out)))) begin
            AudioA_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == AudioA_V_data_V_0_state) & (1'b0 == AudioA_V_data_V_0_ack_out)) | ((2'd3 == AudioA_V_data_V_0_state) & (1'b0 == AudioA_V_data_V_0_ack_out) & (1'b1 == AudioA_V_data_V_0_vld_in)))) begin
            AudioA_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AudioA_V_data_V_0_vld_in) & (1'b1 == AudioA_V_data_V_0_ack_out)) & ~((1'b0 == AudioA_V_data_V_0_ack_out) & (1'b1 == AudioA_V_data_V_0_vld_in)) & (2'd3 == AudioA_V_data_V_0_state)) | ((2'd1 == AudioA_V_data_V_0_state) & (1'b1 == AudioA_V_data_V_0_ack_out)) | ((2'd2 == AudioA_V_data_V_0_state) & (1'b1 == AudioA_V_data_V_0_vld_in)))) begin
            AudioA_V_data_V_0_state <= 2'd3;
        end else begin
            AudioA_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_dest_V_0_ack_out) & (1'b1 == AudioA_V_dest_V_0_vld_out))) begin
            AudioA_V_dest_V_0_sel_rd <= ~AudioA_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_dest_V_0_ack_in) & (1'b1 == AudioA_V_dest_V_0_vld_in))) begin
            AudioA_V_dest_V_0_sel_wr <= ~AudioA_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioA_V_dest_V_0_state) & (1'b0 == AudioA_V_dest_V_0_vld_in)) | ((2'd3 == AudioA_V_dest_V_0_state) & (1'b0 == AudioA_V_dest_V_0_vld_in) & (1'b1 == AudioA_V_dest_V_0_ack_out)))) begin
            AudioA_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == AudioA_V_dest_V_0_state) & (1'b0 == AudioA_V_dest_V_0_ack_out)) | ((2'd3 == AudioA_V_dest_V_0_state) & (1'b0 == AudioA_V_dest_V_0_ack_out) & (1'b1 == AudioA_V_dest_V_0_vld_in)))) begin
            AudioA_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AudioA_V_dest_V_0_vld_in) & (1'b1 == AudioA_V_dest_V_0_ack_out)) & ~((1'b0 == AudioA_V_dest_V_0_ack_out) & (1'b1 == AudioA_V_dest_V_0_vld_in)) & (2'd3 == AudioA_V_dest_V_0_state)) | ((2'd1 == AudioA_V_dest_V_0_state) & (1'b1 == AudioA_V_dest_V_0_ack_out)) | ((2'd2 == AudioA_V_dest_V_0_state) & (1'b1 == AudioA_V_dest_V_0_vld_in)))) begin
            AudioA_V_dest_V_0_state <= 2'd3;
        end else begin
            AudioA_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_id_V_0_ack_out) & (1'b1 == AudioA_V_id_V_0_vld_out))) begin
            AudioA_V_id_V_0_sel_rd <= ~AudioA_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_id_V_0_ack_in) & (1'b1 == AudioA_V_id_V_0_vld_in))) begin
            AudioA_V_id_V_0_sel_wr <= ~AudioA_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioA_V_id_V_0_state) & (1'b0 == AudioA_V_id_V_0_vld_in)) | ((2'd3 == AudioA_V_id_V_0_state) & (1'b0 == AudioA_V_id_V_0_vld_in) & (1'b1 == AudioA_V_id_V_0_ack_out)))) begin
            AudioA_V_id_V_0_state <= 2'd2;
        end else if ((((2'd1 == AudioA_V_id_V_0_state) & (1'b0 == AudioA_V_id_V_0_ack_out)) | ((2'd3 == AudioA_V_id_V_0_state) & (1'b0 == AudioA_V_id_V_0_ack_out) & (1'b1 == AudioA_V_id_V_0_vld_in)))) begin
            AudioA_V_id_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AudioA_V_id_V_0_vld_in) & (1'b1 == AudioA_V_id_V_0_ack_out)) & ~((1'b0 == AudioA_V_id_V_0_ack_out) & (1'b1 == AudioA_V_id_V_0_vld_in)) & (2'd3 == AudioA_V_id_V_0_state)) | ((2'd1 == AudioA_V_id_V_0_state) & (1'b1 == AudioA_V_id_V_0_ack_out)) | ((2'd2 == AudioA_V_id_V_0_state) & (1'b1 == AudioA_V_id_V_0_vld_in)))) begin
            AudioA_V_id_V_0_state <= 2'd3;
        end else begin
            AudioA_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_keep_V_0_ack_out) & (1'b1 == AudioA_V_keep_V_0_vld_out))) begin
            AudioA_V_keep_V_0_sel_rd <= ~AudioA_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_keep_V_0_ack_in) & (1'b1 == AudioA_V_keep_V_0_vld_in))) begin
            AudioA_V_keep_V_0_sel_wr <= ~AudioA_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioA_V_keep_V_0_state) & (1'b0 == AudioA_V_keep_V_0_vld_in)) | ((2'd3 == AudioA_V_keep_V_0_state) & (1'b0 == AudioA_V_keep_V_0_vld_in) & (1'b1 == AudioA_V_keep_V_0_ack_out)))) begin
            AudioA_V_keep_V_0_state <= 2'd2;
        end else if ((((2'd1 == AudioA_V_keep_V_0_state) & (1'b0 == AudioA_V_keep_V_0_ack_out)) | ((2'd3 == AudioA_V_keep_V_0_state) & (1'b0 == AudioA_V_keep_V_0_ack_out) & (1'b1 == AudioA_V_keep_V_0_vld_in)))) begin
            AudioA_V_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AudioA_V_keep_V_0_vld_in) & (1'b1 == AudioA_V_keep_V_0_ack_out)) & ~((1'b0 == AudioA_V_keep_V_0_ack_out) & (1'b1 == AudioA_V_keep_V_0_vld_in)) & (2'd3 == AudioA_V_keep_V_0_state)) | ((2'd1 == AudioA_V_keep_V_0_state) & (1'b1 == AudioA_V_keep_V_0_ack_out)) | ((2'd2 == AudioA_V_keep_V_0_state) & (1'b1 == AudioA_V_keep_V_0_vld_in)))) begin
            AudioA_V_keep_V_0_state <= 2'd3;
        end else begin
            AudioA_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_last_V_0_ack_out) & (1'b1 == AudioA_V_last_V_0_vld_out))) begin
            AudioA_V_last_V_0_sel_rd <= ~AudioA_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_last_V_0_ack_in) & (1'b1 == AudioA_V_last_V_0_vld_in))) begin
            AudioA_V_last_V_0_sel_wr <= ~AudioA_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioA_V_last_V_0_state) & (1'b0 == AudioA_V_last_V_0_vld_in)) | ((2'd3 == AudioA_V_last_V_0_state) & (1'b0 == AudioA_V_last_V_0_vld_in) & (1'b1 == AudioA_V_last_V_0_ack_out)))) begin
            AudioA_V_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == AudioA_V_last_V_0_state) & (1'b0 == AudioA_V_last_V_0_ack_out)) | ((2'd3 == AudioA_V_last_V_0_state) & (1'b0 == AudioA_V_last_V_0_ack_out) & (1'b1 == AudioA_V_last_V_0_vld_in)))) begin
            AudioA_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AudioA_V_last_V_0_vld_in) & (1'b1 == AudioA_V_last_V_0_ack_out)) & ~((1'b0 == AudioA_V_last_V_0_ack_out) & (1'b1 == AudioA_V_last_V_0_vld_in)) & (2'd3 == AudioA_V_last_V_0_state)) | ((2'd1 == AudioA_V_last_V_0_state) & (1'b1 == AudioA_V_last_V_0_ack_out)) | ((2'd2 == AudioA_V_last_V_0_state) & (1'b1 == AudioA_V_last_V_0_vld_in)))) begin
            AudioA_V_last_V_0_state <= 2'd3;
        end else begin
            AudioA_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_strb_V_0_ack_out) & (1'b1 == AudioA_V_strb_V_0_vld_out))) begin
            AudioA_V_strb_V_0_sel_rd <= ~AudioA_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_strb_V_0_ack_in) & (1'b1 == AudioA_V_strb_V_0_vld_in))) begin
            AudioA_V_strb_V_0_sel_wr <= ~AudioA_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioA_V_strb_V_0_state) & (1'b0 == AudioA_V_strb_V_0_vld_in)) | ((2'd3 == AudioA_V_strb_V_0_state) & (1'b0 == AudioA_V_strb_V_0_vld_in) & (1'b1 == AudioA_V_strb_V_0_ack_out)))) begin
            AudioA_V_strb_V_0_state <= 2'd2;
        end else if ((((2'd1 == AudioA_V_strb_V_0_state) & (1'b0 == AudioA_V_strb_V_0_ack_out)) | ((2'd3 == AudioA_V_strb_V_0_state) & (1'b0 == AudioA_V_strb_V_0_ack_out) & (1'b1 == AudioA_V_strb_V_0_vld_in)))) begin
            AudioA_V_strb_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AudioA_V_strb_V_0_vld_in) & (1'b1 == AudioA_V_strb_V_0_ack_out)) & ~((1'b0 == AudioA_V_strb_V_0_ack_out) & (1'b1 == AudioA_V_strb_V_0_vld_in)) & (2'd3 == AudioA_V_strb_V_0_state)) | ((2'd1 == AudioA_V_strb_V_0_state) & (1'b1 == AudioA_V_strb_V_0_ack_out)) | ((2'd2 == AudioA_V_strb_V_0_state) & (1'b1 == AudioA_V_strb_V_0_vld_in)))) begin
            AudioA_V_strb_V_0_state <= 2'd3;
        end else begin
            AudioA_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_user_V_0_ack_out) & (1'b1 == AudioA_V_user_V_0_vld_out))) begin
            AudioA_V_user_V_0_sel_rd <= ~AudioA_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioA_V_user_V_0_ack_in) & (1'b1 == AudioA_V_user_V_0_vld_in))) begin
            AudioA_V_user_V_0_sel_wr <= ~AudioA_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioA_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioA_V_user_V_0_state) & (1'b0 == AudioA_V_user_V_0_vld_in)) | ((2'd3 == AudioA_V_user_V_0_state) & (1'b0 == AudioA_V_user_V_0_vld_in) & (1'b1 == AudioA_V_user_V_0_ack_out)))) begin
            AudioA_V_user_V_0_state <= 2'd2;
        end else if ((((2'd1 == AudioA_V_user_V_0_state) & (1'b0 == AudioA_V_user_V_0_ack_out)) | ((2'd3 == AudioA_V_user_V_0_state) & (1'b0 == AudioA_V_user_V_0_ack_out) & (1'b1 == AudioA_V_user_V_0_vld_in)))) begin
            AudioA_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AudioA_V_user_V_0_vld_in) & (1'b1 == AudioA_V_user_V_0_ack_out)) & ~((1'b0 == AudioA_V_user_V_0_ack_out) & (1'b1 == AudioA_V_user_V_0_vld_in)) & (2'd3 == AudioA_V_user_V_0_state)) | ((2'd1 == AudioA_V_user_V_0_state) & (1'b1 == AudioA_V_user_V_0_ack_out)) | ((2'd2 == AudioA_V_user_V_0_state) & (1'b1 == AudioA_V_user_V_0_vld_in)))) begin
            AudioA_V_user_V_0_state <= 2'd3;
        end else begin
            AudioA_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_data_V_1_ack_out) & (1'b1 == AudioB_V_data_V_1_vld_out))) begin
            AudioB_V_data_V_1_sel_rd <= ~AudioB_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_data_V_1_ack_in) & (1'b1 == AudioB_V_data_V_1_vld_in))) begin
            AudioB_V_data_V_1_sel_wr <= ~AudioB_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioB_V_data_V_1_state) & (1'b0 == AudioB_V_data_V_1_vld_in)) | ((2'd3 == AudioB_V_data_V_1_state) & (1'b0 == AudioB_V_data_V_1_vld_in) & (1'b1 == AudioB_V_data_V_1_ack_out)))) begin
            AudioB_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == AudioB_V_data_V_1_state) & (1'b0 == AudioB_V_data_V_1_ack_out)) | ((2'd3 == AudioB_V_data_V_1_state) & (1'b0 == AudioB_V_data_V_1_ack_out) & (1'b1 == AudioB_V_data_V_1_vld_in)))) begin
            AudioB_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AudioB_V_data_V_1_vld_in) & (1'b1 == AudioB_V_data_V_1_ack_out)) & ~((1'b0 == AudioB_V_data_V_1_ack_out) & (1'b1 == AudioB_V_data_V_1_vld_in)) & (2'd3 == AudioB_V_data_V_1_state)) | ((2'd1 == AudioB_V_data_V_1_state) & (1'b1 == AudioB_V_data_V_1_ack_out)) | ((2'd2 == AudioB_V_data_V_1_state) & (1'b1 == AudioB_V_data_V_1_vld_in)))) begin
            AudioB_V_data_V_1_state <= 2'd3;
        end else begin
            AudioB_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_dest_V_1_ack_out) & (1'b1 == AudioB_V_dest_V_1_vld_out))) begin
            AudioB_V_dest_V_1_sel_rd <= ~AudioB_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_dest_V_1_ack_in) & (1'b1 == AudioB_V_dest_V_1_vld_in))) begin
            AudioB_V_dest_V_1_sel_wr <= ~AudioB_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioB_V_dest_V_1_state) & (1'b0 == AudioB_V_dest_V_1_vld_in)) | ((2'd3 == AudioB_V_dest_V_1_state) & (1'b0 == AudioB_V_dest_V_1_vld_in) & (1'b1 == AudioB_V_dest_V_1_ack_out)))) begin
            AudioB_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == AudioB_V_dest_V_1_state) & (1'b0 == AudioB_V_dest_V_1_ack_out)) | ((2'd3 == AudioB_V_dest_V_1_state) & (1'b0 == AudioB_V_dest_V_1_ack_out) & (1'b1 == AudioB_V_dest_V_1_vld_in)))) begin
            AudioB_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AudioB_V_dest_V_1_vld_in) & (1'b1 == AudioB_V_dest_V_1_ack_out)) & ~((1'b0 == AudioB_V_dest_V_1_ack_out) & (1'b1 == AudioB_V_dest_V_1_vld_in)) & (2'd3 == AudioB_V_dest_V_1_state)) | ((2'd1 == AudioB_V_dest_V_1_state) & (1'b1 == AudioB_V_dest_V_1_ack_out)) | ((2'd2 == AudioB_V_dest_V_1_state) & (1'b1 == AudioB_V_dest_V_1_vld_in)))) begin
            AudioB_V_dest_V_1_state <= 2'd3;
        end else begin
            AudioB_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_id_V_1_ack_out) & (1'b1 == AudioB_V_id_V_1_vld_out))) begin
            AudioB_V_id_V_1_sel_rd <= ~AudioB_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_id_V_1_ack_in) & (1'b1 == AudioB_V_id_V_1_vld_in))) begin
            AudioB_V_id_V_1_sel_wr <= ~AudioB_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioB_V_id_V_1_state) & (1'b0 == AudioB_V_id_V_1_vld_in)) | ((2'd3 == AudioB_V_id_V_1_state) & (1'b0 == AudioB_V_id_V_1_vld_in) & (1'b1 == AudioB_V_id_V_1_ack_out)))) begin
            AudioB_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == AudioB_V_id_V_1_state) & (1'b0 == AudioB_V_id_V_1_ack_out)) | ((2'd3 == AudioB_V_id_V_1_state) & (1'b0 == AudioB_V_id_V_1_ack_out) & (1'b1 == AudioB_V_id_V_1_vld_in)))) begin
            AudioB_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AudioB_V_id_V_1_vld_in) & (1'b1 == AudioB_V_id_V_1_ack_out)) & ~((1'b0 == AudioB_V_id_V_1_ack_out) & (1'b1 == AudioB_V_id_V_1_vld_in)) & (2'd3 == AudioB_V_id_V_1_state)) | ((2'd1 == AudioB_V_id_V_1_state) & (1'b1 == AudioB_V_id_V_1_ack_out)) | ((2'd2 == AudioB_V_id_V_1_state) & (1'b1 == AudioB_V_id_V_1_vld_in)))) begin
            AudioB_V_id_V_1_state <= 2'd3;
        end else begin
            AudioB_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_keep_V_1_ack_out) & (1'b1 == AudioB_V_keep_V_1_vld_out))) begin
            AudioB_V_keep_V_1_sel_rd <= ~AudioB_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_keep_V_1_ack_in) & (1'b1 == AudioB_V_keep_V_1_vld_in))) begin
            AudioB_V_keep_V_1_sel_wr <= ~AudioB_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioB_V_keep_V_1_state) & (1'b0 == AudioB_V_keep_V_1_vld_in)) | ((2'd3 == AudioB_V_keep_V_1_state) & (1'b0 == AudioB_V_keep_V_1_vld_in) & (1'b1 == AudioB_V_keep_V_1_ack_out)))) begin
            AudioB_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == AudioB_V_keep_V_1_state) & (1'b0 == AudioB_V_keep_V_1_ack_out)) | ((2'd3 == AudioB_V_keep_V_1_state) & (1'b0 == AudioB_V_keep_V_1_ack_out) & (1'b1 == AudioB_V_keep_V_1_vld_in)))) begin
            AudioB_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AudioB_V_keep_V_1_vld_in) & (1'b1 == AudioB_V_keep_V_1_ack_out)) & ~((1'b0 == AudioB_V_keep_V_1_ack_out) & (1'b1 == AudioB_V_keep_V_1_vld_in)) & (2'd3 == AudioB_V_keep_V_1_state)) | ((2'd1 == AudioB_V_keep_V_1_state) & (1'b1 == AudioB_V_keep_V_1_ack_out)) | ((2'd2 == AudioB_V_keep_V_1_state) & (1'b1 == AudioB_V_keep_V_1_vld_in)))) begin
            AudioB_V_keep_V_1_state <= 2'd3;
        end else begin
            AudioB_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_last_V_1_ack_out) & (1'b1 == AudioB_V_last_V_1_vld_out))) begin
            AudioB_V_last_V_1_sel_rd <= ~AudioB_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_last_V_1_ack_in) & (1'b1 == AudioB_V_last_V_1_vld_in))) begin
            AudioB_V_last_V_1_sel_wr <= ~AudioB_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioB_V_last_V_1_state) & (1'b0 == AudioB_V_last_V_1_vld_in)) | ((2'd3 == AudioB_V_last_V_1_state) & (1'b0 == AudioB_V_last_V_1_vld_in) & (1'b1 == AudioB_V_last_V_1_ack_out)))) begin
            AudioB_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == AudioB_V_last_V_1_state) & (1'b0 == AudioB_V_last_V_1_ack_out)) | ((2'd3 == AudioB_V_last_V_1_state) & (1'b0 == AudioB_V_last_V_1_ack_out) & (1'b1 == AudioB_V_last_V_1_vld_in)))) begin
            AudioB_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AudioB_V_last_V_1_vld_in) & (1'b1 == AudioB_V_last_V_1_ack_out)) & ~((1'b0 == AudioB_V_last_V_1_ack_out) & (1'b1 == AudioB_V_last_V_1_vld_in)) & (2'd3 == AudioB_V_last_V_1_state)) | ((2'd1 == AudioB_V_last_V_1_state) & (1'b1 == AudioB_V_last_V_1_ack_out)) | ((2'd2 == AudioB_V_last_V_1_state) & (1'b1 == AudioB_V_last_V_1_vld_in)))) begin
            AudioB_V_last_V_1_state <= 2'd3;
        end else begin
            AudioB_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_strb_V_1_ack_out) & (1'b1 == AudioB_V_strb_V_1_vld_out))) begin
            AudioB_V_strb_V_1_sel_rd <= ~AudioB_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_strb_V_1_ack_in) & (1'b1 == AudioB_V_strb_V_1_vld_in))) begin
            AudioB_V_strb_V_1_sel_wr <= ~AudioB_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioB_V_strb_V_1_state) & (1'b0 == AudioB_V_strb_V_1_vld_in)) | ((2'd3 == AudioB_V_strb_V_1_state) & (1'b0 == AudioB_V_strb_V_1_vld_in) & (1'b1 == AudioB_V_strb_V_1_ack_out)))) begin
            AudioB_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == AudioB_V_strb_V_1_state) & (1'b0 == AudioB_V_strb_V_1_ack_out)) | ((2'd3 == AudioB_V_strb_V_1_state) & (1'b0 == AudioB_V_strb_V_1_ack_out) & (1'b1 == AudioB_V_strb_V_1_vld_in)))) begin
            AudioB_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AudioB_V_strb_V_1_vld_in) & (1'b1 == AudioB_V_strb_V_1_ack_out)) & ~((1'b0 == AudioB_V_strb_V_1_ack_out) & (1'b1 == AudioB_V_strb_V_1_vld_in)) & (2'd3 == AudioB_V_strb_V_1_state)) | ((2'd1 == AudioB_V_strb_V_1_state) & (1'b1 == AudioB_V_strb_V_1_ack_out)) | ((2'd2 == AudioB_V_strb_V_1_state) & (1'b1 == AudioB_V_strb_V_1_vld_in)))) begin
            AudioB_V_strb_V_1_state <= 2'd3;
        end else begin
            AudioB_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_user_V_1_ack_out) & (1'b1 == AudioB_V_user_V_1_vld_out))) begin
            AudioB_V_user_V_1_sel_rd <= ~AudioB_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AudioB_V_user_V_1_ack_in) & (1'b1 == AudioB_V_user_V_1_vld_in))) begin
            AudioB_V_user_V_1_sel_wr <= ~AudioB_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        AudioB_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AudioB_V_user_V_1_state) & (1'b0 == AudioB_V_user_V_1_vld_in)) | ((2'd3 == AudioB_V_user_V_1_state) & (1'b0 == AudioB_V_user_V_1_vld_in) & (1'b1 == AudioB_V_user_V_1_ack_out)))) begin
            AudioB_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == AudioB_V_user_V_1_state) & (1'b0 == AudioB_V_user_V_1_ack_out)) | ((2'd3 == AudioB_V_user_V_1_state) & (1'b0 == AudioB_V_user_V_1_ack_out) & (1'b1 == AudioB_V_user_V_1_vld_in)))) begin
            AudioB_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AudioB_V_user_V_1_vld_in) & (1'b1 == AudioB_V_user_V_1_ack_out)) & ~((1'b0 == AudioB_V_user_V_1_ack_out) & (1'b1 == AudioB_V_user_V_1_vld_in)) & (2'd3 == AudioB_V_user_V_1_state)) | ((2'd1 == AudioB_V_user_V_1_state) & (1'b1 == AudioB_V_user_V_1_ack_out)) | ((2'd2 == AudioB_V_user_V_1_state) & (1'b1 == AudioB_V_user_V_1_vld_in)))) begin
            AudioB_V_user_V_1_state <= 2'd3;
        end else begin
            AudioB_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_data_V_0_load_A)) begin
        AudioA_V_data_V_0_payload_A <= AudioA_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_data_V_0_load_B)) begin
        AudioA_V_data_V_0_payload_B <= AudioA_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_dest_V_0_load_A)) begin
        AudioA_V_dest_V_0_payload_A <= AudioA_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_dest_V_0_load_B)) begin
        AudioA_V_dest_V_0_payload_B <= AudioA_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_id_V_0_load_A)) begin
        AudioA_V_id_V_0_payload_A <= AudioA_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_id_V_0_load_B)) begin
        AudioA_V_id_V_0_payload_B <= AudioA_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_keep_V_0_load_A)) begin
        AudioA_V_keep_V_0_payload_A <= AudioA_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_keep_V_0_load_B)) begin
        AudioA_V_keep_V_0_payload_B <= AudioA_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_last_V_0_load_A)) begin
        AudioA_V_last_V_0_payload_A <= AudioA_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_last_V_0_load_B)) begin
        AudioA_V_last_V_0_payload_B <= AudioA_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_strb_V_0_load_A)) begin
        AudioA_V_strb_V_0_payload_A <= AudioA_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_strb_V_0_load_B)) begin
        AudioA_V_strb_V_0_payload_B <= AudioA_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_user_V_0_load_A)) begin
        AudioA_V_user_V_0_payload_A <= AudioA_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioA_V_user_V_0_load_B)) begin
        AudioA_V_user_V_0_payload_B <= AudioA_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_data_V_1_load_A)) begin
        AudioB_V_data_V_1_payload_A <= AudioA_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_data_V_1_load_B)) begin
        AudioB_V_data_V_1_payload_B <= AudioA_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_dest_V_1_load_A)) begin
        AudioB_V_dest_V_1_payload_A <= AudioA_V_dest_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_dest_V_1_load_B)) begin
        AudioB_V_dest_V_1_payload_B <= AudioA_V_dest_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_id_V_1_load_A)) begin
        AudioB_V_id_V_1_payload_A <= AudioA_V_id_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_id_V_1_load_B)) begin
        AudioB_V_id_V_1_payload_B <= AudioA_V_id_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_keep_V_1_load_A)) begin
        AudioB_V_keep_V_1_payload_A <= AudioA_V_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_keep_V_1_load_B)) begin
        AudioB_V_keep_V_1_payload_B <= AudioA_V_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_last_V_1_load_A)) begin
        AudioB_V_last_V_1_payload_A <= AudioA_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_last_V_1_load_B)) begin
        AudioB_V_last_V_1_payload_B <= AudioA_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_strb_V_1_load_A)) begin
        AudioB_V_strb_V_1_payload_A <= AudioA_V_strb_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_strb_V_1_load_B)) begin
        AudioB_V_strb_V_1_payload_B <= AudioA_V_strb_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_user_V_1_load_A)) begin
        AudioB_V_user_V_1_payload_A <= AudioA_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AudioB_V_user_V_1_load_B)) begin
        AudioB_V_user_V_1_payload_B <= AudioA_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        AudioA_TDATA_blk_n = AudioA_V_data_V_0_state[1'd0];
    end else begin
        AudioA_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioA_V_data_V_0_ack_out = 1'b1;
    end else begin
        AudioA_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioA_V_data_V_0_sel)) begin
        AudioA_V_data_V_0_data_out = AudioA_V_data_V_0_payload_B;
    end else begin
        AudioA_V_data_V_0_data_out = AudioA_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioA_V_dest_V_0_ack_out = 1'b1;
    end else begin
        AudioA_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioA_V_dest_V_0_sel)) begin
        AudioA_V_dest_V_0_data_out = AudioA_V_dest_V_0_payload_B;
    end else begin
        AudioA_V_dest_V_0_data_out = AudioA_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioA_V_id_V_0_ack_out = 1'b1;
    end else begin
        AudioA_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioA_V_id_V_0_sel)) begin
        AudioA_V_id_V_0_data_out = AudioA_V_id_V_0_payload_B;
    end else begin
        AudioA_V_id_V_0_data_out = AudioA_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioA_V_keep_V_0_ack_out = 1'b1;
    end else begin
        AudioA_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioA_V_keep_V_0_sel)) begin
        AudioA_V_keep_V_0_data_out = AudioA_V_keep_V_0_payload_B;
    end else begin
        AudioA_V_keep_V_0_data_out = AudioA_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioA_V_last_V_0_ack_out = 1'b1;
    end else begin
        AudioA_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioA_V_last_V_0_sel)) begin
        AudioA_V_last_V_0_data_out = AudioA_V_last_V_0_payload_B;
    end else begin
        AudioA_V_last_V_0_data_out = AudioA_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioA_V_strb_V_0_ack_out = 1'b1;
    end else begin
        AudioA_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioA_V_strb_V_0_sel)) begin
        AudioA_V_strb_V_0_data_out = AudioA_V_strb_V_0_payload_B;
    end else begin
        AudioA_V_strb_V_0_data_out = AudioA_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioA_V_user_V_0_ack_out = 1'b1;
    end else begin
        AudioA_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioA_V_user_V_0_sel)) begin
        AudioA_V_user_V_0_data_out = AudioA_V_user_V_0_payload_B;
    end else begin
        AudioA_V_user_V_0_data_out = AudioA_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        AudioB_TDATA_blk_n = AudioB_V_data_V_1_state[1'd1];
    end else begin
        AudioB_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == AudioB_V_data_V_1_sel)) begin
        AudioB_V_data_V_1_data_out = AudioB_V_data_V_1_payload_B;
    end else begin
        AudioB_V_data_V_1_data_out = AudioB_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioB_V_data_V_1_vld_in = 1'b1;
    end else begin
        AudioB_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioB_V_dest_V_1_sel)) begin
        AudioB_V_dest_V_1_data_out = AudioB_V_dest_V_1_payload_B;
    end else begin
        AudioB_V_dest_V_1_data_out = AudioB_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioB_V_dest_V_1_vld_in = 1'b1;
    end else begin
        AudioB_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioB_V_id_V_1_sel)) begin
        AudioB_V_id_V_1_data_out = AudioB_V_id_V_1_payload_B;
    end else begin
        AudioB_V_id_V_1_data_out = AudioB_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioB_V_id_V_1_vld_in = 1'b1;
    end else begin
        AudioB_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioB_V_keep_V_1_sel)) begin
        AudioB_V_keep_V_1_data_out = AudioB_V_keep_V_1_payload_B;
    end else begin
        AudioB_V_keep_V_1_data_out = AudioB_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioB_V_keep_V_1_vld_in = 1'b1;
    end else begin
        AudioB_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioB_V_last_V_1_sel)) begin
        AudioB_V_last_V_1_data_out = AudioB_V_last_V_1_payload_B;
    end else begin
        AudioB_V_last_V_1_data_out = AudioB_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioB_V_last_V_1_vld_in = 1'b1;
    end else begin
        AudioB_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioB_V_strb_V_1_sel)) begin
        AudioB_V_strb_V_1_data_out = AudioB_V_strb_V_1_payload_B;
    end else begin
        AudioB_V_strb_V_1_data_out = AudioB_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioB_V_strb_V_1_vld_in = 1'b1;
    end else begin
        AudioB_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AudioB_V_user_V_1_sel)) begin
        AudioB_V_user_V_1_data_out = AudioB_V_user_V_1_payload_B;
    end else begin
        AudioB_V_user_V_1_data_out = AudioB_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
        AudioB_V_user_V_1_vld_in = 1'b1;
    end else begin
        AudioB_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == AudioB_V_data_V_1_ack_in) | (1'b0 == AudioA_V_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == AudioB_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AudioA_TREADY = AudioA_V_dest_V_0_state[1'd1];

assign AudioA_V_data_V_0_ack_in = AudioA_V_data_V_0_state[1'd1];

assign AudioA_V_data_V_0_load_A = (~AudioA_V_data_V_0_sel_wr & AudioA_V_data_V_0_state_cmp_full);

assign AudioA_V_data_V_0_load_B = (AudioA_V_data_V_0_state_cmp_full & AudioA_V_data_V_0_sel_wr);

assign AudioA_V_data_V_0_sel = AudioA_V_data_V_0_sel_rd;

assign AudioA_V_data_V_0_state_cmp_full = ((AudioA_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioA_V_data_V_0_vld_in = AudioA_TVALID;

assign AudioA_V_data_V_0_vld_out = AudioA_V_data_V_0_state[1'd0];

assign AudioA_V_dest_V_0_ack_in = AudioA_V_dest_V_0_state[1'd1];

assign AudioA_V_dest_V_0_load_A = (~AudioA_V_dest_V_0_sel_wr & AudioA_V_dest_V_0_state_cmp_full);

assign AudioA_V_dest_V_0_load_B = (AudioA_V_dest_V_0_state_cmp_full & AudioA_V_dest_V_0_sel_wr);

assign AudioA_V_dest_V_0_sel = AudioA_V_dest_V_0_sel_rd;

assign AudioA_V_dest_V_0_state_cmp_full = ((AudioA_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioA_V_dest_V_0_vld_in = AudioA_TVALID;

assign AudioA_V_dest_V_0_vld_out = AudioA_V_dest_V_0_state[1'd0];

assign AudioA_V_id_V_0_ack_in = AudioA_V_id_V_0_state[1'd1];

assign AudioA_V_id_V_0_load_A = (~AudioA_V_id_V_0_sel_wr & AudioA_V_id_V_0_state_cmp_full);

assign AudioA_V_id_V_0_load_B = (AudioA_V_id_V_0_state_cmp_full & AudioA_V_id_V_0_sel_wr);

assign AudioA_V_id_V_0_sel = AudioA_V_id_V_0_sel_rd;

assign AudioA_V_id_V_0_state_cmp_full = ((AudioA_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioA_V_id_V_0_vld_in = AudioA_TVALID;

assign AudioA_V_id_V_0_vld_out = AudioA_V_id_V_0_state[1'd0];

assign AudioA_V_keep_V_0_ack_in = AudioA_V_keep_V_0_state[1'd1];

assign AudioA_V_keep_V_0_load_A = (~AudioA_V_keep_V_0_sel_wr & AudioA_V_keep_V_0_state_cmp_full);

assign AudioA_V_keep_V_0_load_B = (AudioA_V_keep_V_0_state_cmp_full & AudioA_V_keep_V_0_sel_wr);

assign AudioA_V_keep_V_0_sel = AudioA_V_keep_V_0_sel_rd;

assign AudioA_V_keep_V_0_state_cmp_full = ((AudioA_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioA_V_keep_V_0_vld_in = AudioA_TVALID;

assign AudioA_V_keep_V_0_vld_out = AudioA_V_keep_V_0_state[1'd0];

assign AudioA_V_last_V_0_ack_in = AudioA_V_last_V_0_state[1'd1];

assign AudioA_V_last_V_0_load_A = (~AudioA_V_last_V_0_sel_wr & AudioA_V_last_V_0_state_cmp_full);

assign AudioA_V_last_V_0_load_B = (AudioA_V_last_V_0_state_cmp_full & AudioA_V_last_V_0_sel_wr);

assign AudioA_V_last_V_0_sel = AudioA_V_last_V_0_sel_rd;

assign AudioA_V_last_V_0_state_cmp_full = ((AudioA_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioA_V_last_V_0_vld_in = AudioA_TVALID;

assign AudioA_V_last_V_0_vld_out = AudioA_V_last_V_0_state[1'd0];

assign AudioA_V_strb_V_0_ack_in = AudioA_V_strb_V_0_state[1'd1];

assign AudioA_V_strb_V_0_load_A = (~AudioA_V_strb_V_0_sel_wr & AudioA_V_strb_V_0_state_cmp_full);

assign AudioA_V_strb_V_0_load_B = (AudioA_V_strb_V_0_state_cmp_full & AudioA_V_strb_V_0_sel_wr);

assign AudioA_V_strb_V_0_sel = AudioA_V_strb_V_0_sel_rd;

assign AudioA_V_strb_V_0_state_cmp_full = ((AudioA_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioA_V_strb_V_0_vld_in = AudioA_TVALID;

assign AudioA_V_strb_V_0_vld_out = AudioA_V_strb_V_0_state[1'd0];

assign AudioA_V_user_V_0_ack_in = AudioA_V_user_V_0_state[1'd1];

assign AudioA_V_user_V_0_load_A = (~AudioA_V_user_V_0_sel_wr & AudioA_V_user_V_0_state_cmp_full);

assign AudioA_V_user_V_0_load_B = (AudioA_V_user_V_0_state_cmp_full & AudioA_V_user_V_0_sel_wr);

assign AudioA_V_user_V_0_sel = AudioA_V_user_V_0_sel_rd;

assign AudioA_V_user_V_0_state_cmp_full = ((AudioA_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioA_V_user_V_0_vld_in = AudioA_TVALID;

assign AudioA_V_user_V_0_vld_out = AudioA_V_user_V_0_state[1'd0];

assign AudioB_TDATA = AudioB_V_data_V_1_data_out;

assign AudioB_TDEST = AudioB_V_dest_V_1_data_out;

assign AudioB_TID = AudioB_V_id_V_1_data_out;

assign AudioB_TKEEP = AudioB_V_keep_V_1_data_out;

assign AudioB_TLAST = AudioB_V_last_V_1_data_out;

assign AudioB_TSTRB = AudioB_V_strb_V_1_data_out;

assign AudioB_TUSER = AudioB_V_user_V_1_data_out;

assign AudioB_TVALID = AudioB_V_dest_V_1_state[1'd0];

assign AudioB_V_data_V_1_ack_in = AudioB_V_data_V_1_state[1'd1];

assign AudioB_V_data_V_1_ack_out = AudioB_TREADY;

assign AudioB_V_data_V_1_load_A = (~AudioB_V_data_V_1_sel_wr & AudioB_V_data_V_1_state_cmp_full);

assign AudioB_V_data_V_1_load_B = (AudioB_V_data_V_1_state_cmp_full & AudioB_V_data_V_1_sel_wr);

assign AudioB_V_data_V_1_sel = AudioB_V_data_V_1_sel_rd;

assign AudioB_V_data_V_1_state_cmp_full = ((AudioB_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioB_V_data_V_1_vld_out = AudioB_V_data_V_1_state[1'd0];

assign AudioB_V_dest_V_1_ack_in = AudioB_V_dest_V_1_state[1'd1];

assign AudioB_V_dest_V_1_ack_out = AudioB_TREADY;

assign AudioB_V_dest_V_1_load_A = (~AudioB_V_dest_V_1_sel_wr & AudioB_V_dest_V_1_state_cmp_full);

assign AudioB_V_dest_V_1_load_B = (AudioB_V_dest_V_1_state_cmp_full & AudioB_V_dest_V_1_sel_wr);

assign AudioB_V_dest_V_1_sel = AudioB_V_dest_V_1_sel_rd;

assign AudioB_V_dest_V_1_state_cmp_full = ((AudioB_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioB_V_dest_V_1_vld_out = AudioB_V_dest_V_1_state[1'd0];

assign AudioB_V_id_V_1_ack_in = AudioB_V_id_V_1_state[1'd1];

assign AudioB_V_id_V_1_ack_out = AudioB_TREADY;

assign AudioB_V_id_V_1_load_A = (~AudioB_V_id_V_1_sel_wr & AudioB_V_id_V_1_state_cmp_full);

assign AudioB_V_id_V_1_load_B = (AudioB_V_id_V_1_state_cmp_full & AudioB_V_id_V_1_sel_wr);

assign AudioB_V_id_V_1_sel = AudioB_V_id_V_1_sel_rd;

assign AudioB_V_id_V_1_state_cmp_full = ((AudioB_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioB_V_id_V_1_vld_out = AudioB_V_id_V_1_state[1'd0];

assign AudioB_V_keep_V_1_ack_in = AudioB_V_keep_V_1_state[1'd1];

assign AudioB_V_keep_V_1_ack_out = AudioB_TREADY;

assign AudioB_V_keep_V_1_load_A = (~AudioB_V_keep_V_1_sel_wr & AudioB_V_keep_V_1_state_cmp_full);

assign AudioB_V_keep_V_1_load_B = (AudioB_V_keep_V_1_state_cmp_full & AudioB_V_keep_V_1_sel_wr);

assign AudioB_V_keep_V_1_sel = AudioB_V_keep_V_1_sel_rd;

assign AudioB_V_keep_V_1_state_cmp_full = ((AudioB_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioB_V_keep_V_1_vld_out = AudioB_V_keep_V_1_state[1'd0];

assign AudioB_V_last_V_1_ack_in = AudioB_V_last_V_1_state[1'd1];

assign AudioB_V_last_V_1_ack_out = AudioB_TREADY;

assign AudioB_V_last_V_1_load_A = (~AudioB_V_last_V_1_sel_wr & AudioB_V_last_V_1_state_cmp_full);

assign AudioB_V_last_V_1_load_B = (AudioB_V_last_V_1_state_cmp_full & AudioB_V_last_V_1_sel_wr);

assign AudioB_V_last_V_1_sel = AudioB_V_last_V_1_sel_rd;

assign AudioB_V_last_V_1_state_cmp_full = ((AudioB_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioB_V_last_V_1_vld_out = AudioB_V_last_V_1_state[1'd0];

assign AudioB_V_strb_V_1_ack_in = AudioB_V_strb_V_1_state[1'd1];

assign AudioB_V_strb_V_1_ack_out = AudioB_TREADY;

assign AudioB_V_strb_V_1_load_A = (~AudioB_V_strb_V_1_sel_wr & AudioB_V_strb_V_1_state_cmp_full);

assign AudioB_V_strb_V_1_load_B = (AudioB_V_strb_V_1_state_cmp_full & AudioB_V_strb_V_1_sel_wr);

assign AudioB_V_strb_V_1_sel = AudioB_V_strb_V_1_sel_rd;

assign AudioB_V_strb_V_1_state_cmp_full = ((AudioB_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioB_V_strb_V_1_vld_out = AudioB_V_strb_V_1_state[1'd0];

assign AudioB_V_user_V_1_ack_in = AudioB_V_user_V_1_state[1'd1];

assign AudioB_V_user_V_1_ack_out = AudioB_TREADY;

assign AudioB_V_user_V_1_load_A = (~AudioB_V_user_V_1_sel_wr & AudioB_V_user_V_1_state_cmp_full);

assign AudioB_V_user_V_1_load_B = (AudioB_V_user_V_1_state_cmp_full & AudioB_V_user_V_1_sel_wr);

assign AudioB_V_user_V_1_sel = AudioB_V_user_V_1_sel_rd;

assign AudioB_V_user_V_1_state_cmp_full = ((AudioB_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AudioB_V_user_V_1_vld_out = AudioB_V_user_V_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

endmodule //audio_top
