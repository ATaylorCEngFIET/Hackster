#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"
#include "xvtc.h"
#include "xaxivdma.h"
#include "xaxivdma_i.h"
#include "vga_modes.h"
#include "dynclk.h"
#include "MIPI_D_PHY_RX.h"
#include "MIPI_CSI_2_RX.h"

#include "xgpiops.h"
#define cam_gpio XPAR_XGPIOPS_0_DEVICE_ID

#include "xiicps.h"
#include "i2c.h"

#include "xaxis_switch.h"
#define XAXIS_SWITCH_DEVICE_ID		XPAR_AXIS_SWITCH_0_DEVICE_ID
#define XAXIS_SWTICH_DEVICE_ID2    XPAR_AXIS_SWITCH_1_DEVICE_ID


#define DEMO_MAX_FRAME (720*1280)
#define DEMO_STRIDE (1280*3)
#define DISPLAY_NUM_FRAMES 3

XVtc	VtcInst,VtcInst2;
XVtc_Config *vtc_config,*vtc_config2 ;
XGpio hpd_in;
XAxiVdma vdma;
XAxiVdma_DmaSetup vdmaDMA;
XAxiVdma_Config *vdmaConfig;
XAxis_Switch AxisSwitch;
XAxis_Switch AxisSwitch2;
XIicPs  iic_cam;
XGpioPs gp_cam;
ClkConfig clkReg;
ClkMode clkMode;
u32 frameBuf[DISPLAY_NUM_FRAMES][DEMO_MAX_FRAME];
u32 *pFrames[DISPLAY_NUM_FRAMES];


void detect_camera();
int  Initial_setting_1 ( u32 *cfg_init , int cfg_init_QTY  );
void read_camera();

u8 SendBuffer [10];
u8 RecvBuffer [10];
#define IIC_cam 			XPAR_XIICPS_0_DEVICE_ID
#define CAM_ID              0x78
#define IIC_CAM_ADDR  		0x3c
#define IIC_SCLK_RATE		100000

VideoMode video;

int main()
{
    init_platform();
    disable_caches();
    XVtc_Timing vtcTiming;
    XVtc_SourceSelect SourceSelect;
    XAxis_Switch_Config *Config;
    XAxis_Switch_Config *Config2;
    XGpioPs_Config *GPIO_Config;
	u8 MiIndex;
	u8 SiIndex;
	int Status;

    u16 result;
    xil_printf("Hello World\n\r");
    vtc_config = XVtc_LookupConfig(XPAR_VTC_0_DEVICE_ID);
    XVtc_CfgInitialize(&VtcInst, vtc_config, vtc_config->BaseAddress);
    vtc_config2 = XVtc_LookupConfig(XPAR_VTC_1_DEVICE_ID);
    XVtc_CfgInitialize(&VtcInst2, vtc_config2, vtc_config2->BaseAddress);

    Config = XAxisScr_LookupConfig(XAXIS_SWITCH_DEVICE_ID);
    XAxisScr_CfgInitialize(&AxisSwitch, Config,	Config->BaseAddress);

    Config = XAxisScr_LookupConfig(XAXIS_SWITCH_DEVICE_ID2);
    XAxisScr_CfgInitialize(&AxisSwitch2, Config2,	Config2->BaseAddress);

    MIPI_CSI_2_RX_mWriteReg(XPAR_MIPI_CSI_2_RX_1_S_AXI_LITE_BASEADDR, CR_OFFSET, (CR_RESET_MASK & ~CR_ENABLE_MASK));
    MIPI_D_PHY_RX_mWriteReg(XPAR_MIPI_D_PHY_RX_0_S_AXI_LITE_BASEADDR, CR_OFFSET, (CR_RESET_MASK & ~CR_ENABLE_MASK));

    GPIO_Config = XGpioPs_LookupConfig(cam_gpio);
    Status= XGpioPs_CfgInitialize(&gp_cam,GPIO_Config,GPIO_Config->BaseAddr);
    XGpioPs_SetOutputEnablePin(&gp_cam,54,1);
    XGpioPs_SetDirectionPin(&gp_cam,54,1);
    XGpioPs_WritePin(&gp_cam,54,0x0);
    usleep(1000000);
    XGpioPs_WritePin(&gp_cam,54,0x1);

	MIPI_CSI_2_RX_mWriteReg(XPAR_MIPI_CSI_2_RX_1_S_AXI_LITE_BASEADDR, CR_OFFSET, CR_ENABLE_MASK);
	MIPI_D_PHY_RX_mWriteReg(XPAR_MIPI_D_PHY_RX_0_S_AXI_LITE_BASEADDR, CR_OFFSET, CR_ENABLE_MASK);

    //configure and assert the HPD
    XGpio_Initialize(&hpd_in, XPAR_AXI_GPIO_0_DEVICE_ID);
    XGpio_DiscreteWrite(&hpd_in,1,0x1);
    usleep(5000000);

    video = VMODE_1280x720;
	vtcTiming.HActiveVideo = video.width;	/**< Horizontal Active Video Size */
	vtcTiming.HFrontPorch = video.hps - video.width;	/**< Horizontal Front Porch Size */
	vtcTiming.HSyncWidth = video.hpe - video.hps;		/**< Horizontal Sync Width */
	vtcTiming.HBackPorch = video.hmax - video.hpe + 1;		/**< Horizontal Back Porch Size */
	vtcTiming.HSyncPolarity = video.hpol;	/**< Horizontal Sync Polarity */
	vtcTiming.VActiveVideo = video.height;	/**< Vertical Active Video Size */
	vtcTiming.V0FrontPorch = video.vps - video.height;	/**< Vertical Front Porch Size */
	vtcTiming.V0SyncWidth = video.vpe - video.vps;	/**< Vertical Sync Width */
	vtcTiming.V0BackPorch = video.vmax - video.vpe + 1;;	/**< Horizontal Back Porch Size */
	vtcTiming.V1FrontPorch = video.vps - video.height;	/**< Vertical Front Porch Size */
	vtcTiming.V1SyncWidth = video.vpe - video.vps;	/**< Vertical Sync Width */
	vtcTiming.V1BackPorch = video.vmax - video.vpe + 1;;	/**< Horizontal Back Porch Size */
	vtcTiming.VSyncPolarity = video.vpol;	/**< Vertical Sync Polarity */
	vtcTiming.Interlaced = 0;


    memset((void *)&SourceSelect, 0, sizeof(SourceSelect));
	SourceSelect.VBlankPolSrc = 1;
	SourceSelect.VSyncPolSrc = 1;
	SourceSelect.HBlankPolSrc = 1;
	SourceSelect.HSyncPolSrc = 1;
	SourceSelect.ActiveVideoPolSrc = 1;
	SourceSelect.ActiveChromaPolSrc= 1;
	SourceSelect.VChromaSrc = 1;
	SourceSelect.VActiveSrc = 1;
	SourceSelect.VBackPorchSrc = 1;
	SourceSelect.VSyncSrc = 1;
	SourceSelect.VFrontPorchSrc = 1;
	SourceSelect.VTotalSrc = 1;
	SourceSelect.HActiveSrc = 1;
	SourceSelect.HBackPorchSrc = 1;
	SourceSelect.HSyncSrc = 1;
	SourceSelect.HFrontPorchSrc = 1;
	SourceSelect.HTotalSrc = 1;
	XVtc_RegUpdateEnable(&VtcInst2);
	XVtc_SetGeneratorTiming(&VtcInst2, &vtcTiming);
	XVtc_SetSource(&VtcInst2, &SourceSelect);
	XVtc_EnableGenerator(&VtcInst2);
	XVtc_Enable(&VtcInst2);

	XVtc_EnableDetector(&VtcInst);
	XVtc_Enable(&VtcInst);
	xil_printf("Video Mode = %i ", result);
	xil_printf("\n\r");

	for (int i = 0; i < 3; i++)
	{
		pFrames[i] = frameBuf[i];
	}

	vdmaConfig = XAxiVdma_LookupConfig(XPAR_AXIVDMA_0_DEVICE_ID);
	XAxiVdma_CfgInitialize(&vdma, vdmaConfig, vdmaConfig->BaseAddress);
	video = VMODE_1280x720;
	ClkFindParams(video.freq, &clkMode);
	ClkFindReg(&clkReg, &clkMode);
	ClkWriteReg(&clkReg, 0x43C20000);
	ClkStop(0x43C20000);
	ClkStart(0x43C20000);
	vdmaDMA.FrameDelay = 0;
	vdmaDMA.EnableCircularBuf = 1;
	vdmaDMA.EnableSync = 0;
	vdmaDMA.PointNum = 0;
	vdmaDMA.EnableFrameCounter = 0;

	vdmaDMA.VertSizeInput = video.height;
	vdmaDMA.HoriSizeInput = (video.width)*3;
	vdmaDMA.FixedFrameStoreAddr = 0;
	vdmaDMA.FrameStoreStartAddr[0] = (u32)  pFrames[0];
	vdmaDMA.Stride = (video.width)*3;

	XAxiVdma_DmaConfig(&vdma, XAXIVDMA_WRITE, &(vdmaDMA));
	Status = XAxiVdma_DmaSetBufferAddr(&vdma, XAXIVDMA_WRITE,vdmaDMA.FrameStoreStartAddr);
	Status = XAxiVdma_DmaStart(&vdma, XAXIVDMA_WRITE);
	Status = XAxiVdma_StartParking(&vdma, 0, XAXIVDMA_WRITE);

	XAxiVdma_DmaConfig(&vdma, XAXIVDMA_READ, &(vdmaDMA));
	XAxiVdma_DmaSetBufferAddr(&vdma, XAXIVDMA_READ,vdmaDMA.FrameStoreStartAddr);
	XAxiVdma_DmaStart(&vdma, XAXIVDMA_READ);
	XAxiVdma_StartParking(&vdma, 0, XAXIVDMA_READ);

	detect_camera();
	SendBuffer[0]= 0x31;
	SendBuffer[1]= 0x03;
	SendBuffer[2]= 0x11;
	Status = XIicPs_MasterSendPolled(&iic_cam, SendBuffer, 3, IIC_CAM_ADDR);
	//writeReg(0x3103, 0x11);
	//[7]=1 Software reset; [6]=0 Software power down; Default=0x02

	SendBuffer[0]= 0x30;
	SendBuffer[1]= 0x08;
	SendBuffer[2]= 0x82;
	Status = XIicPs_MasterSendPolled(&iic_cam, SendBuffer, 3, IIC_CAM_ADDR);
	//writeReg(0x3008, 0x82);

	usleep(1000000);

	Initial_setting_1 ( cfg_init , 63  );
	Initial_setting_1 ( cfg_720p_60fps , 38  );
	xil_printf("Configuration Complete\n\r");
	XAxisScr_MiPortDisableAll(&AxisSwitch);
	XAxisScr_MiPortDisableAll(&AxisSwitch2);
	MiIndex = 0;
	SiIndex = 1;
	XAxisScr_MiPortEnable(&AxisSwitch, MiIndex, SiIndex);
	XAxisScr_MiPortEnable(&AxisSwitch2, MiIndex, SiIndex);
	XAxisScr_RegUpdateEnable(&AxisSwitch);
	XAxisScr_MiPortEnable(&AxisSwitch2, MiIndex, SiIndex);
	Status = XAxisScr_IsMiPortEnabled(&AxisSwitch, MiIndex, SiIndex);
	if (Status) {
		xil_printf("MI[%d] is sourced from SI[%d].\r\n", MiIndex,
				SiIndex);
	}

	read_camera();

	while(1) {

   }

    cleanup_platform();
    return 0;
}

void detect_camera()
{
	XIicPs_Config *iic_conf;
	u32 Status;
	iic_conf = XIicPs_LookupConfig(IIC_cam);
    XIicPs_CfgInitialize(&iic_cam,iic_conf,iic_conf->BaseAddress);
    XIicPs_SetSClk(&iic_cam, IIC_SCLK_RATE);

    SendBuffer[0]= 0x31;
    SendBuffer[1]= 0x00;

    Status = XIicPs_MasterSendPolled(&iic_cam, SendBuffer, 2, IIC_CAM_ADDR);
	if (Status != XST_SUCCESS) {
		print("I2C write error\n\r");
		return XST_FAILURE;
	}

	Status = XIicPs_MasterRecvPolled(&iic_cam, RecvBuffer,1, IIC_CAM_ADDR);
	if (Status != XST_SUCCESS) {
		print("I2C read error\n\r");
		return XST_FAILURE;
	}

	if(RecvBuffer[0] != CAM_ID ){
		print("Camera not detected\n\r");
	}
	else{
		print("Camera detected \n\r");
	}
}

void read_camera()
{
	XIicPs_Config *iic_conf;
	u32 Status;
	iic_conf = XIicPs_LookupConfig(IIC_cam);
    XIicPs_CfgInitialize(&iic_cam,iic_conf,iic_conf->BaseAddress);
    XIicPs_SetSClk(&iic_cam, IIC_SCLK_RATE);

    SendBuffer[0]= 0x30;
    SendBuffer[1]= 0x0e;

    Status = XIicPs_MasterSendPolled(&iic_cam, SendBuffer, 2, IIC_CAM_ADDR);
	if (Status != XST_SUCCESS) {
		print("I2C write error\n\r");
		return XST_FAILURE;
	}

	Status = XIicPs_MasterRecvPolled(&iic_cam, RecvBuffer,1, IIC_CAM_ADDR);
	if (Status != XST_SUCCESS) {
		print("I2C read error\n\r");
		return XST_FAILURE;
	}

}

int  Initial_setting_1 ( u32 *cfg_init , int cfg_init_QTY  )
{
	s32  Status , byte_count;

    int i ;

    u8 SendBuffer[10];

    for(i=0;i<(cfg_init_QTY*2);i+=2){
		SendBuffer[1]=  *(cfg_init + i);
		SendBuffer[0]=  (*(cfg_init + i))>>8;
		SendBuffer[2]=  *(cfg_init + i + 1);

	Status = XIicPs_MasterSendPolled(&iic_cam, SendBuffer, 3, IIC_CAM_ADDR);
	if (Status != XST_SUCCESS) {
		print("I2C read error\n\r");
		return XST_FAILURE;
	}


   usleep(1000);
   }

return XST_SUCCESS;

}
