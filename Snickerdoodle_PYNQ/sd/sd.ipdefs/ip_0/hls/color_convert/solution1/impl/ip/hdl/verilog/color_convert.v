// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_convert,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=1227,HLS_SYN_LUT=1227,HLS_VERSION=2019_1_1}" *)

module color_convert (
        ap_clk,
        ap_rst_n,
        stream_in_24_TDATA,
        stream_in_24_TVALID,
        stream_in_24_TREADY,
        stream_in_24_TUSER,
        stream_in_24_TLAST,
        stream_out_24_TDATA,
        stream_out_24_TVALID,
        stream_out_24_TREADY,
        stream_out_24_TUSER,
        stream_out_24_TLAST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        control,
        ap_rst_n_control
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] stream_in_24_TDATA;
input   stream_in_24_TVALID;
output   stream_in_24_TREADY;
input  [0:0] stream_in_24_TUSER;
input  [0:0] stream_in_24_TLAST;
output  [23:0] stream_out_24_TDATA;
output   stream_out_24_TVALID;
input   stream_out_24_TREADY;
output  [0:0] stream_out_24_TUSER;
output  [0:0] stream_out_24_TLAST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   control;
input   ap_rst_n_control;

 reg    ap_rst_n_inv;
reg   [23:0] stream_in_24_data_0_data_out;
wire    stream_in_24_data_0_vld_in;
wire    stream_in_24_data_0_vld_out;
wire    stream_in_24_data_0_ack_in;
reg    stream_in_24_data_0_ack_out;
reg   [23:0] stream_in_24_data_0_payload_A;
reg   [23:0] stream_in_24_data_0_payload_B;
reg    stream_in_24_data_0_sel_rd;
reg    stream_in_24_data_0_sel_wr;
wire    stream_in_24_data_0_sel;
wire    stream_in_24_data_0_load_A;
wire    stream_in_24_data_0_load_B;
reg   [1:0] stream_in_24_data_0_state;
wire    stream_in_24_data_0_state_cmp_full;
reg   [0:0] stream_in_24_user_V_0_data_out;
wire    stream_in_24_user_V_0_vld_in;
wire    stream_in_24_user_V_0_vld_out;
wire    stream_in_24_user_V_0_ack_in;
reg    stream_in_24_user_V_0_ack_out;
reg   [0:0] stream_in_24_user_V_0_payload_A;
reg   [0:0] stream_in_24_user_V_0_payload_B;
reg    stream_in_24_user_V_0_sel_rd;
reg    stream_in_24_user_V_0_sel_wr;
wire    stream_in_24_user_V_0_sel;
wire    stream_in_24_user_V_0_load_A;
wire    stream_in_24_user_V_0_load_B;
reg   [1:0] stream_in_24_user_V_0_state;
wire    stream_in_24_user_V_0_state_cmp_full;
reg   [0:0] stream_in_24_last_V_0_data_out;
wire    stream_in_24_last_V_0_vld_in;
wire    stream_in_24_last_V_0_vld_out;
wire    stream_in_24_last_V_0_ack_in;
reg    stream_in_24_last_V_0_ack_out;
reg   [0:0] stream_in_24_last_V_0_payload_A;
reg   [0:0] stream_in_24_last_V_0_payload_B;
reg    stream_in_24_last_V_0_sel_rd;
reg    stream_in_24_last_V_0_sel_wr;
wire    stream_in_24_last_V_0_sel;
wire    stream_in_24_last_V_0_load_A;
wire    stream_in_24_last_V_0_load_B;
reg   [1:0] stream_in_24_last_V_0_state;
wire    stream_in_24_last_V_0_state_cmp_full;
reg   [23:0] stream_out_24_data_1_data_out;
reg    stream_out_24_data_1_vld_in;
wire    stream_out_24_data_1_vld_out;
wire    stream_out_24_data_1_ack_in;
wire    stream_out_24_data_1_ack_out;
reg   [23:0] stream_out_24_data_1_payload_A;
reg   [23:0] stream_out_24_data_1_payload_B;
reg    stream_out_24_data_1_sel_rd;
reg    stream_out_24_data_1_sel_wr;
wire    stream_out_24_data_1_sel;
wire    stream_out_24_data_1_load_A;
wire    stream_out_24_data_1_load_B;
reg   [1:0] stream_out_24_data_1_state;
wire    stream_out_24_data_1_state_cmp_full;
reg   [0:0] stream_out_24_user_V_1_data_out;
reg    stream_out_24_user_V_1_vld_in;
wire    stream_out_24_user_V_1_vld_out;
wire    stream_out_24_user_V_1_ack_in;
wire    stream_out_24_user_V_1_ack_out;
reg   [0:0] stream_out_24_user_V_1_payload_A;
reg   [0:0] stream_out_24_user_V_1_payload_B;
reg    stream_out_24_user_V_1_sel_rd;
reg    stream_out_24_user_V_1_sel_wr;
wire    stream_out_24_user_V_1_sel;
wire    stream_out_24_user_V_1_load_A;
wire    stream_out_24_user_V_1_load_B;
reg   [1:0] stream_out_24_user_V_1_state;
wire    stream_out_24_user_V_1_state_cmp_full;
reg   [0:0] stream_out_24_last_V_1_data_out;
reg    stream_out_24_last_V_1_vld_in;
wire    stream_out_24_last_V_1_vld_out;
wire    stream_out_24_last_V_1_ack_in;
wire    stream_out_24_last_V_1_ack_out;
reg   [0:0] stream_out_24_last_V_1_payload_A;
reg   [0:0] stream_out_24_last_V_1_payload_B;
reg    stream_out_24_last_V_1_sel_rd;
reg    stream_out_24_last_V_1_sel_wr;
wire    stream_out_24_last_V_1_sel;
wire    stream_out_24_last_V_1_load_A;
wire    stream_out_24_last_V_1_load_B;
reg   [1:0] stream_out_24_last_V_1_state;
wire    stream_out_24_last_V_1_state_cmp_full;
wire   [9:0] c1_c1_V;
reg   [9:0] c1_c1_V_0_data_reg;
reg    c1_c1_V_0_vld_reg;
reg    c1_c1_V_0_ack_out;
wire   [9:0] c1_c2_V;
reg   [9:0] c1_c2_V_0_data_reg;
reg    c1_c2_V_0_vld_reg;
reg    c1_c2_V_0_ack_out;
wire   [9:0] c1_c3_V;
reg   [9:0] c1_c3_V_0_data_reg;
reg    c1_c3_V_0_vld_reg;
reg    c1_c3_V_0_ack_out;
wire   [9:0] c2_c1_V;
reg   [9:0] c2_c1_V_0_data_reg;
reg    c2_c1_V_0_vld_reg;
reg    c2_c1_V_0_ack_out;
wire   [9:0] c2_c2_V;
reg   [9:0] c2_c2_V_0_data_reg;
reg    c2_c2_V_0_vld_reg;
reg    c2_c2_V_0_ack_out;
wire   [9:0] c2_c3_V;
reg   [9:0] c2_c3_V_0_data_reg;
reg    c2_c3_V_0_vld_reg;
reg    c2_c3_V_0_ack_out;
wire   [9:0] c3_c1_V;
reg   [9:0] c3_c1_V_0_data_reg;
reg    c3_c1_V_0_vld_reg;
reg    c3_c1_V_0_ack_out;
wire   [9:0] c3_c2_V;
reg   [9:0] c3_c2_V_0_data_reg;
reg    c3_c2_V_0_vld_reg;
reg    c3_c2_V_0_ack_out;
wire   [9:0] c3_c3_V;
reg   [9:0] c3_c3_V_0_data_reg;
reg    c3_c3_V_0_vld_reg;
reg    c3_c3_V_0_ack_out;
wire   [9:0] bias_c1_V;
reg   [9:0] bias_c1_V_0_data_reg;
reg    bias_c1_V_0_vld_reg;
reg    bias_c1_V_0_ack_out;
wire   [9:0] bias_c2_V;
reg   [9:0] bias_c2_V_0_data_reg;
reg    bias_c2_V_0_vld_reg;
reg    bias_c2_V_0_ack_out;
wire   [9:0] bias_c3_V;
reg   [9:0] bias_c3_V_0_data_reg;
reg    bias_c3_V_0_vld_reg;
reg    bias_c3_V_0_ack_out;
reg    stream_in_24_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    stream_out_24_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_rst_n_control_inv;
reg   [0:0] stream_in_24_user_V_s_reg_910;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] stream_in_24_user_V_s_reg_910_pp0_iter1_reg;
reg   [0:0] stream_in_24_user_V_s_reg_910_pp0_iter2_reg;
reg   [0:0] stream_in_24_user_V_s_reg_910_pp0_iter3_reg;
reg   [0:0] stream_in_24_user_V_s_reg_910_pp0_iter4_reg;
reg   [0:0] stream_in_24_last_V_s_reg_915;
reg   [0:0] stream_in_24_last_V_s_reg_915_pp0_iter1_reg;
reg   [0:0] stream_in_24_last_V_s_reg_915_pp0_iter2_reg;
reg   [0:0] stream_in_24_last_V_s_reg_915_pp0_iter3_reg;
reg   [0:0] stream_in_24_last_V_s_reg_915_pp0_iter4_reg;
wire   [7:0] p_Repl2_s_fu_215_p1;
reg   [7:0] p_Repl2_s_reg_920;
reg   [7:0] p_Repl2_1_reg_925;
reg   [7:0] p_Repl2_2_reg_930;
reg   [7:0] p_Repl2_2_reg_930_pp0_iter1_reg;
reg   [7:0] p_Repl2_2_reg_930_pp0_iter2_reg;
reg   [9:0] bias_c3_V_read_reg_935;
reg   [9:0] bias_c3_V_read_reg_935_pp0_iter2_reg;
reg   [9:0] bias_c3_V_read_reg_935_pp0_iter3_reg;
reg   [9:0] bias_c2_V_read_reg_940;
reg   [9:0] bias_c2_V_read_reg_940_pp0_iter2_reg;
reg   [9:0] bias_c2_V_read_reg_940_pp0_iter3_reg;
reg   [9:0] bias_c1_V_read_reg_945;
reg   [9:0] bias_c1_V_read_reg_945_pp0_iter2_reg;
reg   [9:0] bias_c1_V_read_reg_945_pp0_iter3_reg;
reg   [9:0] c3_c3_V_read_reg_950;
reg  signed [9:0] c3_c3_V_read_reg_950_pp0_iter2_reg;
reg  signed [9:0] c3_c1_V_read_reg_955;
reg   [9:0] c2_c3_V_read_reg_960;
reg  signed [9:0] c2_c3_V_read_reg_960_pp0_iter2_reg;
reg  signed [9:0] c2_c1_V_read_reg_965;
reg   [9:0] c1_c3_V_read_reg_970;
reg  signed [9:0] c1_c3_V_read_reg_970_pp0_iter2_reg;
reg  signed [9:0] c1_c2_V_read_reg_975;
wire   [17:0] r_V_fu_239_p1;
reg   [17:0] r_V_reg_980;
wire   [17:0] r_V_12_fu_246_p2;
reg  signed [17:0] r_V_12_reg_986;
wire   [17:0] r_V_2_fu_252_p1;
reg   [17:0] r_V_2_reg_991;
wire   [17:0] r_V_16_fu_259_p2;
reg  signed [17:0] r_V_16_reg_996;
wire   [17:0] r_V_19_fu_269_p2;
reg  signed [17:0] r_V_19_reg_1001;
wire  signed [18:0] grp_fu_865_p3;
reg  signed [18:0] ret_V_6_reg_1006;
reg    ap_enable_reg_pp0_iter2;
wire  signed [18:0] grp_fu_872_p3;
reg  signed [18:0] ret_V_reg_1011;
wire  signed [18:0] grp_fu_879_p3;
reg  signed [18:0] ret_V_11_reg_1016;
wire  signed [19:0] grp_fu_886_p3;
reg  signed [19:0] ret_V_7_reg_1021;
reg    ap_enable_reg_pp0_iter3;
wire  signed [19:0] grp_fu_894_p3;
reg  signed [19:0] ret_V_9_reg_1026;
wire  signed [19:0] grp_fu_902_p3;
reg  signed [19:0] ret_V_12_reg_1031;
wire   [0:0] p_Result_s_fu_330_p3;
reg   [0:0] p_Result_s_reg_1036;
wire   [7:0] p_Val2_7_fu_368_p2;
reg   [7:0] p_Val2_7_reg_1042;
wire   [0:0] and_ln781_fu_424_p2;
reg   [0:0] and_ln781_reg_1048;
wire   [0:0] or_ln785_fu_430_p2;
reg   [0:0] or_ln785_reg_1054;
wire   [0:0] p_Result_2_fu_452_p3;
reg   [0:0] p_Result_2_reg_1060;
wire   [7:0] p_Val2_15_fu_490_p2;
reg   [7:0] p_Val2_15_reg_1066;
wire   [0:0] and_ln781_1_fu_546_p2;
reg   [0:0] and_ln781_1_reg_1072;
wire   [0:0] or_ln785_1_fu_552_p2;
reg   [0:0] or_ln785_1_reg_1078;
wire   [0:0] p_Result_4_fu_574_p3;
reg   [0:0] p_Result_4_reg_1084;
wire   [7:0] p_Val2_23_fu_612_p2;
reg   [7:0] p_Val2_23_reg_1090;
wire   [0:0] and_ln781_2_fu_668_p2;
reg   [0:0] and_ln781_2_reg_1096;
wire   [0:0] or_ln785_2_fu_674_p2;
reg   [0:0] or_ln785_2_reg_1102;
wire   [23:0] stream_out_24_data_t_fu_854_p4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] r_V_12_fu_246_p0;
wire  signed [9:0] r_V_12_fu_246_p1;
wire   [7:0] r_V_16_fu_259_p0;
wire  signed [9:0] r_V_16_fu_259_p1;
wire   [7:0] r_V_19_fu_269_p0;
wire  signed [9:0] r_V_19_fu_269_p1;
wire   [17:0] rhs_V_2_fu_314_p3;
wire  signed [19:0] sext_ln728_fu_321_p1;
(* use_dsp48 = "no" *) wire   [19:0] ret_V_8_fu_325_p2;
wire   [0:0] tmp_5_fu_356_p3;
wire   [7:0] p_Val2_6_fu_338_p4;
wire   [7:0] zext_ln415_fu_364_p1;
wire   [0:0] tmp_6_fu_374_p3;
wire   [0:0] p_Result_1_fu_348_p3;
wire   [0:0] xor_ln416_fu_382_p2;
wire   [3:0] tmp_fu_394_p4;
wire   [0:0] carry_1_fu_388_p2;
wire   [0:0] Range1_all_ones_fu_404_p2;
wire   [0:0] Range1_all_zeros_fu_410_p2;
wire   [0:0] deleted_zeros_fu_416_p3;
wire   [17:0] rhs_V_5_fu_436_p3;
wire  signed [19:0] sext_ln728_1_fu_443_p1;
(* use_dsp48 = "no" *) wire   [19:0] ret_V_10_fu_447_p2;
wire   [0:0] tmp_9_fu_478_p3;
wire   [7:0] zext_ln415_1_fu_486_p1;
wire   [7:0] p_Val2_14_fu_460_p4;
wire   [0:0] tmp_10_fu_496_p3;
wire   [0:0] p_Result_3_fu_470_p3;
wire   [0:0] xor_ln416_1_fu_504_p2;
wire   [3:0] tmp_1_fu_516_p4;
wire   [0:0] carry_3_fu_510_p2;
wire   [0:0] Range1_all_ones_1_fu_526_p2;
wire   [0:0] Range1_all_zeros_1_fu_532_p2;
wire   [0:0] deleted_zeros_1_fu_538_p3;
wire   [17:0] rhs_V_8_fu_558_p3;
wire  signed [19:0] sext_ln728_2_fu_565_p1;
(* use_dsp48 = "no" *) wire   [19:0] ret_V_13_fu_569_p2;
wire   [0:0] tmp_13_fu_600_p3;
wire   [7:0] zext_ln415_2_fu_608_p1;
wire   [7:0] p_Val2_22_fu_582_p4;
wire   [0:0] tmp_14_fu_618_p3;
wire   [0:0] p_Result_5_fu_592_p3;
wire   [0:0] xor_ln416_2_fu_626_p2;
wire   [3:0] tmp_2_fu_638_p4;
wire   [0:0] carry_5_fu_632_p2;
wire   [0:0] Range1_all_ones_2_fu_648_p2;
wire   [0:0] Range1_all_zeros_2_fu_654_p2;
wire   [0:0] deleted_zeros_2_fu_660_p3;
wire   [0:0] xor_ln781_fu_680_p2;
wire   [0:0] xor_ln340_1_fu_695_p2;
wire   [0:0] or_ln340_3_fu_700_p2;
wire   [0:0] overflow_fu_690_p2;
wire   [0:0] and_ln340_fu_705_p2;
wire   [0:0] neg_src_fu_685_p2;
wire   [0:0] or_ln340_fu_710_p2;
wire   [7:0] select_ln340_fu_716_p3;
wire   [7:0] select_ln396_fu_723_p3;
wire   [0:0] xor_ln781_1_fu_738_p2;
wire   [0:0] xor_ln340_fu_753_p2;
wire   [0:0] or_ln340_4_fu_758_p2;
wire   [0:0] overflow_1_fu_748_p2;
wire   [0:0] and_ln340_1_fu_763_p2;
wire   [0:0] neg_src_6_fu_743_p2;
wire   [0:0] or_ln340_1_fu_768_p2;
wire   [7:0] select_ln340_1_fu_774_p3;
wire   [7:0] select_ln396_1_fu_781_p3;
wire   [0:0] xor_ln781_2_fu_796_p2;
wire   [0:0] xor_ln340_2_fu_811_p2;
wire   [0:0] or_ln340_5_fu_816_p2;
wire   [0:0] overflow_2_fu_806_p2;
wire   [0:0] and_ln340_2_fu_821_p2;
wire   [0:0] neg_src_7_fu_801_p2;
wire   [0:0] or_ln340_2_fu_826_p2;
wire   [7:0] select_ln340_2_fu_832_p3;
wire   [7:0] select_ln396_2_fu_839_p3;
wire   [7:0] out3_V_fu_846_p3;
wire   [7:0] out2_V_fu_788_p3;
wire   [7:0] out1_V_fu_730_p3;
wire   [7:0] grp_fu_865_p0;
wire   [7:0] grp_fu_872_p0;
wire   [7:0] grp_fu_879_p0;
wire   [7:0] grp_fu_886_p0;
wire   [17:0] r_V_4_fu_293_p1;
wire   [7:0] grp_fu_894_p0;
wire   [7:0] grp_fu_902_p0;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [17:0] r_V_12_fu_246_p00;

// power-on initialization
initial begin
#0 stream_in_24_data_0_sel_rd = 1'b0;
#0 stream_in_24_data_0_sel_wr = 1'b0;
#0 stream_in_24_data_0_state = 2'd0;
#0 stream_in_24_user_V_0_sel_rd = 1'b0;
#0 stream_in_24_user_V_0_sel_wr = 1'b0;
#0 stream_in_24_user_V_0_state = 2'd0;
#0 stream_in_24_last_V_0_sel_rd = 1'b0;
#0 stream_in_24_last_V_0_sel_wr = 1'b0;
#0 stream_in_24_last_V_0_state = 2'd0;
#0 stream_out_24_data_1_sel_rd = 1'b0;
#0 stream_out_24_data_1_sel_wr = 1'b0;
#0 stream_out_24_data_1_state = 2'd0;
#0 stream_out_24_user_V_1_sel_rd = 1'b0;
#0 stream_out_24_user_V_1_sel_wr = 1'b0;
#0 stream_out_24_user_V_1_state = 2'd0;
#0 stream_out_24_last_V_1_sel_rd = 1'b0;
#0 stream_out_24_last_V_1_sel_wr = 1'b0;
#0 stream_out_24_last_V_1_state = 2'd0;
#0 c1_c1_V_0_data_reg = 10'd0;
#0 c1_c1_V_0_vld_reg = 1'b0;
#0 c1_c2_V_0_data_reg = 10'd0;
#0 c1_c2_V_0_vld_reg = 1'b0;
#0 c1_c3_V_0_data_reg = 10'd0;
#0 c1_c3_V_0_vld_reg = 1'b0;
#0 c2_c1_V_0_data_reg = 10'd0;
#0 c2_c1_V_0_vld_reg = 1'b0;
#0 c2_c2_V_0_data_reg = 10'd0;
#0 c2_c2_V_0_vld_reg = 1'b0;
#0 c2_c3_V_0_data_reg = 10'd0;
#0 c2_c3_V_0_vld_reg = 1'b0;
#0 c3_c1_V_0_data_reg = 10'd0;
#0 c3_c1_V_0_vld_reg = 1'b0;
#0 c3_c2_V_0_data_reg = 10'd0;
#0 c3_c2_V_0_vld_reg = 1'b0;
#0 c3_c3_V_0_data_reg = 10'd0;
#0 c3_c3_V_0_vld_reg = 1'b0;
#0 bias_c1_V_0_data_reg = 10'd0;
#0 bias_c1_V_0_vld_reg = 1'b0;
#0 bias_c2_V_0_data_reg = 10'd0;
#0 bias_c2_V_0_vld_reg = 1'b0;
#0 bias_c3_V_0_data_reg = 10'd0;
#0 bias_c3_V_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

color_convert_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
color_convert_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(control),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .c1_c1_V(c1_c1_V),
    .c1_c2_V(c1_c2_V),
    .c1_c3_V(c1_c3_V),
    .c2_c1_V(c2_c1_V),
    .c2_c2_V(c2_c2_V),
    .c2_c3_V(c2_c3_V),
    .c3_c1_V(c3_c1_V),
    .c3_c2_V(c3_c2_V),
    .c3_c3_V(c3_c3_V),
    .bias_c1_V(bias_c1_V),
    .bias_c2_V(bias_c2_V),
    .bias_c3_V(bias_c3_V),
    .clk(ap_clk),
    .rst(ap_rst_n_control_inv)
);

color_convert_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
color_convert_macbkb_U1(
    .din0(grp_fu_865_p0),
    .din1(c1_c2_V_read_reg_975),
    .din2(r_V_12_reg_986),
    .dout(grp_fu_865_p3)
);

color_convert_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
color_convert_macbkb_U2(
    .din0(grp_fu_872_p0),
    .din1(c2_c1_V_read_reg_965),
    .din2(r_V_16_reg_996),
    .dout(grp_fu_872_p3)
);

color_convert_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
color_convert_macbkb_U3(
    .din0(grp_fu_879_p0),
    .din1(c3_c1_V_read_reg_955),
    .din2(r_V_19_reg_1001),
    .dout(grp_fu_879_p3)
);

color_convert_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
color_convert_maccud_U4(
    .din0(grp_fu_886_p0),
    .din1(c1_c3_V_read_reg_970_pp0_iter2_reg),
    .din2(ret_V_6_reg_1006),
    .dout(grp_fu_886_p3)
);

color_convert_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
color_convert_maccud_U5(
    .din0(grp_fu_894_p0),
    .din1(c2_c3_V_read_reg_960_pp0_iter2_reg),
    .din2(ret_V_reg_1011),
    .dout(grp_fu_894_p3)
);

color_convert_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
color_convert_maccud_U6(
    .din0(grp_fu_902_p0),
    .din1(c3_c3_V_read_reg_950_pp0_iter2_reg),
    .din2(ret_V_11_reg_1016),
    .dout(grp_fu_902_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_data_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_24_data_0_ack_out == 1'b1) & (stream_in_24_data_0_vld_out == 1'b1))) begin
            stream_in_24_data_0_sel_rd <= ~stream_in_24_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_data_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_24_data_0_ack_in == 1'b1) & (stream_in_24_data_0_vld_in == 1'b1))) begin
            stream_in_24_data_0_sel_wr <= ~stream_in_24_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_data_0_state <= 2'd0;
    end else begin
        if ((((stream_in_24_data_0_vld_in == 1'b0) & (stream_in_24_data_0_state == 2'd2)) | ((stream_in_24_data_0_vld_in == 1'b0) & (stream_in_24_data_0_state == 2'd3) & (stream_in_24_data_0_ack_out == 1'b1)))) begin
            stream_in_24_data_0_state <= 2'd2;
        end else if ((((stream_in_24_data_0_ack_out == 1'b0) & (stream_in_24_data_0_state == 2'd1)) | ((stream_in_24_data_0_ack_out == 1'b0) & (stream_in_24_data_0_state == 2'd3) & (stream_in_24_data_0_vld_in == 1'b1)))) begin
            stream_in_24_data_0_state <= 2'd1;
        end else if (((~((stream_in_24_data_0_vld_in == 1'b0) & (stream_in_24_data_0_ack_out == 1'b1)) & ~((stream_in_24_data_0_ack_out == 1'b0) & (stream_in_24_data_0_vld_in == 1'b1)) & (stream_in_24_data_0_state == 2'd3)) | ((stream_in_24_data_0_state == 2'd1) & (stream_in_24_data_0_ack_out == 1'b1)) | ((stream_in_24_data_0_state == 2'd2) & (stream_in_24_data_0_vld_in == 1'b1)))) begin
            stream_in_24_data_0_state <= 2'd3;
        end else begin
            stream_in_24_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_24_last_V_0_ack_out == 1'b1) & (stream_in_24_last_V_0_vld_out == 1'b1))) begin
            stream_in_24_last_V_0_sel_rd <= ~stream_in_24_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_24_last_V_0_ack_in == 1'b1) & (stream_in_24_last_V_0_vld_in == 1'b1))) begin
            stream_in_24_last_V_0_sel_wr <= ~stream_in_24_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_last_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_24_last_V_0_state == 2'd2) & (stream_in_24_last_V_0_vld_in == 1'b0)) | ((stream_in_24_last_V_0_state == 2'd3) & (stream_in_24_last_V_0_vld_in == 1'b0) & (stream_in_24_last_V_0_ack_out == 1'b1)))) begin
            stream_in_24_last_V_0_state <= 2'd2;
        end else if ((((stream_in_24_last_V_0_state == 2'd1) & (stream_in_24_last_V_0_ack_out == 1'b0)) | ((stream_in_24_last_V_0_state == 2'd3) & (stream_in_24_last_V_0_ack_out == 1'b0) & (stream_in_24_last_V_0_vld_in == 1'b1)))) begin
            stream_in_24_last_V_0_state <= 2'd1;
        end else if (((~((stream_in_24_last_V_0_vld_in == 1'b0) & (stream_in_24_last_V_0_ack_out == 1'b1)) & ~((stream_in_24_last_V_0_ack_out == 1'b0) & (stream_in_24_last_V_0_vld_in == 1'b1)) & (stream_in_24_last_V_0_state == 2'd3)) | ((stream_in_24_last_V_0_state == 2'd1) & (stream_in_24_last_V_0_ack_out == 1'b1)) | ((stream_in_24_last_V_0_state == 2'd2) & (stream_in_24_last_V_0_vld_in == 1'b1)))) begin
            stream_in_24_last_V_0_state <= 2'd3;
        end else begin
            stream_in_24_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_24_user_V_0_ack_out == 1'b1) & (stream_in_24_user_V_0_vld_out == 1'b1))) begin
            stream_in_24_user_V_0_sel_rd <= ~stream_in_24_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_24_user_V_0_ack_in == 1'b1) & (stream_in_24_user_V_0_vld_in == 1'b1))) begin
            stream_in_24_user_V_0_sel_wr <= ~stream_in_24_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_24_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_24_user_V_0_state == 2'd3) & (stream_in_24_user_V_0_vld_in == 1'b0) & (stream_in_24_user_V_0_ack_out == 1'b1)) | ((stream_in_24_user_V_0_state == 2'd2) & (stream_in_24_user_V_0_vld_in == 1'b0)))) begin
            stream_in_24_user_V_0_state <= 2'd2;
        end else if ((((stream_in_24_user_V_0_state == 2'd1) & (stream_in_24_user_V_0_ack_out == 1'b0)) | ((stream_in_24_user_V_0_state == 2'd3) & (stream_in_24_user_V_0_ack_out == 1'b0) & (stream_in_24_user_V_0_vld_in == 1'b1)))) begin
            stream_in_24_user_V_0_state <= 2'd1;
        end else if ((((stream_in_24_user_V_0_state == 2'd1) & (stream_in_24_user_V_0_ack_out == 1'b1)) | ((stream_in_24_user_V_0_state == 2'd2) & (stream_in_24_user_V_0_vld_in == 1'b1)) | (~((stream_in_24_user_V_0_vld_in == 1'b0) & (stream_in_24_user_V_0_ack_out == 1'b1)) & ~((stream_in_24_user_V_0_ack_out == 1'b0) & (stream_in_24_user_V_0_vld_in == 1'b1)) & (stream_in_24_user_V_0_state == 2'd3)))) begin
            stream_in_24_user_V_0_state <= 2'd3;
        end else begin
            stream_in_24_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_data_1_ack_out == 1'b1) & (stream_out_24_data_1_vld_out == 1'b1))) begin
            stream_out_24_data_1_sel_rd <= ~stream_out_24_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_data_1_ack_in == 1'b1) & (stream_out_24_data_1_vld_in == 1'b1))) begin
            stream_out_24_data_1_sel_wr <= ~stream_out_24_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_data_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_data_1_state == 2'd2) & (stream_out_24_data_1_vld_in == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_data_1_vld_in == 1'b0) & (stream_out_24_data_1_ack_out == 1'b1)))) begin
            stream_out_24_data_1_state <= 2'd2;
        end else if ((((stream_out_24_data_1_state == 2'd1) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0) & (stream_out_24_data_1_vld_in == 1'b1)))) begin
            stream_out_24_data_1_state <= 2'd1;
        end else if (((~((stream_out_24_data_1_vld_in == 1'b0) & (stream_out_24_data_1_ack_out == 1'b1)) & ~((stream_out_24_TREADY == 1'b0) & (stream_out_24_data_1_vld_in == 1'b1)) & (stream_out_24_data_1_state == 2'd3)) | ((stream_out_24_data_1_state == 2'd1) & (stream_out_24_data_1_ack_out == 1'b1)) | ((stream_out_24_data_1_state == 2'd2) & (stream_out_24_data_1_vld_in == 1'b1)))) begin
            stream_out_24_data_1_state <= 2'd3;
        end else begin
            stream_out_24_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_last_V_1_ack_out == 1'b1) & (stream_out_24_last_V_1_vld_out == 1'b1))) begin
            stream_out_24_last_V_1_sel_rd <= ~stream_out_24_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_last_V_1_ack_in == 1'b1) & (stream_out_24_last_V_1_vld_in == 1'b1))) begin
            stream_out_24_last_V_1_sel_wr <= ~stream_out_24_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_last_V_1_state == 2'd2) & (stream_out_24_last_V_1_vld_in == 1'b0)) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_last_V_1_vld_in == 1'b0) & (stream_out_24_last_V_1_ack_out == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd2;
        end else if ((((stream_out_24_last_V_1_state == 2'd1) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0) & (stream_out_24_last_V_1_vld_in == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_24_last_V_1_vld_in == 1'b0) & (stream_out_24_last_V_1_ack_out == 1'b1)) & ~((stream_out_24_TREADY == 1'b0) & (stream_out_24_last_V_1_vld_in == 1'b1)) & (stream_out_24_last_V_1_state == 2'd3)) | ((stream_out_24_last_V_1_state == 2'd1) & (stream_out_24_last_V_1_ack_out == 1'b1)) | ((stream_out_24_last_V_1_state == 2'd2) & (stream_out_24_last_V_1_vld_in == 1'b1)))) begin
            stream_out_24_last_V_1_state <= 2'd3;
        end else begin
            stream_out_24_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_24_user_V_1_ack_out == 1'b1) & (stream_out_24_user_V_1_vld_out == 1'b1))) begin
            stream_out_24_user_V_1_sel_rd <= ~stream_out_24_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_24_user_V_1_ack_in == 1'b1) & (stream_out_24_user_V_1_vld_in == 1'b1))) begin
            stream_out_24_user_V_1_sel_wr <= ~stream_out_24_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_24_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_24_user_V_1_state == 2'd2) & (stream_out_24_user_V_1_vld_in == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_user_V_1_vld_in == 1'b0) & (stream_out_24_user_V_1_ack_out == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd2;
        end else if ((((stream_out_24_user_V_1_state == 2'd1) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0) & (stream_out_24_user_V_1_vld_in == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_24_user_V_1_vld_in == 1'b0) & (stream_out_24_user_V_1_ack_out == 1'b1)) & ~((stream_out_24_TREADY == 1'b0) & (stream_out_24_user_V_1_vld_in == 1'b1)) & (stream_out_24_user_V_1_state == 2'd3)) | ((stream_out_24_user_V_1_state == 2'd1) & (stream_out_24_user_V_1_ack_out == 1'b1)) | ((stream_out_24_user_V_1_state == 2'd2) & (stream_out_24_user_V_1_vld_in == 1'b1)))) begin
            stream_out_24_user_V_1_state <= 2'd3;
        end else begin
            stream_out_24_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln781_1_reg_1072 <= and_ln781_1_fu_546_p2;
        and_ln781_2_reg_1096 <= and_ln781_2_fu_668_p2;
        and_ln781_reg_1048 <= and_ln781_fu_424_p2;
        bias_c1_V_read_reg_945_pp0_iter2_reg <= bias_c1_V_read_reg_945;
        bias_c1_V_read_reg_945_pp0_iter3_reg <= bias_c1_V_read_reg_945_pp0_iter2_reg;
        bias_c2_V_read_reg_940_pp0_iter2_reg <= bias_c2_V_read_reg_940;
        bias_c2_V_read_reg_940_pp0_iter3_reg <= bias_c2_V_read_reg_940_pp0_iter2_reg;
        bias_c3_V_read_reg_935_pp0_iter2_reg <= bias_c3_V_read_reg_935;
        bias_c3_V_read_reg_935_pp0_iter3_reg <= bias_c3_V_read_reg_935_pp0_iter2_reg;
        c1_c3_V_read_reg_970_pp0_iter2_reg <= c1_c3_V_read_reg_970;
        c2_c3_V_read_reg_960_pp0_iter2_reg <= c2_c3_V_read_reg_960;
        c3_c3_V_read_reg_950_pp0_iter2_reg <= c3_c3_V_read_reg_950;
        or_ln785_1_reg_1078 <= or_ln785_1_fu_552_p2;
        or_ln785_2_reg_1102 <= or_ln785_2_fu_674_p2;
        or_ln785_reg_1054 <= or_ln785_fu_430_p2;
        p_Repl2_2_reg_930_pp0_iter2_reg <= p_Repl2_2_reg_930_pp0_iter1_reg;
        p_Result_2_reg_1060 <= ret_V_10_fu_447_p2[32'd19];
        p_Result_4_reg_1084 <= ret_V_13_fu_569_p2[32'd19];
        p_Result_s_reg_1036 <= ret_V_8_fu_325_p2[32'd19];
        p_Val2_15_reg_1066 <= p_Val2_15_fu_490_p2;
        p_Val2_23_reg_1090 <= p_Val2_23_fu_612_p2;
        p_Val2_7_reg_1042 <= p_Val2_7_fu_368_p2;
        stream_in_24_last_V_s_reg_915_pp0_iter2_reg <= stream_in_24_last_V_s_reg_915_pp0_iter1_reg;
        stream_in_24_last_V_s_reg_915_pp0_iter3_reg <= stream_in_24_last_V_s_reg_915_pp0_iter2_reg;
        stream_in_24_last_V_s_reg_915_pp0_iter4_reg <= stream_in_24_last_V_s_reg_915_pp0_iter3_reg;
        stream_in_24_user_V_s_reg_910_pp0_iter2_reg <= stream_in_24_user_V_s_reg_910_pp0_iter1_reg;
        stream_in_24_user_V_s_reg_910_pp0_iter3_reg <= stream_in_24_user_V_s_reg_910_pp0_iter2_reg;
        stream_in_24_user_V_s_reg_910_pp0_iter4_reg <= stream_in_24_user_V_s_reg_910_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((bias_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c1_V_0_vld_reg == 1'b1)))) begin
        bias_c1_V_0_data_reg <= bias_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c1_V_read_reg_945 <= bias_c1_V_0_data_reg;
        bias_c2_V_read_reg_940 <= bias_c2_V_0_data_reg;
        bias_c3_V_read_reg_935 <= bias_c3_V_0_data_reg;
        c1_c2_V_read_reg_975 <= c1_c2_V_0_data_reg;
        c1_c3_V_read_reg_970 <= c1_c3_V_0_data_reg;
        c2_c1_V_read_reg_965 <= c2_c1_V_0_data_reg;
        c2_c3_V_read_reg_960 <= c2_c3_V_0_data_reg;
        c3_c1_V_read_reg_955 <= c3_c1_V_0_data_reg;
        c3_c3_V_read_reg_950 <= c3_c3_V_0_data_reg;
        p_Repl2_1_reg_925 <= {{stream_in_24_data_0_data_out[15:8]}};
        p_Repl2_2_reg_930 <= {{stream_in_24_data_0_data_out[23:16]}};
        p_Repl2_2_reg_930_pp0_iter1_reg <= p_Repl2_2_reg_930;
        p_Repl2_s_reg_920 <= p_Repl2_s_fu_215_p1;
        r_V_12_reg_986 <= r_V_12_fu_246_p2;
        r_V_16_reg_996 <= r_V_16_fu_259_p2;
        r_V_19_reg_1001 <= r_V_19_fu_269_p2;
        r_V_2_reg_991[7 : 0] <= r_V_2_fu_252_p1[7 : 0];
        r_V_reg_980[7 : 0] <= r_V_fu_239_p1[7 : 0];
        stream_in_24_last_V_s_reg_915 <= stream_in_24_last_V_0_data_out;
        stream_in_24_last_V_s_reg_915_pp0_iter1_reg <= stream_in_24_last_V_s_reg_915;
        stream_in_24_user_V_s_reg_910 <= stream_in_24_user_V_0_data_out;
        stream_in_24_user_V_s_reg_910_pp0_iter1_reg <= stream_in_24_user_V_s_reg_910;
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((bias_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c2_V_0_vld_reg == 1'b1)))) begin
        bias_c2_V_0_data_reg <= bias_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((bias_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c3_V_0_vld_reg == 1'b1)))) begin
        bias_c3_V_0_data_reg <= bias_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c1_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c1_V_0_vld_reg == 1'b1)))) begin
        c1_c1_V_0_data_reg <= c1_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c1_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c2_V_0_vld_reg == 1'b1)))) begin
        c1_c2_V_0_data_reg <= c1_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c1_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c3_V_0_vld_reg == 1'b1)))) begin
        c1_c3_V_0_data_reg <= c1_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c2_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c1_V_0_vld_reg == 1'b1)))) begin
        c2_c1_V_0_data_reg <= c2_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c2_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c2_V_0_vld_reg == 1'b1)))) begin
        c2_c2_V_0_data_reg <= c2_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c2_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c3_V_0_vld_reg == 1'b1)))) begin
        c2_c3_V_0_data_reg <= c2_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c1_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c3_c1_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c1_V_0_vld_reg == 1'b1)))) begin
        c3_c1_V_0_data_reg <= c3_c1_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c2_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c3_c2_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c2_V_0_vld_reg == 1'b1)))) begin
        c3_c2_V_0_data_reg <= c3_c2_V;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c3_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | ((c3_c3_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c3_V_0_vld_reg == 1'b1)))) begin
        c3_c3_V_0_data_reg <= c3_c3_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ret_V_11_reg_1016 <= grp_fu_879_p3;
        ret_V_6_reg_1006 <= grp_fu_865_p3;
        ret_V_reg_1011 <= grp_fu_872_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ret_V_12_reg_1031 <= grp_fu_902_p3;
        ret_V_7_reg_1021 <= grp_fu_886_p3;
        ret_V_9_reg_1026 <= grp_fu_894_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_data_0_load_A == 1'b1)) begin
        stream_in_24_data_0_payload_A <= stream_in_24_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_data_0_load_B == 1'b1)) begin
        stream_in_24_data_0_payload_B <= stream_in_24_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_last_V_0_load_A == 1'b1)) begin
        stream_in_24_last_V_0_payload_A <= stream_in_24_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_last_V_0_load_B == 1'b1)) begin
        stream_in_24_last_V_0_payload_B <= stream_in_24_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_user_V_0_load_A == 1'b1)) begin
        stream_in_24_user_V_0_payload_A <= stream_in_24_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_24_user_V_0_load_B == 1'b1)) begin
        stream_in_24_user_V_0_payload_B <= stream_in_24_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_data_1_load_A == 1'b1)) begin
        stream_out_24_data_1_payload_A <= stream_out_24_data_t_fu_854_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_data_1_load_B == 1'b1)) begin
        stream_out_24_data_1_payload_B <= stream_out_24_data_t_fu_854_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_last_V_1_load_A == 1'b1)) begin
        stream_out_24_last_V_1_payload_A <= stream_in_24_last_V_s_reg_915_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_last_V_1_load_B == 1'b1)) begin
        stream_out_24_last_V_1_payload_B <= stream_in_24_last_V_s_reg_915_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_user_V_1_load_A == 1'b1)) begin
        stream_out_24_user_V_1_payload_A <= stream_in_24_user_V_s_reg_910_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_24_user_V_1_load_B == 1'b1)) begin
        stream_out_24_user_V_1_payload_B <= stream_in_24_user_V_s_reg_910_pp0_iter4_reg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bias_c1_V_0_ack_out = 1'b1;
    end else begin
        bias_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bias_c2_V_0_ack_out = 1'b1;
    end else begin
        bias_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bias_c3_V_0_ack_out = 1'b1;
    end else begin
        bias_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c1_c1_V_0_ack_out = 1'b1;
    end else begin
        c1_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c1_c2_V_0_ack_out = 1'b1;
    end else begin
        c1_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c1_c3_V_0_ack_out = 1'b1;
    end else begin
        c1_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c2_c1_V_0_ack_out = 1'b1;
    end else begin
        c2_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c2_c2_V_0_ack_out = 1'b1;
    end else begin
        c2_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c2_c3_V_0_ack_out = 1'b1;
    end else begin
        c2_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c3_c1_V_0_ack_out = 1'b1;
    end else begin
        c3_c1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c3_c2_V_0_ack_out = 1'b1;
    end else begin
        c3_c2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c3_c3_V_0_ack_out = 1'b1;
    end else begin
        c3_c3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_TDATA_blk_n = stream_in_24_data_0_state[1'd0];
    end else begin
        stream_in_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_data_0_ack_out = 1'b1;
    end else begin
        stream_in_24_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_24_data_0_sel == 1'b1)) begin
        stream_in_24_data_0_data_out = stream_in_24_data_0_payload_B;
    end else begin
        stream_in_24_data_0_data_out = stream_in_24_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_last_V_0_ack_out = 1'b1;
    end else begin
        stream_in_24_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_24_last_V_0_sel == 1'b1)) begin
        stream_in_24_last_V_0_data_out = stream_in_24_last_V_0_payload_B;
    end else begin
        stream_in_24_last_V_0_data_out = stream_in_24_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_24_user_V_0_ack_out = 1'b1;
    end else begin
        stream_in_24_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_24_user_V_0_sel == 1'b1)) begin
        stream_in_24_user_V_0_data_out = stream_in_24_user_V_0_payload_B;
    end else begin
        stream_in_24_user_V_0_data_out = stream_in_24_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        stream_out_24_TDATA_blk_n = stream_out_24_data_1_state[1'd1];
    end else begin
        stream_out_24_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_24_data_1_sel == 1'b1)) begin
        stream_out_24_data_1_data_out = stream_out_24_data_1_payload_B;
    end else begin
        stream_out_24_data_1_data_out = stream_out_24_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        stream_out_24_data_1_vld_in = 1'b1;
    end else begin
        stream_out_24_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_24_last_V_1_sel == 1'b1)) begin
        stream_out_24_last_V_1_data_out = stream_out_24_last_V_1_payload_B;
    end else begin
        stream_out_24_last_V_1_data_out = stream_out_24_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        stream_out_24_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_24_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_24_user_V_1_sel == 1'b1)) begin
        stream_out_24_user_V_1_data_out = stream_out_24_user_V_1_payload_B;
    end else begin
        stream_out_24_user_V_1_data_out = stream_out_24_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        stream_out_24_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_24_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_1_fu_526_p2 = ((tmp_1_fu_516_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_ones_2_fu_648_p2 = ((tmp_2_fu_638_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_ones_fu_404_p2 = ((tmp_fu_394_p4 == 4'd15) ? 1'b1 : 1'b0);

assign Range1_all_zeros_1_fu_532_p2 = ((tmp_1_fu_516_p4 == 4'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_2_fu_654_p2 = ((tmp_2_fu_638_p4 == 4'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_410_p2 = ((tmp_fu_394_p4 == 4'd0) ? 1'b1 : 1'b0);

assign and_ln340_1_fu_763_p2 = (or_ln785_1_reg_1078 & or_ln340_4_fu_758_p2);

assign and_ln340_2_fu_821_p2 = (or_ln785_2_reg_1102 & or_ln340_5_fu_816_p2);

assign and_ln340_fu_705_p2 = (or_ln785_reg_1054 & or_ln340_3_fu_700_p2);

assign and_ln781_1_fu_546_p2 = (carry_3_fu_510_p2 & Range1_all_ones_1_fu_526_p2);

assign and_ln781_2_fu_668_p2 = (carry_5_fu_632_p2 & Range1_all_ones_2_fu_648_p2);

assign and_ln781_fu_424_p2 = (carry_1_fu_388_p2 & Range1_all_ones_fu_404_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((stream_out_24_last_V_1_state == 2'd1) | (stream_out_24_user_V_1_state == 2'd1) | (stream_out_24_data_1_state == 2'd1) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)))) | ((stream_in_24_data_0_vld_out == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((stream_out_24_last_V_1_state == 2'd1) | (stream_out_24_user_V_1_state == 2'd1) | (stream_out_24_data_1_state == 2'd1) | (stream_out_24_data_1_ack_in == 1'b0) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)))) | ((stream_out_24_data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((stream_in_24_data_0_vld_out == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter6 == 1'b1) & ((stream_out_24_last_V_1_state == 2'd1) | (stream_out_24_user_V_1_state == 2'd1) | (stream_out_24_data_1_state == 2'd1) | (stream_out_24_data_1_ack_in == 1'b0) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)))) | ((stream_out_24_data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((stream_in_24_data_0_vld_out == 1'b0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (stream_in_24_data_0_vld_out == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = ((stream_out_24_last_V_1_state == 2'd1) | (stream_out_24_user_V_1_state == 2'd1) | (stream_out_24_data_1_state == 2'd1) | ((stream_out_24_last_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_user_V_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)) | ((stream_out_24_data_1_state == 2'd3) & (stream_out_24_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_control_inv = ~ap_rst_n_control;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign carry_1_fu_388_p2 = (xor_ln416_fu_382_p2 & p_Result_1_fu_348_p3);

assign carry_3_fu_510_p2 = (xor_ln416_1_fu_504_p2 & p_Result_3_fu_470_p3);

assign carry_5_fu_632_p2 = (xor_ln416_2_fu_626_p2 & p_Result_5_fu_592_p3);

assign deleted_zeros_1_fu_538_p3 = ((carry_3_fu_510_p2[0:0] === 1'b1) ? Range1_all_ones_1_fu_526_p2 : Range1_all_zeros_1_fu_532_p2);

assign deleted_zeros_2_fu_660_p3 = ((carry_5_fu_632_p2[0:0] === 1'b1) ? Range1_all_ones_2_fu_648_p2 : Range1_all_zeros_2_fu_654_p2);

assign deleted_zeros_fu_416_p3 = ((carry_1_fu_388_p2[0:0] === 1'b1) ? Range1_all_ones_fu_404_p2 : Range1_all_zeros_fu_410_p2);

assign grp_fu_865_p0 = r_V_2_reg_991;

assign grp_fu_872_p0 = r_V_reg_980;

assign grp_fu_879_p0 = r_V_reg_980;

assign grp_fu_886_p0 = r_V_4_fu_293_p1;

assign grp_fu_894_p0 = r_V_4_fu_293_p1;

assign grp_fu_902_p0 = r_V_4_fu_293_p1;

assign neg_src_6_fu_743_p2 = (xor_ln781_1_fu_738_p2 & p_Result_2_reg_1060);

assign neg_src_7_fu_801_p2 = (xor_ln781_2_fu_796_p2 & p_Result_4_reg_1084);

assign neg_src_fu_685_p2 = (xor_ln781_fu_680_p2 & p_Result_s_reg_1036);

assign or_ln340_1_fu_768_p2 = (overflow_1_fu_748_p2 | or_ln340_4_fu_758_p2);

assign or_ln340_2_fu_826_p2 = (overflow_2_fu_806_p2 | or_ln340_5_fu_816_p2);

assign or_ln340_3_fu_700_p2 = (xor_ln340_1_fu_695_p2 | and_ln781_reg_1048);

assign or_ln340_4_fu_758_p2 = (xor_ln340_fu_753_p2 | and_ln781_1_reg_1072);

assign or_ln340_5_fu_816_p2 = (xor_ln340_2_fu_811_p2 | and_ln781_2_reg_1096);

assign or_ln340_fu_710_p2 = (overflow_fu_690_p2 | or_ln340_3_fu_700_p2);

assign or_ln785_1_fu_552_p2 = (p_Result_2_fu_452_p3 | deleted_zeros_1_fu_538_p3);

assign or_ln785_2_fu_674_p2 = (p_Result_4_fu_574_p3 | deleted_zeros_2_fu_660_p3);

assign or_ln785_fu_430_p2 = (p_Result_s_fu_330_p3 | deleted_zeros_fu_416_p3);

assign out1_V_fu_730_p3 = ((or_ln340_fu_710_p2[0:0] === 1'b1) ? select_ln340_fu_716_p3 : select_ln396_fu_723_p3);

assign out2_V_fu_788_p3 = ((or_ln340_1_fu_768_p2[0:0] === 1'b1) ? select_ln340_1_fu_774_p3 : select_ln396_1_fu_781_p3);

assign out3_V_fu_846_p3 = ((or_ln340_2_fu_826_p2[0:0] === 1'b1) ? select_ln340_2_fu_832_p3 : select_ln396_2_fu_839_p3);

assign overflow_1_fu_748_p2 = (or_ln785_1_reg_1078 ^ 1'd1);

assign overflow_2_fu_806_p2 = (or_ln785_2_reg_1102 ^ 1'd1);

assign overflow_fu_690_p2 = (or_ln785_reg_1054 ^ 1'd1);

assign p_Repl2_s_fu_215_p1 = stream_in_24_data_0_data_out[7:0];

assign p_Result_1_fu_348_p3 = ret_V_8_fu_325_p2[32'd15];

assign p_Result_2_fu_452_p3 = ret_V_10_fu_447_p2[32'd19];

assign p_Result_3_fu_470_p3 = ret_V_10_fu_447_p2[32'd15];

assign p_Result_4_fu_574_p3 = ret_V_13_fu_569_p2[32'd19];

assign p_Result_5_fu_592_p3 = ret_V_13_fu_569_p2[32'd15];

assign p_Result_s_fu_330_p3 = ret_V_8_fu_325_p2[32'd19];

assign p_Val2_14_fu_460_p4 = {{ret_V_10_fu_447_p2[15:8]}};

assign p_Val2_15_fu_490_p2 = (zext_ln415_1_fu_486_p1 + p_Val2_14_fu_460_p4);

assign p_Val2_22_fu_582_p4 = {{ret_V_13_fu_569_p2[15:8]}};

assign p_Val2_23_fu_612_p2 = (zext_ln415_2_fu_608_p1 + p_Val2_22_fu_582_p4);

assign p_Val2_6_fu_338_p4 = {{ret_V_8_fu_325_p2[15:8]}};

assign p_Val2_7_fu_368_p2 = (p_Val2_6_fu_338_p4 + zext_ln415_fu_364_p1);

assign r_V_12_fu_246_p0 = r_V_12_fu_246_p00;

assign r_V_12_fu_246_p00 = p_Repl2_s_reg_920;

assign r_V_12_fu_246_p1 = c1_c1_V_0_data_reg;

assign r_V_12_fu_246_p2 = ($signed({{1'b0}, {r_V_12_fu_246_p0}}) * $signed(r_V_12_fu_246_p1));

assign r_V_16_fu_259_p0 = r_V_2_fu_252_p1;

assign r_V_16_fu_259_p1 = c2_c2_V_0_data_reg;

assign r_V_16_fu_259_p2 = ($signed({{1'b0}, {r_V_16_fu_259_p0}}) * $signed(r_V_16_fu_259_p1));

assign r_V_19_fu_269_p0 = r_V_2_fu_252_p1;

assign r_V_19_fu_269_p1 = c3_c2_V_0_data_reg;

assign r_V_19_fu_269_p2 = ($signed({{1'b0}, {r_V_19_fu_269_p0}}) * $signed(r_V_19_fu_269_p1));

assign r_V_2_fu_252_p1 = p_Repl2_1_reg_925;

assign r_V_4_fu_293_p1 = p_Repl2_2_reg_930_pp0_iter2_reg;

assign r_V_fu_239_p1 = p_Repl2_s_reg_920;

assign ret_V_10_fu_447_p2 = ($signed(ret_V_9_reg_1026) + $signed(sext_ln728_1_fu_443_p1));

assign ret_V_13_fu_569_p2 = ($signed(ret_V_12_reg_1031) + $signed(sext_ln728_2_fu_565_p1));

assign ret_V_8_fu_325_p2 = ($signed(ret_V_7_reg_1021) + $signed(sext_ln728_fu_321_p1));

assign rhs_V_2_fu_314_p3 = {{bias_c1_V_read_reg_945_pp0_iter3_reg}, {8'd0}};

assign rhs_V_5_fu_436_p3 = {{bias_c2_V_read_reg_940_pp0_iter3_reg}, {8'd0}};

assign rhs_V_8_fu_558_p3 = {{bias_c3_V_read_reg_935_pp0_iter3_reg}, {8'd0}};

assign select_ln340_1_fu_774_p3 = ((and_ln340_1_fu_763_p2[0:0] === 1'b1) ? p_Val2_15_reg_1066 : 8'd255);

assign select_ln340_2_fu_832_p3 = ((and_ln340_2_fu_821_p2[0:0] === 1'b1) ? p_Val2_23_reg_1090 : 8'd255);

assign select_ln340_fu_716_p3 = ((and_ln340_fu_705_p2[0:0] === 1'b1) ? p_Val2_7_reg_1042 : 8'd255);

assign select_ln396_1_fu_781_p3 = ((neg_src_6_fu_743_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_15_reg_1066);

assign select_ln396_2_fu_839_p3 = ((neg_src_7_fu_801_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_23_reg_1090);

assign select_ln396_fu_723_p3 = ((neg_src_fu_685_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_7_reg_1042);

assign sext_ln728_1_fu_443_p1 = $signed(rhs_V_5_fu_436_p3);

assign sext_ln728_2_fu_565_p1 = $signed(rhs_V_8_fu_558_p3);

assign sext_ln728_fu_321_p1 = $signed(rhs_V_2_fu_314_p3);

assign stream_in_24_TREADY = stream_in_24_last_V_0_state[1'd1];

assign stream_in_24_data_0_ack_in = stream_in_24_data_0_state[1'd1];

assign stream_in_24_data_0_load_A = (stream_in_24_data_0_state_cmp_full & ~stream_in_24_data_0_sel_wr);

assign stream_in_24_data_0_load_B = (stream_in_24_data_0_state_cmp_full & stream_in_24_data_0_sel_wr);

assign stream_in_24_data_0_sel = stream_in_24_data_0_sel_rd;

assign stream_in_24_data_0_state_cmp_full = ((stream_in_24_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_24_data_0_vld_in = stream_in_24_TVALID;

assign stream_in_24_data_0_vld_out = stream_in_24_data_0_state[1'd0];

assign stream_in_24_last_V_0_ack_in = stream_in_24_last_V_0_state[1'd1];

assign stream_in_24_last_V_0_load_A = (stream_in_24_last_V_0_state_cmp_full & ~stream_in_24_last_V_0_sel_wr);

assign stream_in_24_last_V_0_load_B = (stream_in_24_last_V_0_state_cmp_full & stream_in_24_last_V_0_sel_wr);

assign stream_in_24_last_V_0_sel = stream_in_24_last_V_0_sel_rd;

assign stream_in_24_last_V_0_state_cmp_full = ((stream_in_24_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_24_last_V_0_vld_in = stream_in_24_TVALID;

assign stream_in_24_last_V_0_vld_out = stream_in_24_last_V_0_state[1'd0];

assign stream_in_24_user_V_0_ack_in = stream_in_24_user_V_0_state[1'd1];

assign stream_in_24_user_V_0_load_A = (stream_in_24_user_V_0_state_cmp_full & ~stream_in_24_user_V_0_sel_wr);

assign stream_in_24_user_V_0_load_B = (stream_in_24_user_V_0_state_cmp_full & stream_in_24_user_V_0_sel_wr);

assign stream_in_24_user_V_0_sel = stream_in_24_user_V_0_sel_rd;

assign stream_in_24_user_V_0_state_cmp_full = ((stream_in_24_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_24_user_V_0_vld_in = stream_in_24_TVALID;

assign stream_in_24_user_V_0_vld_out = stream_in_24_user_V_0_state[1'd0];

assign stream_out_24_TDATA = stream_out_24_data_1_data_out;

assign stream_out_24_TLAST = stream_out_24_last_V_1_data_out;

assign stream_out_24_TUSER = stream_out_24_user_V_1_data_out;

assign stream_out_24_TVALID = stream_out_24_last_V_1_state[1'd0];

assign stream_out_24_data_1_ack_in = stream_out_24_data_1_state[1'd1];

assign stream_out_24_data_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_data_1_load_A = (stream_out_24_data_1_state_cmp_full & ~stream_out_24_data_1_sel_wr);

assign stream_out_24_data_1_load_B = (stream_out_24_data_1_state_cmp_full & stream_out_24_data_1_sel_wr);

assign stream_out_24_data_1_sel = stream_out_24_data_1_sel_rd;

assign stream_out_24_data_1_state_cmp_full = ((stream_out_24_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_data_1_vld_out = stream_out_24_data_1_state[1'd0];

assign stream_out_24_data_t_fu_854_p4 = {{{out3_V_fu_846_p3}, {out2_V_fu_788_p3}}, {out1_V_fu_730_p3}};

assign stream_out_24_last_V_1_ack_in = stream_out_24_last_V_1_state[1'd1];

assign stream_out_24_last_V_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_last_V_1_load_A = (stream_out_24_last_V_1_state_cmp_full & ~stream_out_24_last_V_1_sel_wr);

assign stream_out_24_last_V_1_load_B = (stream_out_24_last_V_1_state_cmp_full & stream_out_24_last_V_1_sel_wr);

assign stream_out_24_last_V_1_sel = stream_out_24_last_V_1_sel_rd;

assign stream_out_24_last_V_1_state_cmp_full = ((stream_out_24_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_last_V_1_vld_out = stream_out_24_last_V_1_state[1'd0];

assign stream_out_24_user_V_1_ack_in = stream_out_24_user_V_1_state[1'd1];

assign stream_out_24_user_V_1_ack_out = stream_out_24_TREADY;

assign stream_out_24_user_V_1_load_A = (stream_out_24_user_V_1_state_cmp_full & ~stream_out_24_user_V_1_sel_wr);

assign stream_out_24_user_V_1_load_B = (stream_out_24_user_V_1_state_cmp_full & stream_out_24_user_V_1_sel_wr);

assign stream_out_24_user_V_1_sel = stream_out_24_user_V_1_sel_rd;

assign stream_out_24_user_V_1_state_cmp_full = ((stream_out_24_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_24_user_V_1_vld_out = stream_out_24_user_V_1_state[1'd0];

assign tmp_10_fu_496_p3 = p_Val2_15_fu_490_p2[32'd7];

assign tmp_13_fu_600_p3 = ret_V_13_fu_569_p2[32'd7];

assign tmp_14_fu_618_p3 = p_Val2_23_fu_612_p2[32'd7];

assign tmp_1_fu_516_p4 = {{ret_V_10_fu_447_p2[19:16]}};

assign tmp_2_fu_638_p4 = {{ret_V_13_fu_569_p2[19:16]}};

assign tmp_5_fu_356_p3 = ret_V_8_fu_325_p2[32'd7];

assign tmp_6_fu_374_p3 = p_Val2_7_fu_368_p2[32'd7];

assign tmp_9_fu_478_p3 = ret_V_10_fu_447_p2[32'd7];

assign tmp_fu_394_p4 = {{ret_V_8_fu_325_p2[19:16]}};

assign xor_ln340_1_fu_695_p2 = (p_Result_s_reg_1036 ^ 1'd1);

assign xor_ln340_2_fu_811_p2 = (p_Result_4_reg_1084 ^ 1'd1);

assign xor_ln340_fu_753_p2 = (p_Result_2_reg_1060 ^ 1'd1);

assign xor_ln416_1_fu_504_p2 = (tmp_10_fu_496_p3 ^ 1'd1);

assign xor_ln416_2_fu_626_p2 = (tmp_14_fu_618_p3 ^ 1'd1);

assign xor_ln416_fu_382_p2 = (tmp_6_fu_374_p3 ^ 1'd1);

assign xor_ln781_1_fu_738_p2 = (1'd1 ^ and_ln781_1_reg_1072);

assign xor_ln781_2_fu_796_p2 = (1'd1 ^ and_ln781_2_reg_1096);

assign xor_ln781_fu_680_p2 = (1'd1 ^ and_ln781_reg_1048);

assign zext_ln415_1_fu_486_p1 = tmp_9_fu_478_p3;

assign zext_ln415_2_fu_608_p1 = tmp_13_fu_600_p3;

assign zext_ln415_fu_364_p1 = tmp_5_fu_356_p3;

always @ (posedge ap_clk) begin
    r_V_reg_980[17:8] <= 10'b0000000000;
    r_V_2_reg_991[17:8] <= 10'b0000000000;
end

endmodule //color_convert
