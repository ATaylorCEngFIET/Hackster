-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity color_convert is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_24_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    stream_in_24_TVALID : IN STD_LOGIC;
    stream_in_24_TREADY : OUT STD_LOGIC;
    stream_in_24_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_24_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    stream_out_24_TVALID : OUT STD_LOGIC;
    stream_out_24_TREADY : IN STD_LOGIC;
    stream_out_24_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_24_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    control : IN STD_LOGIC;
    ap_rst_n_control : IN STD_LOGIC );
end;


architecture behav of color_convert is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "color_convert,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=1227,HLS_SYN_LUT=1227,HLS_VERSION=2019_1_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal stream_in_24_data_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_24_data_0_vld_in : STD_LOGIC;
    signal stream_in_24_data_0_vld_out : STD_LOGIC;
    signal stream_in_24_data_0_ack_in : STD_LOGIC;
    signal stream_in_24_data_0_ack_out : STD_LOGIC;
    signal stream_in_24_data_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_24_data_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_in_24_data_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_24_data_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_24_data_0_sel : STD_LOGIC;
    signal stream_in_24_data_0_load_A : STD_LOGIC;
    signal stream_in_24_data_0_load_B : STD_LOGIC;
    signal stream_in_24_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_24_data_0_state_cmp_full : STD_LOGIC;
    signal stream_in_24_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_0_vld_in : STD_LOGIC;
    signal stream_in_24_user_V_0_vld_out : STD_LOGIC;
    signal stream_in_24_user_V_0_ack_in : STD_LOGIC;
    signal stream_in_24_user_V_0_ack_out : STD_LOGIC;
    signal stream_in_24_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_24_user_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_24_user_V_0_sel : STD_LOGIC;
    signal stream_in_24_user_V_0_load_A : STD_LOGIC;
    signal stream_in_24_user_V_0_load_B : STD_LOGIC;
    signal stream_in_24_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_24_user_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_24_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_0_vld_in : STD_LOGIC;
    signal stream_in_24_last_V_0_vld_out : STD_LOGIC;
    signal stream_in_24_last_V_0_ack_in : STD_LOGIC;
    signal stream_in_24_last_V_0_ack_out : STD_LOGIC;
    signal stream_in_24_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_24_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_24_last_V_0_sel : STD_LOGIC;
    signal stream_in_24_last_V_0_load_A : STD_LOGIC;
    signal stream_in_24_last_V_0_load_B : STD_LOGIC;
    signal stream_in_24_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_24_last_V_0_state_cmp_full : STD_LOGIC;
    signal stream_out_24_data_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_24_data_1_vld_in : STD_LOGIC;
    signal stream_out_24_data_1_vld_out : STD_LOGIC;
    signal stream_out_24_data_1_ack_in : STD_LOGIC;
    signal stream_out_24_data_1_ack_out : STD_LOGIC;
    signal stream_out_24_data_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_24_data_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal stream_out_24_data_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_24_data_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_24_data_1_sel : STD_LOGIC;
    signal stream_out_24_data_1_load_A : STD_LOGIC;
    signal stream_out_24_data_1_load_B : STD_LOGIC;
    signal stream_out_24_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_24_data_1_state_cmp_full : STD_LOGIC;
    signal stream_out_24_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_user_V_1_vld_in : STD_LOGIC;
    signal stream_out_24_user_V_1_vld_out : STD_LOGIC;
    signal stream_out_24_user_V_1_ack_in : STD_LOGIC;
    signal stream_out_24_user_V_1_ack_out : STD_LOGIC;
    signal stream_out_24_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_user_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_24_user_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_24_user_V_1_sel : STD_LOGIC;
    signal stream_out_24_user_V_1_load_A : STD_LOGIC;
    signal stream_out_24_user_V_1_load_B : STD_LOGIC;
    signal stream_out_24_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_24_user_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_24_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_24_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_24_last_V_1_ack_in : STD_LOGIC;
    signal stream_out_24_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_24_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_24_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_24_last_V_1_sel : STD_LOGIC;
    signal stream_out_24_last_V_1_load_A : STD_LOGIC;
    signal stream_out_24_last_V_1_load_B : STD_LOGIC;
    signal stream_out_24_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_24_last_V_1_state_cmp_full : STD_LOGIC;
    signal c1_c1_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c1_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c1_c1_V_0_vld_reg : STD_LOGIC := '0';
    signal c1_c1_V_0_ack_out : STD_LOGIC;
    signal c1_c2_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c2_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c1_c2_V_0_vld_reg : STD_LOGIC := '0';
    signal c1_c2_V_0_ack_out : STD_LOGIC;
    signal c1_c3_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c1_c3_V_0_vld_reg : STD_LOGIC := '0';
    signal c1_c3_V_0_ack_out : STD_LOGIC;
    signal c2_c1_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c1_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c2_c1_V_0_vld_reg : STD_LOGIC := '0';
    signal c2_c1_V_0_ack_out : STD_LOGIC;
    signal c2_c2_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c2_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c2_c2_V_0_vld_reg : STD_LOGIC := '0';
    signal c2_c2_V_0_ack_out : STD_LOGIC;
    signal c2_c3_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c2_c3_V_0_vld_reg : STD_LOGIC := '0';
    signal c2_c3_V_0_ack_out : STD_LOGIC;
    signal c3_c1_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c1_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c3_c1_V_0_vld_reg : STD_LOGIC := '0';
    signal c3_c1_V_0_ack_out : STD_LOGIC;
    signal c3_c2_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c2_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c3_c2_V_0_vld_reg : STD_LOGIC := '0';
    signal c3_c2_V_0_ack_out : STD_LOGIC;
    signal c3_c3_V : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c3_c3_V_0_vld_reg : STD_LOGIC := '0';
    signal c3_c3_V_0_ack_out : STD_LOGIC;
    signal bias_c1_V : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal bias_c1_V_0_vld_reg : STD_LOGIC := '0';
    signal bias_c1_V_0_ack_out : STD_LOGIC;
    signal bias_c2_V : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal bias_c2_V_0_vld_reg : STD_LOGIC := '0';
    signal bias_c2_V_0_ack_out : STD_LOGIC;
    signal bias_c3_V : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_V_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal bias_c3_V_0_vld_reg : STD_LOGIC := '0';
    signal bias_c3_V_0_ack_out : STD_LOGIC;
    signal stream_in_24_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_out_24_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_rst_n_control_inv : STD_LOGIC;
    signal stream_in_24_user_V_s_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal stream_in_24_user_V_s_reg_910_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_s_reg_910_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_s_reg_910_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_user_V_s_reg_910_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_s_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_s_reg_915_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_s_reg_915_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_s_reg_915_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_24_last_V_s_reg_915_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_s_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_s_reg_920 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_reg_925 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_2_reg_930 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_2_reg_930_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_2_reg_930_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_c3_V_read_reg_935 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_V_read_reg_935_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_V_read_reg_935_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_V_read_reg_940 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_V_read_reg_940_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_V_read_reg_940_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_V_read_reg_945 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_V_read_reg_945_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_V_read_reg_945_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_V_read_reg_950 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_V_read_reg_950_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c1_V_read_reg_955 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_V_read_reg_960 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_V_read_reg_960_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c1_V_read_reg_965 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_V_read_reg_970 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_V_read_reg_970_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c2_V_read_reg_975 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_fu_239_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_980 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_12_fu_246_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_12_reg_986 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_fu_252_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_reg_991 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_16_fu_259_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_16_reg_996 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_19_fu_269_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_19_reg_1001 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_865_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_6_reg_1006 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_872_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_reg_1011 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_879_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_11_reg_1016 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_886_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_7_reg_1021 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_894_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_9_reg_1026 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_902_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_12_reg_1031 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_s_fu_330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1036 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_fu_368_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_7_reg_1042 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln781_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_reg_1048 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_reg_1054 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_452_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_fu_490_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_15_reg_1066 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln781_1_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_1_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_reg_1078 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_574_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_reg_1084 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_23_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_23_reg_1090 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln781_2_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_2_reg_1096 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_2_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_2_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_24_data_t_fu_854_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_12_fu_246_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_12_fu_246_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_16_fu_259_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_16_fu_259_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_19_fu_269_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_19_fu_269_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_2_fu_314_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_fu_321_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_8_fu_325_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of ret_V_8_fu_325_p2 : signal is "no";
    signal tmp_5_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_338_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_fu_364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_374_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_394_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal carry_1_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_416_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_5_fu_436_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_1_fu_443_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_10_fu_447_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of ret_V_10_fu_447_p2 : signal is "no";
    signal tmp_9_fu_478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_1_fu_486_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_14_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_470_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_516_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal carry_3_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_8_fu_558_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln728_2_fu_565_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_13_fu_569_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of ret_V_13_fu_569_p2 : signal is "no";
    signal tmp_13_fu_600_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_2_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_22_fu_582_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_592_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_2_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_638_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal carry_5_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_2_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_2_fu_660_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln781_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_716_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln396_fu_723_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln781_1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_1_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_6_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_774_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln396_1_fu_781_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln781_2_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln340_2_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_7_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_832_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln396_2_fu_839_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out3_V_fu_846_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out2_V_fu_788_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out1_V_fu_730_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_865_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_872_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_879_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_886_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_4_fu_293_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_894_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_902_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal r_V_12_fu_246_p00 : STD_LOGIC_VECTOR (17 downto 0);

    component color_convert_macbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component color_convert_maccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component color_convert_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        c1_c1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c1_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c2_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c3_V : OUT STD_LOGIC_VECTOR (9 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    color_convert_AXILiteS_s_axi_U : component color_convert_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => control,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        c1_c1_V => c1_c1_V,
        c1_c2_V => c1_c2_V,
        c1_c3_V => c1_c3_V,
        c2_c1_V => c2_c1_V,
        c2_c2_V => c2_c2_V,
        c2_c3_V => c2_c3_V,
        c3_c1_V => c3_c1_V,
        c3_c2_V => c3_c2_V,
        c3_c3_V => c3_c3_V,
        bias_c1_V => bias_c1_V,
        bias_c2_V => bias_c2_V,
        bias_c3_V => bias_c3_V,
        clk => ap_clk,
        rst => ap_rst_n_control_inv);

    color_convert_macbkb_U1 : component color_convert_macbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_865_p0,
        din1 => c1_c2_V_read_reg_975,
        din2 => r_V_12_reg_986,
        dout => grp_fu_865_p3);

    color_convert_macbkb_U2 : component color_convert_macbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_872_p0,
        din1 => c2_c1_V_read_reg_965,
        din2 => r_V_16_reg_996,
        dout => grp_fu_872_p3);

    color_convert_macbkb_U3 : component color_convert_macbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        din0 => grp_fu_879_p0,
        din1 => c3_c1_V_read_reg_955,
        din2 => r_V_19_reg_1001,
        dout => grp_fu_879_p3);

    color_convert_maccud_U4 : component color_convert_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_886_p0,
        din1 => c1_c3_V_read_reg_970_pp0_iter2_reg,
        din2 => ret_V_6_reg_1006,
        dout => grp_fu_886_p3);

    color_convert_maccud_U5 : component color_convert_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_894_p0,
        din1 => c2_c3_V_read_reg_960_pp0_iter2_reg,
        din2 => ret_V_reg_1011,
        dout => grp_fu_894_p3);

    color_convert_maccud_U6 : component color_convert_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        din0 => grp_fu_902_p0,
        din1 => c3_c3_V_read_reg_950_pp0_iter2_reg,
        din2 => ret_V_11_reg_1016,
        dout => grp_fu_902_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_24_data_0_ack_out = ap_const_logic_1) and (stream_in_24_data_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_24_data_0_sel_rd <= not(stream_in_24_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_24_data_0_ack_in = ap_const_logic_1) and (stream_in_24_data_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_24_data_0_sel_wr <= not(stream_in_24_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_data_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_24_data_0_vld_in = ap_const_logic_0) and (stream_in_24_data_0_state = ap_const_lv2_2)) or ((stream_in_24_data_0_vld_in = ap_const_logic_0) and (stream_in_24_data_0_state = ap_const_lv2_3) and (stream_in_24_data_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_24_data_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_24_data_0_ack_out = ap_const_logic_0) and (stream_in_24_data_0_state = ap_const_lv2_1)) or ((stream_in_24_data_0_ack_out = ap_const_logic_0) and (stream_in_24_data_0_state = ap_const_lv2_3) and (stream_in_24_data_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_data_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_24_data_0_vld_in = ap_const_logic_0) and (stream_in_24_data_0_ack_out = ap_const_logic_1))) and not(((stream_in_24_data_0_ack_out = ap_const_logic_0) and (stream_in_24_data_0_vld_in = ap_const_logic_1))) and (stream_in_24_data_0_state = ap_const_lv2_3)) or ((stream_in_24_data_0_state = ap_const_lv2_1) and (stream_in_24_data_0_ack_out = ap_const_logic_1)) or ((stream_in_24_data_0_state = ap_const_lv2_2) and (stream_in_24_data_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_data_0_state <= ap_const_lv2_3;
                else 
                    stream_in_24_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_24_last_V_0_ack_out = ap_const_logic_1) and (stream_in_24_last_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_24_last_V_0_sel_rd <= not(stream_in_24_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_24_last_V_0_ack_in = ap_const_logic_1) and (stream_in_24_last_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_24_last_V_0_sel_wr <= not(stream_in_24_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_24_last_V_0_state = ap_const_lv2_2) and (stream_in_24_last_V_0_vld_in = ap_const_logic_0)) or ((stream_in_24_last_V_0_state = ap_const_lv2_3) and (stream_in_24_last_V_0_vld_in = ap_const_logic_0) and (stream_in_24_last_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_24_last_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_24_last_V_0_state = ap_const_lv2_1) and (stream_in_24_last_V_0_ack_out = ap_const_logic_0)) or ((stream_in_24_last_V_0_state = ap_const_lv2_3) and (stream_in_24_last_V_0_ack_out = ap_const_logic_0) and (stream_in_24_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_24_last_V_0_vld_in = ap_const_logic_0) and (stream_in_24_last_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_24_last_V_0_ack_out = ap_const_logic_0) and (stream_in_24_last_V_0_vld_in = ap_const_logic_1))) and (stream_in_24_last_V_0_state = ap_const_lv2_3)) or ((stream_in_24_last_V_0_state = ap_const_lv2_1) and (stream_in_24_last_V_0_ack_out = ap_const_logic_1)) or ((stream_in_24_last_V_0_state = ap_const_lv2_2) and (stream_in_24_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_last_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_24_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_24_user_V_0_ack_out = ap_const_logic_1) and (stream_in_24_user_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_24_user_V_0_sel_rd <= not(stream_in_24_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_24_user_V_0_ack_in = ap_const_logic_1) and (stream_in_24_user_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_24_user_V_0_sel_wr <= not(stream_in_24_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_24_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_24_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_24_user_V_0_state = ap_const_lv2_3) and (stream_in_24_user_V_0_vld_in = ap_const_logic_0) and (stream_in_24_user_V_0_ack_out = ap_const_logic_1)) or ((stream_in_24_user_V_0_state = ap_const_lv2_2) and (stream_in_24_user_V_0_vld_in = ap_const_logic_0)))) then 
                    stream_in_24_user_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_24_user_V_0_state = ap_const_lv2_1) and (stream_in_24_user_V_0_ack_out = ap_const_logic_0)) or ((stream_in_24_user_V_0_state = ap_const_lv2_3) and (stream_in_24_user_V_0_ack_out = ap_const_logic_0) and (stream_in_24_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_24_user_V_0_state <= ap_const_lv2_1;
                elsif ((((stream_in_24_user_V_0_state = ap_const_lv2_1) and (stream_in_24_user_V_0_ack_out = ap_const_logic_1)) or ((stream_in_24_user_V_0_state = ap_const_lv2_2) and (stream_in_24_user_V_0_vld_in = ap_const_logic_1)) or (not(((stream_in_24_user_V_0_vld_in = ap_const_logic_0) and (stream_in_24_user_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_24_user_V_0_ack_out = ap_const_logic_0) and (stream_in_24_user_V_0_vld_in = ap_const_logic_1))) and (stream_in_24_user_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_24_user_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_24_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_24_data_1_ack_out = ap_const_logic_1) and (stream_out_24_data_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_24_data_1_sel_rd <= not(stream_out_24_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_24_data_1_ack_in = ap_const_logic_1) and (stream_out_24_data_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_24_data_1_sel_wr <= not(stream_out_24_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_data_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_24_data_1_state = ap_const_lv2_2) and (stream_out_24_data_1_vld_in = ap_const_logic_0)) or ((stream_out_24_data_1_state = ap_const_lv2_3) and (stream_out_24_data_1_vld_in = ap_const_logic_0) and (stream_out_24_data_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_24_data_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_24_data_1_state = ap_const_lv2_1) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_data_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0) and (stream_out_24_data_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_data_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_24_data_1_vld_in = ap_const_logic_0) and (stream_out_24_data_1_ack_out = ap_const_logic_1))) and not(((stream_out_24_TREADY = ap_const_logic_0) and (stream_out_24_data_1_vld_in = ap_const_logic_1))) and (stream_out_24_data_1_state = ap_const_lv2_3)) or ((stream_out_24_data_1_state = ap_const_lv2_1) and (stream_out_24_data_1_ack_out = ap_const_logic_1)) or ((stream_out_24_data_1_state = ap_const_lv2_2) and (stream_out_24_data_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_data_1_state <= ap_const_lv2_3;
                else 
                    stream_out_24_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_24_last_V_1_ack_out = ap_const_logic_1) and (stream_out_24_last_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_24_last_V_1_sel_rd <= not(stream_out_24_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_24_last_V_1_ack_in = ap_const_logic_1) and (stream_out_24_last_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_24_last_V_1_sel_wr <= not(stream_out_24_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_24_last_V_1_state = ap_const_lv2_2) and (stream_out_24_last_V_1_vld_in = ap_const_logic_0)) or ((stream_out_24_last_V_1_state = ap_const_lv2_3) and (stream_out_24_last_V_1_vld_in = ap_const_logic_0) and (stream_out_24_last_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_24_last_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_24_last_V_1_state = ap_const_lv2_1) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_last_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0) and (stream_out_24_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_24_last_V_1_vld_in = ap_const_logic_0) and (stream_out_24_last_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_24_TREADY = ap_const_logic_0) and (stream_out_24_last_V_1_vld_in = ap_const_logic_1))) and (stream_out_24_last_V_1_state = ap_const_lv2_3)) or ((stream_out_24_last_V_1_state = ap_const_lv2_1) and (stream_out_24_last_V_1_ack_out = ap_const_logic_1)) or ((stream_out_24_last_V_1_state = ap_const_lv2_2) and (stream_out_24_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_24_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_24_user_V_1_ack_out = ap_const_logic_1) and (stream_out_24_user_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_24_user_V_1_sel_rd <= not(stream_out_24_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_24_user_V_1_ack_in = ap_const_logic_1) and (stream_out_24_user_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_24_user_V_1_sel_wr <= not(stream_out_24_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_24_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_24_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_24_user_V_1_state = ap_const_lv2_2) and (stream_out_24_user_V_1_vld_in = ap_const_logic_0)) or ((stream_out_24_user_V_1_state = ap_const_lv2_3) and (stream_out_24_user_V_1_vld_in = ap_const_logic_0) and (stream_out_24_user_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_24_user_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_24_user_V_1_state = ap_const_lv2_1) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_user_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0) and (stream_out_24_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_24_user_V_1_vld_in = ap_const_logic_0) and (stream_out_24_user_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_24_TREADY = ap_const_logic_0) and (stream_out_24_user_V_1_vld_in = ap_const_logic_1))) and (stream_out_24_user_V_1_state = ap_const_lv2_3)) or ((stream_out_24_user_V_1_state = ap_const_lv2_1) and (stream_out_24_user_V_1_ack_out = ap_const_logic_1)) or ((stream_out_24_user_V_1_state = ap_const_lv2_2) and (stream_out_24_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_24_user_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_24_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    bias_c1_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    bias_c2_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    bias_c3_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c1_c1_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c1_c2_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c1_c3_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c2_c1_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c2_c2_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c2_c3_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c3_c1_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c3_c2_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c3_c3_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln781_1_reg_1072 <= and_ln781_1_fu_546_p2;
                and_ln781_2_reg_1096 <= and_ln781_2_fu_668_p2;
                and_ln781_reg_1048 <= and_ln781_fu_424_p2;
                bias_c1_V_read_reg_945_pp0_iter2_reg <= bias_c1_V_read_reg_945;
                bias_c1_V_read_reg_945_pp0_iter3_reg <= bias_c1_V_read_reg_945_pp0_iter2_reg;
                bias_c2_V_read_reg_940_pp0_iter2_reg <= bias_c2_V_read_reg_940;
                bias_c2_V_read_reg_940_pp0_iter3_reg <= bias_c2_V_read_reg_940_pp0_iter2_reg;
                bias_c3_V_read_reg_935_pp0_iter2_reg <= bias_c3_V_read_reg_935;
                bias_c3_V_read_reg_935_pp0_iter3_reg <= bias_c3_V_read_reg_935_pp0_iter2_reg;
                c1_c3_V_read_reg_970_pp0_iter2_reg <= c1_c3_V_read_reg_970;
                c2_c3_V_read_reg_960_pp0_iter2_reg <= c2_c3_V_read_reg_960;
                c3_c3_V_read_reg_950_pp0_iter2_reg <= c3_c3_V_read_reg_950;
                or_ln785_1_reg_1078 <= or_ln785_1_fu_552_p2;
                or_ln785_2_reg_1102 <= or_ln785_2_fu_674_p2;
                or_ln785_reg_1054 <= or_ln785_fu_430_p2;
                p_Repl2_2_reg_930_pp0_iter2_reg <= p_Repl2_2_reg_930_pp0_iter1_reg;
                p_Result_2_reg_1060 <= ret_V_10_fu_447_p2(19 downto 19);
                p_Result_4_reg_1084 <= ret_V_13_fu_569_p2(19 downto 19);
                p_Result_s_reg_1036 <= ret_V_8_fu_325_p2(19 downto 19);
                p_Val2_15_reg_1066 <= p_Val2_15_fu_490_p2;
                p_Val2_23_reg_1090 <= p_Val2_23_fu_612_p2;
                p_Val2_7_reg_1042 <= p_Val2_7_fu_368_p2;
                stream_in_24_last_V_s_reg_915_pp0_iter2_reg <= stream_in_24_last_V_s_reg_915_pp0_iter1_reg;
                stream_in_24_last_V_s_reg_915_pp0_iter3_reg <= stream_in_24_last_V_s_reg_915_pp0_iter2_reg;
                stream_in_24_last_V_s_reg_915_pp0_iter4_reg <= stream_in_24_last_V_s_reg_915_pp0_iter3_reg;
                stream_in_24_user_V_s_reg_910_pp0_iter2_reg <= stream_in_24_user_V_s_reg_910_pp0_iter1_reg;
                stream_in_24_user_V_s_reg_910_pp0_iter3_reg <= stream_in_24_user_V_s_reg_910_pp0_iter2_reg;
                stream_in_24_user_V_s_reg_910_pp0_iter4_reg <= stream_in_24_user_V_s_reg_910_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((bias_c1_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((bias_c1_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (bias_c1_V_0_vld_reg = ap_const_logic_1)))) then
                bias_c1_V_0_data_reg <= bias_c1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bias_c1_V_read_reg_945 <= bias_c1_V_0_data_reg;
                bias_c2_V_read_reg_940 <= bias_c2_V_0_data_reg;
                bias_c3_V_read_reg_935 <= bias_c3_V_0_data_reg;
                c1_c2_V_read_reg_975 <= c1_c2_V_0_data_reg;
                c1_c3_V_read_reg_970 <= c1_c3_V_0_data_reg;
                c2_c1_V_read_reg_965 <= c2_c1_V_0_data_reg;
                c2_c3_V_read_reg_960 <= c2_c3_V_0_data_reg;
                c3_c1_V_read_reg_955 <= c3_c1_V_0_data_reg;
                c3_c3_V_read_reg_950 <= c3_c3_V_0_data_reg;
                p_Repl2_1_reg_925 <= stream_in_24_data_0_data_out(15 downto 8);
                p_Repl2_2_reg_930 <= stream_in_24_data_0_data_out(23 downto 16);
                p_Repl2_2_reg_930_pp0_iter1_reg <= p_Repl2_2_reg_930;
                p_Repl2_s_reg_920 <= p_Repl2_s_fu_215_p1;
                r_V_12_reg_986 <= r_V_12_fu_246_p2;
                r_V_16_reg_996 <= r_V_16_fu_259_p2;
                r_V_19_reg_1001 <= r_V_19_fu_269_p2;
                    r_V_2_reg_991(7 downto 0) <= r_V_2_fu_252_p1(7 downto 0);
                    r_V_reg_980(7 downto 0) <= r_V_fu_239_p1(7 downto 0);
                stream_in_24_last_V_s_reg_915 <= stream_in_24_last_V_0_data_out;
                stream_in_24_last_V_s_reg_915_pp0_iter1_reg <= stream_in_24_last_V_s_reg_915;
                stream_in_24_user_V_s_reg_910 <= stream_in_24_user_V_0_data_out;
                stream_in_24_user_V_s_reg_910_pp0_iter1_reg <= stream_in_24_user_V_s_reg_910;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((bias_c2_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((bias_c2_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (bias_c2_V_0_vld_reg = ap_const_logic_1)))) then
                bias_c2_V_0_data_reg <= bias_c2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((bias_c3_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((bias_c3_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (bias_c3_V_0_vld_reg = ap_const_logic_1)))) then
                bias_c3_V_0_data_reg <= bias_c3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c1_c1_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c1_c1_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c1_c1_V_0_vld_reg = ap_const_logic_1)))) then
                c1_c1_V_0_data_reg <= c1_c1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c1_c2_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c1_c2_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c1_c2_V_0_vld_reg = ap_const_logic_1)))) then
                c1_c2_V_0_data_reg <= c1_c2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c1_c3_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c1_c3_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c1_c3_V_0_vld_reg = ap_const_logic_1)))) then
                c1_c3_V_0_data_reg <= c1_c3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c2_c1_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c2_c1_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c2_c1_V_0_vld_reg = ap_const_logic_1)))) then
                c2_c1_V_0_data_reg <= c2_c1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c2_c2_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c2_c2_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c2_c2_V_0_vld_reg = ap_const_logic_1)))) then
                c2_c2_V_0_data_reg <= c2_c2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c2_c3_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c2_c3_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c2_c3_V_0_vld_reg = ap_const_logic_1)))) then
                c2_c3_V_0_data_reg <= c2_c3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c3_c1_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c3_c1_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c3_c1_V_0_vld_reg = ap_const_logic_1)))) then
                c3_c1_V_0_data_reg <= c3_c1_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c3_c2_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c3_c2_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c3_c2_V_0_vld_reg = ap_const_logic_1)))) then
                c3_c2_V_0_data_reg <= c3_c2_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c3_c3_V_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or ((c3_c3_V_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c3_c3_V_0_vld_reg = ap_const_logic_1)))) then
                c3_c3_V_0_data_reg <= c3_c3_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ret_V_11_reg_1016 <= grp_fu_879_p3;
                ret_V_6_reg_1006 <= grp_fu_865_p3;
                ret_V_reg_1011 <= grp_fu_872_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ret_V_12_reg_1031 <= grp_fu_902_p3;
                ret_V_7_reg_1021 <= grp_fu_886_p3;
                ret_V_9_reg_1026 <= grp_fu_894_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_data_0_load_A = ap_const_logic_1)) then
                stream_in_24_data_0_payload_A <= stream_in_24_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_data_0_load_B = ap_const_logic_1)) then
                stream_in_24_data_0_payload_B <= stream_in_24_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_last_V_0_load_A = ap_const_logic_1)) then
                stream_in_24_last_V_0_payload_A <= stream_in_24_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_last_V_0_load_B = ap_const_logic_1)) then
                stream_in_24_last_V_0_payload_B <= stream_in_24_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_user_V_0_load_A = ap_const_logic_1)) then
                stream_in_24_user_V_0_payload_A <= stream_in_24_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_24_user_V_0_load_B = ap_const_logic_1)) then
                stream_in_24_user_V_0_payload_B <= stream_in_24_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_data_1_load_A = ap_const_logic_1)) then
                stream_out_24_data_1_payload_A <= stream_out_24_data_t_fu_854_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_data_1_load_B = ap_const_logic_1)) then
                stream_out_24_data_1_payload_B <= stream_out_24_data_t_fu_854_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_last_V_1_load_A = ap_const_logic_1)) then
                stream_out_24_last_V_1_payload_A <= stream_in_24_last_V_s_reg_915_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_last_V_1_load_B = ap_const_logic_1)) then
                stream_out_24_last_V_1_payload_B <= stream_in_24_last_V_s_reg_915_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_user_V_1_load_A = ap_const_logic_1)) then
                stream_out_24_user_V_1_payload_A <= stream_in_24_user_V_s_reg_910_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_24_user_V_1_load_B = ap_const_logic_1)) then
                stream_out_24_user_V_1_payload_B <= stream_in_24_user_V_s_reg_910_pp0_iter4_reg;
            end if;
        end if;
    end process;
    r_V_reg_980(17 downto 8) <= "0000000000";
    r_V_2_reg_991(17 downto 8) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Range1_all_ones_1_fu_526_p2 <= "1" when (tmp_1_fu_516_p4 = ap_const_lv4_F) else "0";
    Range1_all_ones_2_fu_648_p2 <= "1" when (tmp_2_fu_638_p4 = ap_const_lv4_F) else "0";
    Range1_all_ones_fu_404_p2 <= "1" when (tmp_fu_394_p4 = ap_const_lv4_F) else "0";
    Range1_all_zeros_1_fu_532_p2 <= "1" when (tmp_1_fu_516_p4 = ap_const_lv4_0) else "0";
    Range1_all_zeros_2_fu_654_p2 <= "1" when (tmp_2_fu_638_p4 = ap_const_lv4_0) else "0";
    Range1_all_zeros_fu_410_p2 <= "1" when (tmp_fu_394_p4 = ap_const_lv4_0) else "0";
    and_ln340_1_fu_763_p2 <= (or_ln785_1_reg_1078 and or_ln340_4_fu_758_p2);
    and_ln340_2_fu_821_p2 <= (or_ln785_2_reg_1102 and or_ln340_5_fu_816_p2);
    and_ln340_fu_705_p2 <= (or_ln785_reg_1054 and or_ln340_3_fu_700_p2);
    and_ln781_1_fu_546_p2 <= (carry_3_fu_510_p2 and Range1_all_ones_1_fu_526_p2);
    and_ln781_2_fu_668_p2 <= (carry_5_fu_632_p2 and Range1_all_ones_2_fu_648_p2);
    and_ln781_fu_424_p2 <= (carry_1_fu_388_p2 and Range1_all_ones_fu_404_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(stream_in_24_data_0_vld_out, stream_out_24_TREADY, stream_out_24_data_1_state, stream_out_24_user_V_1_state, stream_out_24_last_V_1_state, ap_enable_reg_pp0_iter6)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((stream_out_24_last_V_1_state = ap_const_lv2_1) or (stream_out_24_user_V_1_state = ap_const_lv2_1) or (stream_out_24_data_1_state = ap_const_lv2_1) or ((stream_out_24_last_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_user_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_data_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)))) or ((stream_in_24_data_0_vld_out = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(stream_in_24_data_0_vld_out, stream_out_24_TREADY, stream_out_24_data_1_ack_in, stream_out_24_data_1_state, stream_out_24_user_V_1_state, stream_out_24_last_V_1_state, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((stream_out_24_last_V_1_state = ap_const_lv2_1) or (stream_out_24_user_V_1_state = ap_const_lv2_1) or (stream_out_24_data_1_state = ap_const_lv2_1) or (stream_out_24_data_1_ack_in = ap_const_logic_0) or ((stream_out_24_last_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_user_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_data_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)))) or ((stream_out_24_data_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((stream_in_24_data_0_vld_out = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(stream_in_24_data_0_vld_out, stream_out_24_TREADY, stream_out_24_data_1_ack_in, stream_out_24_data_1_state, stream_out_24_user_V_1_state, stream_out_24_last_V_1_state, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((stream_out_24_last_V_1_state = ap_const_lv2_1) or (stream_out_24_user_V_1_state = ap_const_lv2_1) or (stream_out_24_data_1_state = ap_const_lv2_1) or (stream_out_24_data_1_ack_in = ap_const_logic_0) or ((stream_out_24_last_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_user_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_data_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)))) or ((stream_out_24_data_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((stream_in_24_data_0_vld_out = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(stream_in_24_data_0_vld_out)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (stream_in_24_data_0_vld_out = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter6_assign_proc : process(stream_out_24_TREADY, stream_out_24_data_1_state, stream_out_24_user_V_1_state, stream_out_24_last_V_1_state)
    begin
                ap_block_state7_pp0_stage0_iter6 <= ((stream_out_24_last_V_1_state = ap_const_lv2_1) or (stream_out_24_user_V_1_state = ap_const_lv2_1) or (stream_out_24_data_1_state = ap_const_lv2_1) or ((stream_out_24_last_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_user_V_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)) or ((stream_out_24_data_1_state = ap_const_lv2_3) and (stream_out_24_TREADY = ap_const_logic_0)));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_control_inv_assign_proc : process(ap_rst_n_control)
    begin
                ap_rst_n_control_inv <= not(ap_rst_n_control);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bias_c1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_c1_V_0_ack_out <= ap_const_logic_1;
        else 
            bias_c1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    bias_c2_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_c2_V_0_ack_out <= ap_const_logic_1;
        else 
            bias_c2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    bias_c3_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_c3_V_0_ack_out <= ap_const_logic_1;
        else 
            bias_c3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c1_c1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c1_c1_V_0_ack_out <= ap_const_logic_1;
        else 
            c1_c1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c1_c2_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c1_c2_V_0_ack_out <= ap_const_logic_1;
        else 
            c1_c2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c1_c3_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c1_c3_V_0_ack_out <= ap_const_logic_1;
        else 
            c1_c3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c2_c1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c2_c1_V_0_ack_out <= ap_const_logic_1;
        else 
            c2_c1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c2_c2_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c2_c2_V_0_ack_out <= ap_const_logic_1;
        else 
            c2_c2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c2_c3_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c2_c3_V_0_ack_out <= ap_const_logic_1;
        else 
            c2_c3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c3_c1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c3_c1_V_0_ack_out <= ap_const_logic_1;
        else 
            c3_c1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c3_c2_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c3_c2_V_0_ack_out <= ap_const_logic_1;
        else 
            c3_c2_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c3_c3_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c3_c3_V_0_ack_out <= ap_const_logic_1;
        else 
            c3_c3_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    carry_1_fu_388_p2 <= (xor_ln416_fu_382_p2 and p_Result_1_fu_348_p3);
    carry_3_fu_510_p2 <= (xor_ln416_1_fu_504_p2 and p_Result_3_fu_470_p3);
    carry_5_fu_632_p2 <= (xor_ln416_2_fu_626_p2 and p_Result_5_fu_592_p3);
    deleted_zeros_1_fu_538_p3 <= 
        Range1_all_ones_1_fu_526_p2 when (carry_3_fu_510_p2(0) = '1') else 
        Range1_all_zeros_1_fu_532_p2;
    deleted_zeros_2_fu_660_p3 <= 
        Range1_all_ones_2_fu_648_p2 when (carry_5_fu_632_p2(0) = '1') else 
        Range1_all_zeros_2_fu_654_p2;
    deleted_zeros_fu_416_p3 <= 
        Range1_all_ones_fu_404_p2 when (carry_1_fu_388_p2(0) = '1') else 
        Range1_all_zeros_fu_410_p2;
    grp_fu_865_p0 <= r_V_2_reg_991(8 - 1 downto 0);
    grp_fu_872_p0 <= r_V_reg_980(8 - 1 downto 0);
    grp_fu_879_p0 <= r_V_reg_980(8 - 1 downto 0);
    grp_fu_886_p0 <= r_V_4_fu_293_p1(8 - 1 downto 0);
    grp_fu_894_p0 <= r_V_4_fu_293_p1(8 - 1 downto 0);
    grp_fu_902_p0 <= r_V_4_fu_293_p1(8 - 1 downto 0);
    neg_src_6_fu_743_p2 <= (xor_ln781_1_fu_738_p2 and p_Result_2_reg_1060);
    neg_src_7_fu_801_p2 <= (xor_ln781_2_fu_796_p2 and p_Result_4_reg_1084);
    neg_src_fu_685_p2 <= (xor_ln781_fu_680_p2 and p_Result_s_reg_1036);
    or_ln340_1_fu_768_p2 <= (overflow_1_fu_748_p2 or or_ln340_4_fu_758_p2);
    or_ln340_2_fu_826_p2 <= (overflow_2_fu_806_p2 or or_ln340_5_fu_816_p2);
    or_ln340_3_fu_700_p2 <= (xor_ln340_1_fu_695_p2 or and_ln781_reg_1048);
    or_ln340_4_fu_758_p2 <= (xor_ln340_fu_753_p2 or and_ln781_1_reg_1072);
    or_ln340_5_fu_816_p2 <= (xor_ln340_2_fu_811_p2 or and_ln781_2_reg_1096);
    or_ln340_fu_710_p2 <= (overflow_fu_690_p2 or or_ln340_3_fu_700_p2);
    or_ln785_1_fu_552_p2 <= (p_Result_2_fu_452_p3 or deleted_zeros_1_fu_538_p3);
    or_ln785_2_fu_674_p2 <= (p_Result_4_fu_574_p3 or deleted_zeros_2_fu_660_p3);
    or_ln785_fu_430_p2 <= (p_Result_s_fu_330_p3 or deleted_zeros_fu_416_p3);
    out1_V_fu_730_p3 <= 
        select_ln340_fu_716_p3 when (or_ln340_fu_710_p2(0) = '1') else 
        select_ln396_fu_723_p3;
    out2_V_fu_788_p3 <= 
        select_ln340_1_fu_774_p3 when (or_ln340_1_fu_768_p2(0) = '1') else 
        select_ln396_1_fu_781_p3;
    out3_V_fu_846_p3 <= 
        select_ln340_2_fu_832_p3 when (or_ln340_2_fu_826_p2(0) = '1') else 
        select_ln396_2_fu_839_p3;
    overflow_1_fu_748_p2 <= (or_ln785_1_reg_1078 xor ap_const_lv1_1);
    overflow_2_fu_806_p2 <= (or_ln785_2_reg_1102 xor ap_const_lv1_1);
    overflow_fu_690_p2 <= (or_ln785_reg_1054 xor ap_const_lv1_1);
    p_Repl2_s_fu_215_p1 <= stream_in_24_data_0_data_out(8 - 1 downto 0);
    p_Result_1_fu_348_p3 <= ret_V_8_fu_325_p2(15 downto 15);
    p_Result_2_fu_452_p3 <= ret_V_10_fu_447_p2(19 downto 19);
    p_Result_3_fu_470_p3 <= ret_V_10_fu_447_p2(15 downto 15);
    p_Result_4_fu_574_p3 <= ret_V_13_fu_569_p2(19 downto 19);
    p_Result_5_fu_592_p3 <= ret_V_13_fu_569_p2(15 downto 15);
    p_Result_s_fu_330_p3 <= ret_V_8_fu_325_p2(19 downto 19);
    p_Val2_14_fu_460_p4 <= ret_V_10_fu_447_p2(15 downto 8);
    p_Val2_15_fu_490_p2 <= std_logic_vector(unsigned(zext_ln415_1_fu_486_p1) + unsigned(p_Val2_14_fu_460_p4));
    p_Val2_22_fu_582_p4 <= ret_V_13_fu_569_p2(15 downto 8);
    p_Val2_23_fu_612_p2 <= std_logic_vector(unsigned(zext_ln415_2_fu_608_p1) + unsigned(p_Val2_22_fu_582_p4));
    p_Val2_6_fu_338_p4 <= ret_V_8_fu_325_p2(15 downto 8);
    p_Val2_7_fu_368_p2 <= std_logic_vector(unsigned(p_Val2_6_fu_338_p4) + unsigned(zext_ln415_fu_364_p1));
    r_V_12_fu_246_p0 <= r_V_12_fu_246_p00(8 - 1 downto 0);
    r_V_12_fu_246_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_s_reg_920),18));
    r_V_12_fu_246_p1 <= c1_c1_V_0_data_reg;
    r_V_12_fu_246_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_12_fu_246_p0) * signed(r_V_12_fu_246_p1))), 18));
    r_V_16_fu_259_p0 <= r_V_2_fu_252_p1(8 - 1 downto 0);
    r_V_16_fu_259_p1 <= c2_c2_V_0_data_reg;
    r_V_16_fu_259_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_16_fu_259_p0) * signed(r_V_16_fu_259_p1))), 18));
    r_V_19_fu_269_p0 <= r_V_2_fu_252_p1(8 - 1 downto 0);
    r_V_19_fu_269_p1 <= c3_c2_V_0_data_reg;
    r_V_19_fu_269_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &r_V_19_fu_269_p0) * signed(r_V_19_fu_269_p1))), 18));
    r_V_2_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_1_reg_925),18));
    r_V_4_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_2_reg_930_pp0_iter2_reg),18));
    r_V_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_s_reg_920),18));
    ret_V_10_fu_447_p2 <= std_logic_vector(signed(ret_V_9_reg_1026) + signed(sext_ln728_1_fu_443_p1));
    ret_V_13_fu_569_p2 <= std_logic_vector(signed(ret_V_12_reg_1031) + signed(sext_ln728_2_fu_565_p1));
    ret_V_8_fu_325_p2 <= std_logic_vector(signed(ret_V_7_reg_1021) + signed(sext_ln728_fu_321_p1));
    rhs_V_2_fu_314_p3 <= (bias_c1_V_read_reg_945_pp0_iter3_reg & ap_const_lv8_0);
    rhs_V_5_fu_436_p3 <= (bias_c2_V_read_reg_940_pp0_iter3_reg & ap_const_lv8_0);
    rhs_V_8_fu_558_p3 <= (bias_c3_V_read_reg_935_pp0_iter3_reg & ap_const_lv8_0);
    select_ln340_1_fu_774_p3 <= 
        p_Val2_15_reg_1066 when (and_ln340_1_fu_763_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln340_2_fu_832_p3 <= 
        p_Val2_23_reg_1090 when (and_ln340_2_fu_821_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln340_fu_716_p3 <= 
        p_Val2_7_reg_1042 when (and_ln340_fu_705_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln396_1_fu_781_p3 <= 
        ap_const_lv8_0 when (neg_src_6_fu_743_p2(0) = '1') else 
        p_Val2_15_reg_1066;
    select_ln396_2_fu_839_p3 <= 
        ap_const_lv8_0 when (neg_src_7_fu_801_p2(0) = '1') else 
        p_Val2_23_reg_1090;
    select_ln396_fu_723_p3 <= 
        ap_const_lv8_0 when (neg_src_fu_685_p2(0) = '1') else 
        p_Val2_7_reg_1042;
        sext_ln728_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_5_fu_436_p3),20));

        sext_ln728_2_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_8_fu_558_p3),20));

        sext_ln728_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_2_fu_314_p3),20));


    stream_in_24_TDATA_blk_n_assign_proc : process(stream_in_24_data_0_state, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_TDATA_blk_n <= stream_in_24_data_0_state(0);
        else 
            stream_in_24_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_24_TREADY <= stream_in_24_last_V_0_state(1);
    stream_in_24_data_0_ack_in <= stream_in_24_data_0_state(1);

    stream_in_24_data_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_data_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_24_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_24_data_0_data_out_assign_proc : process(stream_in_24_data_0_payload_A, stream_in_24_data_0_payload_B, stream_in_24_data_0_sel)
    begin
        if ((stream_in_24_data_0_sel = ap_const_logic_1)) then 
            stream_in_24_data_0_data_out <= stream_in_24_data_0_payload_B;
        else 
            stream_in_24_data_0_data_out <= stream_in_24_data_0_payload_A;
        end if; 
    end process;

    stream_in_24_data_0_load_A <= (stream_in_24_data_0_state_cmp_full and not(stream_in_24_data_0_sel_wr));
    stream_in_24_data_0_load_B <= (stream_in_24_data_0_state_cmp_full and stream_in_24_data_0_sel_wr);
    stream_in_24_data_0_sel <= stream_in_24_data_0_sel_rd;
    stream_in_24_data_0_state_cmp_full <= '0' when (stream_in_24_data_0_state = ap_const_lv2_1) else '1';
    stream_in_24_data_0_vld_in <= stream_in_24_TVALID;
    stream_in_24_data_0_vld_out <= stream_in_24_data_0_state(0);
    stream_in_24_last_V_0_ack_in <= stream_in_24_last_V_0_state(1);

    stream_in_24_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_last_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_24_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_24_last_V_0_data_out_assign_proc : process(stream_in_24_last_V_0_payload_A, stream_in_24_last_V_0_payload_B, stream_in_24_last_V_0_sel)
    begin
        if ((stream_in_24_last_V_0_sel = ap_const_logic_1)) then 
            stream_in_24_last_V_0_data_out <= stream_in_24_last_V_0_payload_B;
        else 
            stream_in_24_last_V_0_data_out <= stream_in_24_last_V_0_payload_A;
        end if; 
    end process;

    stream_in_24_last_V_0_load_A <= (stream_in_24_last_V_0_state_cmp_full and not(stream_in_24_last_V_0_sel_wr));
    stream_in_24_last_V_0_load_B <= (stream_in_24_last_V_0_state_cmp_full and stream_in_24_last_V_0_sel_wr);
    stream_in_24_last_V_0_sel <= stream_in_24_last_V_0_sel_rd;
    stream_in_24_last_V_0_state_cmp_full <= '0' when (stream_in_24_last_V_0_state = ap_const_lv2_1) else '1';
    stream_in_24_last_V_0_vld_in <= stream_in_24_TVALID;
    stream_in_24_last_V_0_vld_out <= stream_in_24_last_V_0_state(0);
    stream_in_24_user_V_0_ack_in <= stream_in_24_user_V_0_state(1);

    stream_in_24_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_24_user_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_24_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_24_user_V_0_data_out_assign_proc : process(stream_in_24_user_V_0_payload_A, stream_in_24_user_V_0_payload_B, stream_in_24_user_V_0_sel)
    begin
        if ((stream_in_24_user_V_0_sel = ap_const_logic_1)) then 
            stream_in_24_user_V_0_data_out <= stream_in_24_user_V_0_payload_B;
        else 
            stream_in_24_user_V_0_data_out <= stream_in_24_user_V_0_payload_A;
        end if; 
    end process;

    stream_in_24_user_V_0_load_A <= (stream_in_24_user_V_0_state_cmp_full and not(stream_in_24_user_V_0_sel_wr));
    stream_in_24_user_V_0_load_B <= (stream_in_24_user_V_0_state_cmp_full and stream_in_24_user_V_0_sel_wr);
    stream_in_24_user_V_0_sel <= stream_in_24_user_V_0_sel_rd;
    stream_in_24_user_V_0_state_cmp_full <= '0' when (stream_in_24_user_V_0_state = ap_const_lv2_1) else '1';
    stream_in_24_user_V_0_vld_in <= stream_in_24_TVALID;
    stream_in_24_user_V_0_vld_out <= stream_in_24_user_V_0_state(0);
    stream_out_24_TDATA <= stream_out_24_data_1_data_out;

    stream_out_24_TDATA_blk_n_assign_proc : process(stream_out_24_data_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            stream_out_24_TDATA_blk_n <= stream_out_24_data_1_state(1);
        else 
            stream_out_24_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_24_TLAST <= stream_out_24_last_V_1_data_out;
    stream_out_24_TUSER <= stream_out_24_user_V_1_data_out;
    stream_out_24_TVALID <= stream_out_24_last_V_1_state(0);
    stream_out_24_data_1_ack_in <= stream_out_24_data_1_state(1);
    stream_out_24_data_1_ack_out <= stream_out_24_TREADY;

    stream_out_24_data_1_data_out_assign_proc : process(stream_out_24_data_1_payload_A, stream_out_24_data_1_payload_B, stream_out_24_data_1_sel)
    begin
        if ((stream_out_24_data_1_sel = ap_const_logic_1)) then 
            stream_out_24_data_1_data_out <= stream_out_24_data_1_payload_B;
        else 
            stream_out_24_data_1_data_out <= stream_out_24_data_1_payload_A;
        end if; 
    end process;

    stream_out_24_data_1_load_A <= (stream_out_24_data_1_state_cmp_full and not(stream_out_24_data_1_sel_wr));
    stream_out_24_data_1_load_B <= (stream_out_24_data_1_state_cmp_full and stream_out_24_data_1_sel_wr);
    stream_out_24_data_1_sel <= stream_out_24_data_1_sel_rd;
    stream_out_24_data_1_state_cmp_full <= '0' when (stream_out_24_data_1_state = ap_const_lv2_1) else '1';

    stream_out_24_data_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            stream_out_24_data_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_24_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_24_data_1_vld_out <= stream_out_24_data_1_state(0);
    stream_out_24_data_t_fu_854_p4 <= ((out3_V_fu_846_p3 & out2_V_fu_788_p3) & out1_V_fu_730_p3);
    stream_out_24_last_V_1_ack_in <= stream_out_24_last_V_1_state(1);
    stream_out_24_last_V_1_ack_out <= stream_out_24_TREADY;

    stream_out_24_last_V_1_data_out_assign_proc : process(stream_out_24_last_V_1_payload_A, stream_out_24_last_V_1_payload_B, stream_out_24_last_V_1_sel)
    begin
        if ((stream_out_24_last_V_1_sel = ap_const_logic_1)) then 
            stream_out_24_last_V_1_data_out <= stream_out_24_last_V_1_payload_B;
        else 
            stream_out_24_last_V_1_data_out <= stream_out_24_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_24_last_V_1_load_A <= (stream_out_24_last_V_1_state_cmp_full and not(stream_out_24_last_V_1_sel_wr));
    stream_out_24_last_V_1_load_B <= (stream_out_24_last_V_1_state_cmp_full and stream_out_24_last_V_1_sel_wr);
    stream_out_24_last_V_1_sel <= stream_out_24_last_V_1_sel_rd;
    stream_out_24_last_V_1_state_cmp_full <= '0' when (stream_out_24_last_V_1_state = ap_const_lv2_1) else '1';

    stream_out_24_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            stream_out_24_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_24_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_24_last_V_1_vld_out <= stream_out_24_last_V_1_state(0);
    stream_out_24_user_V_1_ack_in <= stream_out_24_user_V_1_state(1);
    stream_out_24_user_V_1_ack_out <= stream_out_24_TREADY;

    stream_out_24_user_V_1_data_out_assign_proc : process(stream_out_24_user_V_1_payload_A, stream_out_24_user_V_1_payload_B, stream_out_24_user_V_1_sel)
    begin
        if ((stream_out_24_user_V_1_sel = ap_const_logic_1)) then 
            stream_out_24_user_V_1_data_out <= stream_out_24_user_V_1_payload_B;
        else 
            stream_out_24_user_V_1_data_out <= stream_out_24_user_V_1_payload_A;
        end if; 
    end process;

    stream_out_24_user_V_1_load_A <= (stream_out_24_user_V_1_state_cmp_full and not(stream_out_24_user_V_1_sel_wr));
    stream_out_24_user_V_1_load_B <= (stream_out_24_user_V_1_state_cmp_full and stream_out_24_user_V_1_sel_wr);
    stream_out_24_user_V_1_sel <= stream_out_24_user_V_1_sel_rd;
    stream_out_24_user_V_1_state_cmp_full <= '0' when (stream_out_24_user_V_1_state = ap_const_lv2_1) else '1';

    stream_out_24_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            stream_out_24_user_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_24_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_24_user_V_1_vld_out <= stream_out_24_user_V_1_state(0);
    tmp_10_fu_496_p3 <= p_Val2_15_fu_490_p2(7 downto 7);
    tmp_13_fu_600_p3 <= ret_V_13_fu_569_p2(7 downto 7);
    tmp_14_fu_618_p3 <= p_Val2_23_fu_612_p2(7 downto 7);
    tmp_1_fu_516_p4 <= ret_V_10_fu_447_p2(19 downto 16);
    tmp_2_fu_638_p4 <= ret_V_13_fu_569_p2(19 downto 16);
    tmp_5_fu_356_p3 <= ret_V_8_fu_325_p2(7 downto 7);
    tmp_6_fu_374_p3 <= p_Val2_7_fu_368_p2(7 downto 7);
    tmp_9_fu_478_p3 <= ret_V_10_fu_447_p2(7 downto 7);
    tmp_fu_394_p4 <= ret_V_8_fu_325_p2(19 downto 16);
    xor_ln340_1_fu_695_p2 <= (p_Result_s_reg_1036 xor ap_const_lv1_1);
    xor_ln340_2_fu_811_p2 <= (p_Result_4_reg_1084 xor ap_const_lv1_1);
    xor_ln340_fu_753_p2 <= (p_Result_2_reg_1060 xor ap_const_lv1_1);
    xor_ln416_1_fu_504_p2 <= (tmp_10_fu_496_p3 xor ap_const_lv1_1);
    xor_ln416_2_fu_626_p2 <= (tmp_14_fu_618_p3 xor ap_const_lv1_1);
    xor_ln416_fu_382_p2 <= (tmp_6_fu_374_p3 xor ap_const_lv1_1);
    xor_ln781_1_fu_738_p2 <= (ap_const_lv1_1 xor and_ln781_1_reg_1072);
    xor_ln781_2_fu_796_p2 <= (ap_const_lv1_1 xor and_ln781_2_reg_1096);
    xor_ln781_fu_680_p2 <= (ap_const_lv1_1 xor and_ln781_reg_1048);
    zext_ln415_1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_478_p3),8));
    zext_ln415_2_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_600_p3),8));
    zext_ln415_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_356_p3),8));
end behav;
