// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_tpg_0_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        strmPix_V_val_0_V_dout,
        strmPix_V_val_0_V_empty_n,
        strmPix_V_val_0_V_read,
        strmPix_V_val_1_V_dout,
        strmPix_V_val_1_V_empty_n,
        strmPix_V_val_1_V_read,
        strmPix_V_val_2_V_dout,
        strmPix_V_val_2_V_empty_n,
        strmPix_V_val_2_V_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        Height,
        WidthOut,
        colorFormat,
        fid_in,
        fid,
        fid_ap_vld,
        field_id
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] strmPix_V_val_0_V_dout;
input   strmPix_V_val_0_V_empty_n;
output   strmPix_V_val_0_V_read;
input  [7:0] strmPix_V_val_1_V_dout;
input   strmPix_V_val_1_V_empty_n;
output   strmPix_V_val_1_V_read;
input  [7:0] strmPix_V_val_2_V_dout;
input   strmPix_V_val_2_V_empty_n;
output   strmPix_V_val_2_V_read;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] Height;
input  [15:0] WidthOut;
input  [7:0] colorFormat;
input   fid_in;
output   fid;
output   fid_ap_vld;
input  [15:0] field_id;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strmPix_V_val_0_V_read;
reg strmPix_V_val_1_V_read;
reg strmPix_V_val_2_V_read;
reg fid_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] AXI_video_strm_V_data_V_1_data_out;
reg    AXI_video_strm_V_data_V_1_vld_in;
wire    AXI_video_strm_V_data_V_1_vld_out;
wire    AXI_video_strm_V_data_V_1_ack_in;
wire    AXI_video_strm_V_data_V_1_ack_out;
reg   [23:0] AXI_video_strm_V_data_V_1_payload_A;
reg   [23:0] AXI_video_strm_V_data_V_1_payload_B;
reg    AXI_video_strm_V_data_V_1_sel_rd;
reg    AXI_video_strm_V_data_V_1_sel_wr;
wire    AXI_video_strm_V_data_V_1_sel;
wire    AXI_video_strm_V_data_V_1_load_A;
wire    AXI_video_strm_V_data_V_1_load_B;
reg   [1:0] AXI_video_strm_V_data_V_1_state;
wire    AXI_video_strm_V_data_V_1_state_cmp_full;
wire   [2:0] AXI_video_strm_V_keep_V_1_data_out;
reg    AXI_video_strm_V_keep_V_1_vld_in;
wire    AXI_video_strm_V_keep_V_1_vld_out;
wire    AXI_video_strm_V_keep_V_1_ack_out;
reg    AXI_video_strm_V_keep_V_1_sel_rd;
wire    AXI_video_strm_V_keep_V_1_sel;
reg   [1:0] AXI_video_strm_V_keep_V_1_state;
wire   [2:0] AXI_video_strm_V_strb_V_1_data_out;
reg    AXI_video_strm_V_strb_V_1_vld_in;
wire    AXI_video_strm_V_strb_V_1_vld_out;
wire    AXI_video_strm_V_strb_V_1_ack_out;
reg    AXI_video_strm_V_strb_V_1_sel_rd;
wire    AXI_video_strm_V_strb_V_1_sel;
reg   [1:0] AXI_video_strm_V_strb_V_1_state;
reg   [0:0] AXI_video_strm_V_user_V_1_data_out;
reg    AXI_video_strm_V_user_V_1_vld_in;
wire    AXI_video_strm_V_user_V_1_vld_out;
wire    AXI_video_strm_V_user_V_1_ack_in;
wire    AXI_video_strm_V_user_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_user_V_1_payload_B;
reg    AXI_video_strm_V_user_V_1_sel_rd;
reg    AXI_video_strm_V_user_V_1_sel_wr;
wire    AXI_video_strm_V_user_V_1_sel;
wire    AXI_video_strm_V_user_V_1_load_A;
wire    AXI_video_strm_V_user_V_1_load_B;
reg   [1:0] AXI_video_strm_V_user_V_1_state;
wire    AXI_video_strm_V_user_V_1_state_cmp_full;
reg   [0:0] AXI_video_strm_V_last_V_1_data_out;
reg    AXI_video_strm_V_last_V_1_vld_in;
wire    AXI_video_strm_V_last_V_1_vld_out;
wire    AXI_video_strm_V_last_V_1_ack_in;
wire    AXI_video_strm_V_last_V_1_ack_out;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_A;
reg   [0:0] AXI_video_strm_V_last_V_1_payload_B;
reg    AXI_video_strm_V_last_V_1_sel_rd;
reg    AXI_video_strm_V_last_V_1_sel_wr;
wire    AXI_video_strm_V_last_V_1_sel;
wire    AXI_video_strm_V_last_V_1_load_A;
wire    AXI_video_strm_V_last_V_1_load_B;
reg   [1:0] AXI_video_strm_V_last_V_1_state;
wire    AXI_video_strm_V_last_V_1_state_cmp_full;
wire   [0:0] AXI_video_strm_V_id_V_1_data_out;
reg    AXI_video_strm_V_id_V_1_vld_in;
wire    AXI_video_strm_V_id_V_1_vld_out;
wire    AXI_video_strm_V_id_V_1_ack_out;
reg    AXI_video_strm_V_id_V_1_sel_rd;
wire    AXI_video_strm_V_id_V_1_sel;
reg   [1:0] AXI_video_strm_V_id_V_1_state;
wire   [0:0] AXI_video_strm_V_dest_V_1_data_out;
reg    AXI_video_strm_V_dest_V_1_vld_in;
wire    AXI_video_strm_V_dest_V_1_vld_out;
wire    AXI_video_strm_V_dest_V_1_ack_out;
reg    AXI_video_strm_V_dest_V_1_sel_rd;
wire    AXI_video_strm_V_dest_V_1_sel;
reg   [1:0] AXI_video_strm_V_dest_V_1_state;
reg   [15:0] counter;
reg    strmPix_V_val_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln898_reg_606;
reg    strmPix_V_val_1_V_blk_n;
reg    strmPix_V_val_2_V_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln898_reg_606_pp0_iter1_reg;
reg   [15:0] j_0_reg_247;
reg    ap_block_state1;
wire   [15:0] grp_reg_unsigned_short_s_fu_258_ap_return;
reg   [15:0] tmp_reg_550;
wire    ap_CS_fsm_state2;
wire    grp_reg_unsigned_short_s_fu_258_ap_ready;
wire    grp_reg_unsigned_short_s_fu_258_ap_done;
wire    grp_reg_unsigned_short_s_fu_264_ap_ready;
wire    grp_reg_unsigned_short_s_fu_264_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [15:0] grp_reg_unsigned_short_s_fu_264_ap_return;
reg   [15:0] tmp_2_reg_555;
wire   [16:0] add_ln915_fu_279_p2;
reg   [16:0] add_ln915_reg_560;
wire   [0:0] icmp_ln996_fu_297_p2;
wire   [0:0] and_ln1001_fu_309_p2;
wire   [0:0] xor_ln983_fu_325_p2;
wire   [0:0] xor_ln983_1_fu_331_p2;
wire   [0:0] icmp_ln983_1_fu_337_p2;
wire   [0:0] icmp_ln941_fu_343_p2;
wire   [0:0] icmp_ln893_fu_354_p2;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
wire   [15:0] i_fu_359_p2;
reg   [15:0] i_reg_601;
wire   [0:0] icmp_ln898_fu_369_p2;
wire    ap_block_state4_pp0_stage0_iter0;
wire    io_acc_block_signal_op60;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] j_fu_374_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_last_V_fu_380_p2;
reg   [0:0] tmp_last_V_reg_615;
wire   [0:0] tmp_user_V_load_load_fu_385_p1;
wire   [23:0] tmp_data_V_fu_469_p5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    grp_reg_unsigned_short_s_fu_258_ap_start;
wire    grp_reg_unsigned_short_s_fu_258_ap_idle;
wire    grp_reg_unsigned_short_s_fu_264_ap_start;
wire    grp_reg_unsigned_short_s_fu_264_ap_idle;
reg   [15:0] i_0_reg_236;
wire    ap_CS_fsm_state7;
reg    grp_reg_unsigned_short_s_fu_258_ap_start_reg;
reg    ap_block_state1_ignore_call11;
reg    grp_reg_unsigned_short_s_fu_264_ap_start_reg;
reg    ap_block_state1_ignore_call12;
wire   [15:0] add_ln926_fu_391_p2;
reg   [0:0] tmp_user_V_fu_152;
reg   [15:0] counter_loc_0_fu_156;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] zext_ln850_fu_275_p1;
wire   [0:0] icmp_ln1001_fu_303_p2;
wire   [0:0] and_ln1001_fu_309_p1;
wire   [0:0] icmp_ln983_fu_285_p2;
wire   [0:0] icmp_ln987_fu_291_p2;
wire   [0:0] or_ln983_fu_319_p2;
wire   [16:0] zext_ln898_fu_365_p1;
wire   [23:0] p_Result_s_fu_432_p3;
wire   [23:0] p_Result_4_fu_424_p3;
wire   [7:0] select_ln941_2_fu_454_p3;
wire   [7:0] select_ln941_1_fu_447_p3;
wire   [23:0] select_ln941_fu_440_p3;
wire   [15:0] tmp_4_fu_461_p3;
wire   [0:0] fid_toggle_fu_490_p1;
wire   [0:0] and_ln983_fu_494_p2;
wire   [0:0] fid_toggle_1_fu_504_p2;
wire   [0:0] or_ln983_1_fu_499_p2;
wire   [0:0] select_ln996_fu_510_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 AXI_video_strm_V_data_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_data_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_data_V_1_state = 2'd0;
#0 AXI_video_strm_V_keep_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_keep_V_1_state = 2'd0;
#0 AXI_video_strm_V_strb_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_strb_V_1_state = 2'd0;
#0 AXI_video_strm_V_user_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_user_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_user_V_1_state = 2'd0;
#0 AXI_video_strm_V_last_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_last_V_1_sel_wr = 1'b0;
#0 AXI_video_strm_V_last_V_1_state = 2'd0;
#0 AXI_video_strm_V_id_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_id_V_1_state = 2'd0;
#0 AXI_video_strm_V_dest_V_1_sel_rd = 1'b0;
#0 AXI_video_strm_V_dest_V_1_state = 2'd0;
#0 counter = 16'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_reg_unsigned_short_s_fu_258_ap_start_reg = 1'b0;
#0 grp_reg_unsigned_short_s_fu_264_ap_start_reg = 1'b0;
end

design_1_v_tpg_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_258(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_258_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_258_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_258_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_258_ap_ready),
    .in_r(Height),
    .ap_return(grp_reg_unsigned_short_s_fu_258_ap_return)
);

design_1_v_tpg_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_264(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_264_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_264_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_264_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_264_ap_ready),
    .in_r(WidthOut),
    .ap_return(grp_reg_unsigned_short_s_fu_264_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_out) & (1'b1 == AXI_video_strm_V_data_V_1_vld_out))) begin
            AXI_video_strm_V_data_V_1_sel_rd <= ~AXI_video_strm_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_1_ack_in) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in))) begin
            AXI_video_strm_V_data_V_1_sel_wr <= ~AXI_video_strm_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_data_V_1_vld_in) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_data_V_1_state)) | ((2'd1 == AXI_video_strm_V_data_V_1_state) & (1'b1 == AXI_video_strm_V_data_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_data_V_1_state) & (1'b1 == AXI_video_strm_V_data_V_1_vld_in)))) begin
            AXI_video_strm_V_data_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_dest_V_1_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_out))) begin
            AXI_video_strm_V_dest_V_1_sel_rd <= ~AXI_video_strm_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_dest_V_1_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_dest_V_1_state)) | ((2'd1 == AXI_video_strm_V_dest_V_1_state) & (1'b1 == AXI_video_strm_V_dest_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_dest_V_1_state) & (1'b1 == AXI_video_strm_V_dest_V_1_vld_in)))) begin
            AXI_video_strm_V_dest_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_id_V_1_ack_out) & (1'b1 == AXI_video_strm_V_id_V_1_vld_out))) begin
            AXI_video_strm_V_id_V_1_sel_rd <= ~AXI_video_strm_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_id_V_1_vld_in) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_id_V_1_state)) | ((2'd1 == AXI_video_strm_V_id_V_1_state) & (1'b1 == AXI_video_strm_V_id_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_id_V_1_state) & (1'b1 == AXI_video_strm_V_id_V_1_vld_in)))) begin
            AXI_video_strm_V_id_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_keep_V_1_ack_out) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_out))) begin
            AXI_video_strm_V_keep_V_1_sel_rd <= ~AXI_video_strm_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_keep_V_1_vld_in) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_keep_V_1_state)) | ((2'd1 == AXI_video_strm_V_keep_V_1_state) & (1'b1 == AXI_video_strm_V_keep_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_keep_V_1_state) & (1'b1 == AXI_video_strm_V_keep_V_1_vld_in)))) begin
            AXI_video_strm_V_keep_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_out) & (1'b1 == AXI_video_strm_V_last_V_1_vld_out))) begin
            AXI_video_strm_V_last_V_1_sel_rd <= ~AXI_video_strm_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_1_ack_in) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in))) begin
            AXI_video_strm_V_last_V_1_sel_wr <= ~AXI_video_strm_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_last_V_1_vld_in) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_last_V_1_state)) | ((2'd1 == AXI_video_strm_V_last_V_1_state) & (1'b1 == AXI_video_strm_V_last_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_last_V_1_state) & (1'b1 == AXI_video_strm_V_last_V_1_vld_in)))) begin
            AXI_video_strm_V_last_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_strb_V_1_ack_out) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_out))) begin
            AXI_video_strm_V_strb_V_1_sel_rd <= ~AXI_video_strm_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_strb_V_1_vld_in) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_strb_V_1_state)) | ((2'd1 == AXI_video_strm_V_strb_V_1_state) & (1'b1 == AXI_video_strm_V_strb_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_strb_V_1_state) & (1'b1 == AXI_video_strm_V_strb_V_1_vld_in)))) begin
            AXI_video_strm_V_strb_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_out) & (1'b1 == AXI_video_strm_V_user_V_1_vld_out))) begin
            AXI_video_strm_V_user_V_1_sel_rd <= ~AXI_video_strm_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_1_ack_in) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in))) begin
            AXI_video_strm_V_user_V_1_sel_wr <= ~AXI_video_strm_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_vld_in)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_user_V_1_vld_in) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)) & (2'd3 == AXI_video_strm_V_user_V_1_state)) | ((2'd1 == AXI_video_strm_V_user_V_1_state) & (1'b1 == AXI_video_strm_V_user_V_1_ack_out)) | ((2'd2 == AXI_video_strm_V_user_V_1_state) & (1'b1 == AXI_video_strm_V_user_V_1_vld_in)))) begin
            AXI_video_strm_V_user_V_1_state <= 2'd3;
        end else begin
            AXI_video_strm_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln893_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln893_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln893_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_258_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_258_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_258_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_258_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_264_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_264_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_264_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_264_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_user_V_load_load_fu_385_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        counter_loc_0_fu_156 <= add_ln926_fu_391_p2;
    end else if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        counter_loc_0_fu_156 <= counter;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_236 <= i_reg_601;
    end else if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_236 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln893_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_247 <= 16'd0;
    end else if (((icmp_ln898_fu_369_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_247 <= j_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_fu_152 <= 1'd0;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_152 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_A)) begin
        AXI_video_strm_V_data_V_1_payload_A <= tmp_data_V_fu_469_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_load_B)) begin
        AXI_video_strm_V_data_V_1_payload_B <= tmp_data_V_fu_469_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_A)) begin
        AXI_video_strm_V_last_V_1_payload_A <= tmp_last_V_reg_615;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_load_B)) begin
        AXI_video_strm_V_last_V_1_payload_B <= tmp_last_V_reg_615;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_A)) begin
        AXI_video_strm_V_user_V_1_payload_A <= tmp_user_V_fu_152;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_load_B)) begin
        AXI_video_strm_V_user_V_1_payload_B <= tmp_user_V_fu_152;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln915_reg_560 <= add_ln915_fu_279_p2;
        tmp_2_reg_555 <= grp_reg_unsigned_short_s_fu_264_ap_return;
        tmp_reg_550 <= grp_reg_unsigned_short_s_fu_258_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_user_V_load_load_fu_385_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        counter <= add_ln926_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_601 <= i_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln898_reg_606 <= icmp_ln898_fu_369_p2;
        icmp_ln898_reg_606_pp0_iter1_reg <= icmp_ln898_reg_606;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln898_fu_369_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_615 <= tmp_last_V_fu_380_p2;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_data_V_1_sel)) begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_B;
    end else begin
        AXI_video_strm_V_data_V_1_data_out = AXI_video_strm_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_last_V_1_sel)) begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_B;
    end else begin
        AXI_video_strm_V_last_V_1_data_out = AXI_video_strm_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_user_V_1_sel)) begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_B;
    end else begin
        AXI_video_strm_V_user_V_1_data_out = AXI_video_strm_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b1;
    end else begin
        AXI_video_strm_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln898_fu_369_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln893_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln893_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        fid_ap_vld = 1'b1;
    end else begin
        fid_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln898_reg_606_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = AXI_video_strm_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_0_V_blk_n = strmPix_V_val_0_V_empty_n;
    end else begin
        strmPix_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_0_V_read = 1'b1;
    end else begin
        strmPix_V_val_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_1_V_blk_n = strmPix_V_val_1_V_empty_n;
    end else begin
        strmPix_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_1_V_read = 1'b1;
    end else begin
        strmPix_V_val_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_2_V_blk_n = strmPix_V_val_2_V_empty_n;
    end else begin
        strmPix_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln898_reg_606 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        strmPix_V_val_2_V_read = 1'b1;
    end else begin
        strmPix_V_val_2_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln893_fu_354_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln893_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln898_fu_369_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln898_fu_369_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_1_ack_in = AXI_video_strm_V_data_V_1_state[1'd1];

assign AXI_video_strm_V_data_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_data_V_1_load_A = (~AXI_video_strm_V_data_V_1_sel_wr & AXI_video_strm_V_data_V_1_state_cmp_full);

assign AXI_video_strm_V_data_V_1_load_B = (AXI_video_strm_V_data_V_1_state_cmp_full & AXI_video_strm_V_data_V_1_sel_wr);

assign AXI_video_strm_V_data_V_1_sel = AXI_video_strm_V_data_V_1_sel_rd;

assign AXI_video_strm_V_data_V_1_state_cmp_full = ((AXI_video_strm_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_data_V_1_vld_out = AXI_video_strm_V_data_V_1_state[1'd0];

assign AXI_video_strm_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_dest_V_1_data_out = 1'd0;

assign AXI_video_strm_V_dest_V_1_sel = AXI_video_strm_V_dest_V_1_sel_rd;

assign AXI_video_strm_V_dest_V_1_vld_out = AXI_video_strm_V_dest_V_1_state[1'd0];

assign AXI_video_strm_V_id_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_id_V_1_data_out = 1'd0;

assign AXI_video_strm_V_id_V_1_sel = AXI_video_strm_V_id_V_1_sel_rd;

assign AXI_video_strm_V_id_V_1_vld_out = AXI_video_strm_V_id_V_1_state[1'd0];

assign AXI_video_strm_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_keep_V_1_data_out = 3'd7;

assign AXI_video_strm_V_keep_V_1_sel = AXI_video_strm_V_keep_V_1_sel_rd;

assign AXI_video_strm_V_keep_V_1_vld_out = AXI_video_strm_V_keep_V_1_state[1'd0];

assign AXI_video_strm_V_last_V_1_ack_in = AXI_video_strm_V_last_V_1_state[1'd1];

assign AXI_video_strm_V_last_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_last_V_1_load_A = (~AXI_video_strm_V_last_V_1_sel_wr & AXI_video_strm_V_last_V_1_state_cmp_full);

assign AXI_video_strm_V_last_V_1_load_B = (AXI_video_strm_V_last_V_1_state_cmp_full & AXI_video_strm_V_last_V_1_sel_wr);

assign AXI_video_strm_V_last_V_1_sel = AXI_video_strm_V_last_V_1_sel_rd;

assign AXI_video_strm_V_last_V_1_state_cmp_full = ((AXI_video_strm_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_last_V_1_vld_out = AXI_video_strm_V_last_V_1_state[1'd0];

assign AXI_video_strm_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_strb_V_1_data_out = 3'd0;

assign AXI_video_strm_V_strb_V_1_sel = AXI_video_strm_V_strb_V_1_sel_rd;

assign AXI_video_strm_V_strb_V_1_vld_out = AXI_video_strm_V_strb_V_1_state[1'd0];

assign AXI_video_strm_V_user_V_1_ack_in = AXI_video_strm_V_user_V_1_state[1'd1];

assign AXI_video_strm_V_user_V_1_ack_out = m_axis_video_TREADY;

assign AXI_video_strm_V_user_V_1_load_A = (~AXI_video_strm_V_user_V_1_sel_wr & AXI_video_strm_V_user_V_1_state_cmp_full);

assign AXI_video_strm_V_user_V_1_load_B = (AXI_video_strm_V_user_V_1_state_cmp_full & AXI_video_strm_V_user_V_1_sel_wr);

assign AXI_video_strm_V_user_V_1_sel = AXI_video_strm_V_user_V_1_sel_rd;

assign AXI_video_strm_V_user_V_1_state_cmp_full = ((AXI_video_strm_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_user_V_1_vld_out = AXI_video_strm_V_user_V_1_state[1'd0];

assign add_ln915_fu_279_p2 = ($signed(zext_ln850_fu_275_p1) + $signed(17'd131071));

assign add_ln926_fu_391_p2 = (counter_loc_0_fu_156 + 16'd1);

assign and_ln1001_fu_309_p1 = fid_in;

assign and_ln1001_fu_309_p2 = (icmp_ln1001_fu_303_p2 & and_ln1001_fu_309_p1);

assign and_ln983_fu_494_p2 = (xor_ln983_fu_325_p2 & fid_toggle_fu_490_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln898_reg_606 == 1'd0) & (io_acc_block_signal_op60 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((icmp_ln898_reg_606 == 1'd0) & (io_acc_block_signal_op60 == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state5_io) | ((icmp_ln898_reg_606 == 1'd0) & (io_acc_block_signal_op60 == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call11 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call12 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_unsigned_short_s_fu_264_ap_done == 1'b0) | (grp_reg_unsigned_short_s_fu_258_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((2'd1 == AXI_video_strm_V_dest_V_1_state) | (2'd1 == AXI_video_strm_V_id_V_1_state) | (2'd1 == AXI_video_strm_V_last_V_1_state) | (2'd1 == AXI_video_strm_V_user_V_1_state) | (2'd1 == AXI_video_strm_V_strb_V_1_state) | (2'd1 == AXI_video_strm_V_keep_V_1_state) | (2'd1 == AXI_video_strm_V_data_V_1_state) | ((2'd3 == AXI_video_strm_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == AXI_video_strm_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln898_reg_606 == 1'd0) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((icmp_ln898_reg_606 == 1'd0) & (io_acc_block_signal_op60 == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((icmp_ln898_reg_606_pp0_iter1_reg == 1'd0) & (1'b0 == AXI_video_strm_V_data_V_1_ack_in));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign fid = ((icmp_ln983_1_fu_337_p2[0:0] === 1'b1) ? or_ln983_1_fu_499_p2 : select_ln996_fu_510_p3);

assign fid_toggle_1_fu_504_p2 = (fid_toggle_fu_490_p1 ^ 1'd1);

assign fid_toggle_fu_490_p1 = counter_loc_0_fu_156[0:0];

assign grp_reg_unsigned_short_s_fu_258_ap_start = grp_reg_unsigned_short_s_fu_258_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_264_ap_start = grp_reg_unsigned_short_s_fu_264_ap_start_reg;

assign i_fu_359_p2 = (i_0_reg_236 + 16'd1);

assign icmp_ln1001_fu_303_p2 = ((field_id == 16'd4) ? 1'b1 : 1'b0);

assign icmp_ln893_fu_354_p2 = ((i_0_reg_236 == tmp_reg_550) ? 1'b1 : 1'b0);

assign icmp_ln898_fu_369_p2 = ((j_0_reg_247 == tmp_2_reg_555) ? 1'b1 : 1'b0);

assign icmp_ln941_fu_343_p2 = ((colorFormat == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln983_1_fu_337_p2 = ((field_id < 16'd3) ? 1'b1 : 1'b0);

assign icmp_ln983_fu_285_p2 = ((field_id == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln987_fu_291_p2 = ((field_id == 16'd1) ? 1'b1 : 1'b0);

assign icmp_ln996_fu_297_p2 = ((field_id == 16'd3) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op60 = (strmPix_V_val_2_V_empty_n & strmPix_V_val_1_V_empty_n & strmPix_V_val_0_V_empty_n);

assign j_fu_374_p2 = (j_0_reg_247 + 16'd1);

assign m_axis_video_TDATA = AXI_video_strm_V_data_V_1_data_out;

assign m_axis_video_TDEST = AXI_video_strm_V_dest_V_1_data_out;

assign m_axis_video_TID = AXI_video_strm_V_id_V_1_data_out;

assign m_axis_video_TKEEP = AXI_video_strm_V_keep_V_1_data_out;

assign m_axis_video_TLAST = AXI_video_strm_V_last_V_1_data_out;

assign m_axis_video_TSTRB = AXI_video_strm_V_strb_V_1_data_out;

assign m_axis_video_TUSER = AXI_video_strm_V_user_V_1_data_out;

assign m_axis_video_TVALID = AXI_video_strm_V_dest_V_1_state[1'd0];

assign or_ln983_1_fu_499_p2 = (xor_ln983_1_fu_331_p2 | and_ln983_fu_494_p2);

assign or_ln983_fu_319_p2 = (icmp_ln987_fu_291_p2 | icmp_ln983_fu_285_p2);

assign p_Result_4_fu_424_p3 = {{16'd65535}, {strmPix_V_val_0_V_dout}};

assign p_Result_s_fu_432_p3 = {{16'd65535}, {strmPix_V_val_1_V_dout}};

assign select_ln941_1_fu_447_p3 = ((icmp_ln941_fu_343_p2[0:0] === 1'b1) ? strmPix_V_val_2_V_dout : strmPix_V_val_1_V_dout);

assign select_ln941_2_fu_454_p3 = ((icmp_ln941_fu_343_p2[0:0] === 1'b1) ? strmPix_V_val_0_V_dout : strmPix_V_val_2_V_dout);

assign select_ln941_fu_440_p3 = ((icmp_ln941_fu_343_p2[0:0] === 1'b1) ? p_Result_s_fu_432_p3 : p_Result_4_fu_424_p3);

assign select_ln996_fu_510_p3 = ((icmp_ln996_fu_297_p2[0:0] === 1'b1) ? fid_toggle_1_fu_504_p2 : and_ln1001_fu_309_p2);

assign tmp_4_fu_461_p3 = {{select_ln941_2_fu_454_p3}, {select_ln941_1_fu_447_p3}};

assign tmp_data_V_fu_469_p5 = {{tmp_4_fu_461_p3}, {select_ln941_fu_440_p3[7:0]}};

assign tmp_last_V_fu_380_p2 = ((zext_ln898_fu_365_p1 == add_ln915_reg_560) ? 1'b1 : 1'b0);

assign tmp_user_V_load_load_fu_385_p1 = tmp_user_V_fu_152;

assign xor_ln983_1_fu_331_p2 = (or_ln983_fu_319_p2 ^ 1'd1);

assign xor_ln983_fu_325_p2 = (icmp_ln983_fu_285_p2 ^ 1'd1);

assign zext_ln850_fu_275_p1 = grp_reg_unsigned_short_s_fu_264_ap_return;

assign zext_ln898_fu_365_p1 = j_0_reg_247;

endmodule //design_1_v_tpg_0_0_MultiPixStream2AXIvi
