/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xiic.h"
#include "Xscugic.h"
#include "math.h"
#include "PmodJSTK2.h"

typedef enum {up,down} position_t;
typedef enum {fwd,center,back} swing_t;

void SetUpInterruptSystem();
void SendHandler(XIic *InstancePtr);
void ReceiveHandler(XIic *InstancePtr);
void StatusHandler(XIic *InstancePtr, int Event);

void checki2c();
void SetFreq();
void reset_shield();
void startup();
void DemoInitialize() ;
void base_rotate(u8 base, u8 XData);
void fwd_back(u8 XData);
void up_dwn(u8 YData);
void grasp(u8 Grasp);
void wrist(u8 XData2);
void tilt(u8 YData);

#define IIC_dev 			XPAR_IIC_0_DEVICE_ID
#define int_dev 			XPAR_SCUGIC_0_DEVICE_ID
#define IIC_SLAVE_ADDR		0x40
#define IIC_RESET_ADDR      0x00
#define INTC_DEVICE_INT_ID	XPAR_FABRIC_IIC_0_VEC_ID
#define BUFFER_SIZE		    6

XIic  iic;
XScuGic Intc;
PmodJSTK2 joystick1;
PmodJSTK2 joystick2;

volatile u8 TransmitComplete;
volatile u8 ReceiveComplete;
JSTK2_Position position, position2;
JSTK2_DataPacket rawdata, rawdata2;
u8 SendBuffer [2];
u8 RecvBuffer [1];
int main()
{
	u32 dist;
	u32  Status;
    XIic_Config *iic_conf;
    u8 Options;

    init_platform();

    print("Hello World\n\r");


    iic_conf = XIic_LookupConfig(IIC_dev);
    XIic_CfgInitialize(&iic, iic_conf, iic_conf->BaseAddress);

    SetUpInterruptSystem();
    //reset_shield();
    //checki2c();
    SetFreq();

	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x80;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	usleep(500);
	SendBuffer[0] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, 1,XIIC_REPEATED_START);
	XIic_Recv(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&RecvBuffer, sizeof(RecvBuffer),XIIC_STOP);
	printf("CTRL Reg Osc Enabled %x\n\r",RecvBuffer[0]);
	SendBuffer[0] = 0xFE;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, 1,XIIC_REPEATED_START);
	XIic_Recv(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&RecvBuffer, sizeof(RecvBuffer),XIIC_STOP);
	printf("Scale %x\n\r",RecvBuffer[0]);
	DemoInitialize();

	u8 snap_shot = 0;
	u8 base_val;
	u8 remember_rotate;
	u8 remember_wrist;

	wrist(128);
	usleep(500000);
	u8 i;
	u8 toggle =0;

	//up_dwn(200);
	fwd_back(128);
	for (i=128;i<250;i++){
			wrist(i);
			tilt(i);
			base_rotate(1,i);
			usleep(50000);
		}
	for (i=250;i>128;i--){
		wrist(i);
		tilt(i);
		base_rotate(1,i);
		usleep(50000);
	}
	for (i=128;i>0;i--){
		wrist(i);
		tilt(i);
		base_rotate(1,i);
		usleep(50000);
	}
	for (i=0;i<128;i++){
		wrist(i);
		tilt(i);
		base_rotate(1,i);
		usleep(50000);
	}

	for (i=128;i>64;i--){
		//wrist(i);
		//tilt(i);
		base_rotate(1,i);
		usleep(50000);
	}

	for (i=128;i>0;i--){
		//wrist(i);
		tilt(i);
		//base_rotate(1,i);
		usleep(50000);
	}



    while(1){




//		position = JSTK2_getPosition(&joystick1);
//		// Get button states
//		rawdata = JSTK2_getDataPacket(&joystick1);
//		position2 = JSTK2_getPosition(&joystick2);
//		// Get button states
//		rawdata2 = JSTK2_getDataPacket(&joystick2);
//
////		xil_printf(
////		 "X:%d\tY:%d%s%s\r\n",
////		 position.XData,
////		 position.YData,
////		 (rawdata.Jstk != 0) ? "\tJoystick pressed" : "",
////		 (rawdata.Trigger != 0) ? "\tTrigger pressed" : ""
////		);
//		usleep(50000);
//
//		// Set led from btns and axis
//		if (rawdata.Jstk != 0 || rawdata.Trigger != 0) {
//		 JSTK2_setLedRGB(&joystick1, 0, 255, 0);
//		} else {
//		 JSTK2_setLedRGB(&joystick1, position.XData, 0, position.YData);
//		}
//
//
//
//		up_dwn(position.YData);
//		grasp(rawdata2.Jstk);
//		wrist(position2.XData);
//
//
//
//
//
//		tilt(position2.YData);
//		if(rawdata.Jstk !=0 && snap_shot == 0)
//		{
//			//edge detected button just pressed
//		    remember_wrist = position.XData;
//			base_val = remember_rotate;
//			printf("position before rotate %d \n\r",remember_wrist);
//		}
//		else if(rawdata.Jstk == 0 && snap_shot != 0)
//		{
//			//edge detected button just released
//			remember_rotate = position.XData;
//			base_val = remember_wrist;
//			printf("position final rotate %d \n\r",remember_rotate);
//		} else{
//			base_val = position.XData;
//		}
//
//		snap_shot = rawdata.Jstk;
//
//		base_rotate(rawdata.Jstk,base_val);
//		fwd_back(position.XData);
    }

    cleanup_platform();
    return 0;
}

void fwd_back(u8 XData){
	if( rawdata.Jstk == 0){
		SendBuffer[0] = 0x06;
		SendBuffer[1] = 0x00;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x07;
		SendBuffer[1] = 0x00;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x08;
		u16 signal;
		if( XData < 128 ){
			signal = 122 + (XData * 1.91);
		}
		else if (XData == 128){
			signal = 369;
		}
		else{
			signal = 369 + ((XData - 128) * 1.91);
		}
		u8 cent_l_off, cent_h_off;
		cent_l_off = (u8)signal;
		cent_h_off = (u8) (signal>>8);
		SendBuffer[1] = cent_l_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x09;
		SendBuffer[1] = cent_h_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	}
}

void up_dwn(u8 YData){
	SendBuffer[0] = 0x0A;
	SendBuffer[1] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x0B;
	SendBuffer[1] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x0C;
	u16 signal;
	if( YData < 128 ){
		signal = 122 + (YData * 1.91);
	}
	else if (YData == 128){
		signal = 369;
	}
	else{
		signal = 369 + ((YData - 128) * 1.91);
	}
	u8 cent_l_off, cent_h_off;
	cent_l_off = (u8)signal;
	cent_h_off = (u8) (signal>>8);
	SendBuffer[1] = cent_l_off;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x0D;
	SendBuffer[1] = cent_h_off;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);

	}

void base_rotate(u8 base, u8 XData ){
	if( base != 0){

		SendBuffer[0] = 0x1A;
		SendBuffer[1] = 0x00;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x1B;
		SendBuffer[1] = 0x00;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x1C;
		u16 signal;
		if( XData < 128 ){
			signal = 122 + (XData * 1.91);
		}
		else if (XData == 128){
			signal = 369;
		}
		else{
			signal = 369 + ((XData - 128) * 1.91);
		}
		u8 cent_l_off, cent_h_off;
		cent_l_off = (u8)signal;
		cent_h_off = (u8) (signal>>8);
		SendBuffer[1] = cent_l_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x1D;
		SendBuffer[1] = cent_h_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	}
}

void wrist(u8 XData2){
	SendBuffer[0] = 0x0E;
	SendBuffer[1] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x0F;
	SendBuffer[1] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x10;
	u16 signal;
	if( XData2 < 128 ){
		signal = 122 + (XData2 * 1.91);
	}
	else if (XData2 == 128){
		signal = 369;
	}
	else{
		signal = 369 + ((XData2 - 128) * 1.91);
	}
	u8 cent_l_off, cent_h_off;
	cent_l_off = (u8)signal;
	cent_h_off = (u8) (signal>>8);
	SendBuffer[1] = cent_l_off;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x11;
	SendBuffer[1] = cent_h_off;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
}

void tilt(u8 YData2){
	SendBuffer[0] = 0x12;
	SendBuffer[1] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x13;
	SendBuffer[1] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x14;
	u16 signal;
	if( YData2 < 128 ){
		signal = 122 + (YData2 * 1.91);
	}
	else if (YData2 == 128){
		signal = 369;
	}
	else{
		signal = 369 + ((YData2 - 128) * 1.91);
	}
	u8 cent_l_off, cent_h_off;
	cent_l_off = (u8)signal;
	cent_h_off = (u8) (signal>>8);
	SendBuffer[1] = cent_l_off;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x15;
	SendBuffer[1] = cent_h_off;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
}

void grasp(u8 grasp){
	SendBuffer[0] = 0x16;
	SendBuffer[1] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x17;
	SendBuffer[1] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x18;
	u16 signal;
	if( grasp != 0){
		signal = 369+245;
	}
	else{
		signal = 122;
	}
	u8 cent_l_off, cent_h_off;
	cent_l_off = (u8)signal;
	cent_h_off = (u8) (signal>>8);
	SendBuffer[1] = cent_l_off;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	SendBuffer[0] = 0x19;
	SendBuffer[1] = cent_h_off;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
}

void DemoInitialize() {

   // Initialize the joystick device
   JSTK2_begin(
      &joystick1,
      XPAR_PMODJSTK2_0_AXI_LITE_SPI_BASEADDR,
      XPAR_PMODJSTK2_0_AXI_LITE_GPIO_BASEADDR
   );

   // Set inversion register to invert only the Y axis
   JSTK2_setInversion(&joystick1, 1, 0);

   JSTK2_begin(
      &joystick2,
      XPAR_PMODJSTK2_1_AXI_LITE_SPI_BASEADDR,
      XPAR_PMODJSTK2_1_AXI_LITE_GPIO_BASEADDR
   );

   // Set inversion register to invert only the Y axis
   JSTK2_setInversion(&joystick2, 0, 1);
}



void reset_shield()
{
	u8 SendBuffer[1];
	SendBuffer[0] = 0x06;
	XIic_Send(iic.BaseAddress,IIC_RESET_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);

}

void checki2c()
//this function checks the shield is present following power on by reading register
//0 of the i2c chip on the shield and looks for the default power on configuration of the
//register 0 this should be 0x11
{

    u8 SendBuffer [2];
    u8 RecvBuffer [1];
    SendBuffer[0] = 0x00;
    XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, 1,XIIC_REPEATED_START);
    XIic_Recv(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&RecvBuffer, sizeof(RecvBuffer),XIIC_STOP);
    if (RecvBuffer[0] == 0x11) {
    		printf("shield detected\n\r");
    		printf("CTRL Reg %x\n\r",RecvBuffer[0]);

	}
	else
	{
		printf("shield not detected\n\r");
		//return 0;
	}
}

void SetFreq()
{
	u8 SendBuffer[2];
	SendBuffer[0] = 0xFE;
	SendBuffer[1] = 0x64;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);

}


void SetUpInterruptSystem()
{
	XScuGic_Config *IntcConfig;
	u32 Status;

	IntcConfig = XScuGic_LookupConfig(int_dev);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(&Intc, IntcConfig,IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XScuGic_SetPriorityTriggerType(&Intc, INTC_DEVICE_INT_ID,
					0xA0, 0x3);

	Status = XScuGic_Connect(&Intc, INTC_DEVICE_INT_ID,
				 (Xil_InterruptHandler)XIic_InterruptHandler,
				 &iic);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	XScuGic_Enable(&Intc, INTC_DEVICE_INT_ID);

	Xil_ExceptionInit();

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 (Xil_ExceptionHandler)XScuGic_InterruptHandler, &Intc);

	Xil_ExceptionEnable();
}


void StatusHandler(XIic *InstancePtr, int Event)
{

}

void ReceiveHandler(XIic *InstancePtr)
{
	ReceiveComplete = 0;
    //printf("here rx \n\r");
}

void SendHandler(XIic *InstancePtr)
{
	TransmitComplete = 0;
	//printf("here tx \n\r");
}

