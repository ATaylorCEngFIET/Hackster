/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xiic.h"
#include "Xscugic.h"
#include "PmodMAXSONAR.h "
#include "PmodNAV.h"
#include "math.h"

typedef enum {up,down} position_t;
typedef enum {fwd,center,back} swing_t;

void SetUpInterruptSystem();
void SendHandler(XIic *InstancePtr);
void ReceiveHandler(XIic *InstancePtr);
void StatusHandler(XIic *InstancePtr, int Event);

void checki2c();
void SetFreq();
void reset_shield();
void startup();
void WriteLeg(int leg, position_t position );
void centralise(int leg, swing_t position );
void straight();
void reverse();
void right_turn();
void left_turn();
float NavDemo_AngleInXY(NAV_RectCoord r);

#define IIC_dev 			XPAR_IIC_0_DEVICE_ID
#define int_dev 			XPAR_SCUGIC_0_DEVICE_ID
#define IIC_SLAVE_ADDR		0x40
#define IIC_RESET_ADDR      0x00
#define INTC_DEVICE_INT_ID	XPAR_FABRIC_IIC_0_VEC_ID
#define BUFFER_SIZE		    6
#define up_h_on				0x00
#define up_l_on				0x00
#define up_h_off			0x02
#define up_l_off			0x65
#define down_h_on			0x00
#define down_l_on 			0x00
#define down_h_off			0x00
#define down_l_off			0x7a
#define cent_h_on			0x00
#define cent_l_on			0x00
#define cent_h_off			0x01
#define cent_l_off			0x6f
#define fwd_h_on			0x00
#define fwd_l_on			0x00
#define fwd_h_off			0x01
#define fwd_l_off			0x33
#define bck_h_on			0x00
#define bck_l_on 			0x00
#define bck_h_off			0x01
#define bck_l_off			0xad

#define joint_offset        0x08
#define joint_time 			250000

#define min_dist			10

#define PMOD_MAXSONAR_BASEADDR XPAR_PMODMAXSONAR_0_AXI_LITE_GPIO_BASEADDR
#define CLK_FREQ 100000000

char *compass[8] = {"North", "North-East", "East", "South-East", "South","South-West", "West", "North-West"};

XIic  iic;
XScuGic Intc;
PmodMAXSONAR sonar;
PmodNAV nav;

volatile u8 TransmitComplete;
volatile u8 ReceiveComplete;

int main()
{
	u32 dist;
	u32  Status;
    XIic_Config *iic_conf;
    u8 Options;
    u8 SendBuffer [2];
    u8 RecvBuffer [1];



    init_platform();

    print("Hello World\n\r");

    MAXSONAR_begin(&sonar, PMOD_MAXSONAR_BASEADDR, CLK_FREQ);

    NAV_begin (&nav,XPAR_PMODNAV_0_AXI_LITE_GPIO_BASEADDR,XPAR_PMODNAV_0_AXI_LITE_SPI_BASEADDR);
    NAV_Init(&nav);

    iic_conf = XIic_LookupConfig(IIC_dev);
    XIic_CfgInitialize(&iic, iic_conf, iic_conf->BaseAddress);

    SetUpInterruptSystem();
    //reset_shield();
    //checki2c();
    SetFreq();

	SendBuffer[0] = 0x00;
	SendBuffer[1] = 0x80;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
	usleep(500);
	SendBuffer[0] = 0x00;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, 1,XIIC_REPEATED_START);
	XIic_Recv(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&RecvBuffer, sizeof(RecvBuffer),XIIC_STOP);
	printf("CTRL Reg Osc Enabled %x\n\r",RecvBuffer[0]);
	SendBuffer[0] = 0xFE;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, 1,XIIC_REPEATED_START);
	XIic_Recv(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&RecvBuffer, sizeof(RecvBuffer),XIIC_STOP);
	printf("Scale %x\n\r",RecvBuffer[0]);


	startup();


    while(1){

      float magXYd ;
      float newXYd;
      char *str;


      dist = MAXSONAR_getDistance(&sonar);
   	  printf("dist (in) = %3d\r\n", dist);

      NAV_GetData(&nav);
      magXYd = NavDemo_AngleInXY(nav.magData);
      printf("dir = %f\r\n", magXYd);

   	if (dist > min_dist ){
   	 //straight();
   		printf("straight \r\n");

   	}
   	else
   	{
   		printf("obsticle detected\n\r");

   		dist = MAXSONAR_getDistance(&sonar);
   		newXYd = NavDemo_AngleInXY(nav.magData);

   		while(newXYd<=((magXYd+90.0)%360.0)){
   			//turn_right();
   		    NAV_GetData(&nav);
   			newXYd = NavDemo_AngleInXY(nav.magData);


   		}


   	//	reverse();
   	}

    }

    cleanup_platform();
    return 0;
}


void startup()
{
	int i;

	//centralise joints
	centralise(0, center );
	centralise(1, center );
	centralise(2, center );
	centralise(3, center );
	centralise(4, center );
	centralise(5, center );
    // put all legs into down position
    WriteLeg(0, down);
    WriteLeg(1, down);
    WriteLeg(2, down);
    WriteLeg(3, down);
    WriteLeg(4, down);
    WriteLeg(5, down);

    for (i = 0; i<6;i++){

    	WriteLeg(i, up);
    	usleep(joint_time);
    	centralise(i, fwd );
    	usleep(joint_time);
    	centralise(i, back );
    	usleep(joint_time);
    	centralise(i, center );
    	usleep(joint_time);
    	WriteLeg(i, down);
    	usleep(joint_time);
    }

}


void reverse()
{

	WriteLeg(0, up);
	usleep(joint_time);
	centralise(0, back );
	WriteLeg(0, down);


	WriteLeg(3, up);
	usleep(joint_time);
	centralise(3, back );
	WriteLeg(3, down);


	WriteLeg(4, up);
	usleep(joint_time);
	centralise(4, back );
	WriteLeg(4, down);

	usleep(joint_time);
	WriteLeg(1, up);
	WriteLeg(5, up);
	WriteLeg(2, up);

	usleep(joint_time);
	centralise(0, center );
	centralise(3, center );
	centralise(4, center );

	usleep(joint_time);
	WriteLeg(1, down );
	WriteLeg(5, down );
	WriteLeg(2, down);


	WriteLeg(1, up);
	usleep(joint_time);
	centralise(1, back );
	WriteLeg(1, down);


	WriteLeg(2, up);
	usleep(joint_time);
	centralise(2, back );
	WriteLeg(2, down);


	WriteLeg(5, up);
	usleep(joint_time);
	centralise(5, back );
	WriteLeg(5, down);


	usleep(joint_time);
	WriteLeg(0, up);
	WriteLeg(3, up);
	WriteLeg(4, up);

	usleep(joint_time);
	centralise(1, center );
	centralise(2, center );
	centralise(5, center );

	usleep(joint_time);
	WriteLeg(0, down );
	WriteLeg(3, down );
	WriteLeg(4, down);

}




void straight()
{

	WriteLeg(0, up);
	usleep(joint_time);
	centralise(0, fwd );
	WriteLeg(0, down);


	WriteLeg(3, up);
	usleep(joint_time);
	centralise(3, fwd );
	WriteLeg(3, down);


	WriteLeg(4, up);
	usleep(joint_time);
	centralise(4, fwd );
	WriteLeg(4, down);

	usleep(joint_time);
	WriteLeg(1, up);
	WriteLeg(5, up);
	WriteLeg(2, up);

	usleep(joint_time);
	centralise(0, center );
	centralise(3, center );
	centralise(4, center );


	//usleep(joint_time);
	//WriteLeg(1, down );
	//WriteLeg(5, down );
	//WriteLeg(2, down);


	WriteLeg(1, up);
	usleep(joint_time);
	centralise(1, fwd );
	WriteLeg(1, down);


	WriteLeg(2, up);
	usleep(joint_time);
	centralise(2, fwd );
	WriteLeg(2, down);


	WriteLeg(5, up);
	usleep(joint_time);
	centralise(5, fwd );
	WriteLeg(5, down);


	usleep(joint_time);
	WriteLeg(0, up);
	WriteLeg(3, up);
	WriteLeg(4, up);

	usleep(joint_time);
	centralise(1, center );
	centralise(2, center );
	centralise(5, center );

	//usleep(joint_time);
	//WriteLeg(0, down );
	//WriteLeg(3, down );
	//WriteLeg(4, down);

}

void right_turn()
{

	WriteLeg(0, up);
	usleep(joint_time);
	centralise(0, fwd );
	WriteLeg(0, down);


	WriteLeg(3, up);
	usleep(joint_time);
	centralise(3, back );
	WriteLeg(3, down);


	WriteLeg(4, up);
	usleep(joint_time);
	centralise(4, fwd );
	WriteLeg(4, down);

	usleep(joint_time);
	WriteLeg(1, up);
	WriteLeg(5, up);
	WriteLeg(2, up);

	usleep(joint_time);
	centralise(0, center );
	centralise(3, center );
	centralise(4, center );


	//usleep(joint_time);
	//WriteLeg(1, down );
	//WriteLeg(5, down );
	//WriteLeg(2, down);


	WriteLeg(1, up);
	usleep(joint_time);
	centralise(1, back );
	WriteLeg(1, down);


	WriteLeg(2, up);
	usleep(joint_time);
	centralise(2, fwd );
	WriteLeg(2, down);


	WriteLeg(5, up);
	usleep(joint_time);
	centralise(5, back );
	WriteLeg(5, down);


	usleep(joint_time);
	WriteLeg(0, up);
	WriteLeg(3, up);
	WriteLeg(4, up);

	usleep(joint_time);
	centralise(1, center );
	centralise(2, center );
	centralise(5, center );

	//usleep(joint_time);
	//WriteLeg(0, down );
	//WriteLeg(3, down );
	//WriteLeg(4, down);

}

void left_turn()
{

	WriteLeg(0, up);
	usleep(joint_time);
	centralise(0, back );
	WriteLeg(0, down);


	WriteLeg(3, up);
	usleep(joint_time);
	centralise(3, fwd );
	WriteLeg(3, down);


	WriteLeg(4, up);
	usleep(joint_time);
	centralise(4, back );
	WriteLeg(4, down);

	usleep(joint_time);
	WriteLeg(1, up);
	WriteLeg(5, up);
	WriteLeg(2, up);

	usleep(joint_time);
	centralise(0, center );
	centralise(3, center );
	centralise(4, center );


	//usleep(joint_time);
	//WriteLeg(1, down );
	//WriteLeg(5, down );
	//WriteLeg(2, down);


	WriteLeg(1, up);
	usleep(joint_time);
	centralise(1, fwd );
	WriteLeg(1, down);


	WriteLeg(2, up);
	usleep(joint_time);
	centralise(2, back );
	WriteLeg(2, down);


	WriteLeg(5, up);
	usleep(joint_time);
	centralise(5, fwd );
	WriteLeg(5, down);


	usleep(joint_time);
	WriteLeg(0, up);
	WriteLeg(3, up);
	WriteLeg(4, up);

	usleep(joint_time);
	centralise(1, center );
	centralise(2, center );
	centralise(5, center );

	//usleep(joint_time);
	//WriteLeg(0, down );
	//WriteLeg(3, down );
	//WriteLeg(4, down);

}


void reset_shield()
{
	u8 SendBuffer[1];
	SendBuffer[0] = 0x06;
	XIic_Send(iic.BaseAddress,IIC_RESET_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);

}

void checki2c()
//this function checks the shield is present following power on by reading register
//0 of the i2c chip on the shield and looks for the default power on configuration of the
//register 0 this should be 0x11
{

    u8 SendBuffer [2];
    u8 RecvBuffer [1];
    SendBuffer[0] = 0x00;
    XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, 1,XIIC_REPEATED_START);
    XIic_Recv(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&RecvBuffer, sizeof(RecvBuffer),XIIC_STOP);
    if (RecvBuffer[0] == 0x11) {
    		printf("shield detected\n\r");
    		printf("CTRL Reg %x\n\r",RecvBuffer[0]);

	}
	else
	{
		printf("shield not detected\n\r");
		//return 0;
	}
}

void SetFreq()
{
	u8 SendBuffer[2];
	SendBuffer[0] = 0xFE;
	SendBuffer[1] = 0x64;
	XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);

}


void centralise(int leg, swing_t position )
{
u8 SendBuffer [2];
u8 RecvBuffer [1];
 if (position == center){
		SendBuffer[0] = 0x06+(4*(leg+joint_offset));
		SendBuffer[1] = cent_l_on;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x07+(4*(leg+joint_offset));
		SendBuffer[1] = cent_h_on;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x08+(4*(leg+joint_offset));
		SendBuffer[1] = cent_l_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x09+(4*(leg+joint_offset));
		SendBuffer[1] = cent_h_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		//printf("down even\r\n");
	}
 else
	 if (position == fwd && (leg == 0 || leg == 2 || leg ==4)){
			SendBuffer[0] = 0x06+(4*(leg+joint_offset));
			SendBuffer[1] = fwd_l_on;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			SendBuffer[0] = 0x07+(4*(leg+joint_offset));
			SendBuffer[1] = fwd_h_on;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			SendBuffer[0] = 0x08+(4*(leg+joint_offset));
			SendBuffer[1] = fwd_l_off;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			SendBuffer[0] = 0x09+(4*(leg+joint_offset));
			SendBuffer[1] = fwd_h_off;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			//printf("down even\r\n");
		}
 else
	 if (position == back && (leg == 0 || leg == 2 || leg ==4)){
			SendBuffer[0] = 0x06+(4*(leg+joint_offset));
			SendBuffer[1] = bck_l_on;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			SendBuffer[0] = 0x07+(4*(leg+joint_offset));
			SendBuffer[1] = bck_h_on;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			SendBuffer[0] = 0x08+(4*(leg+joint_offset));
			SendBuffer[1] = bck_l_off;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			SendBuffer[0] = 0x09+(4*(leg+joint_offset));
			SendBuffer[1] = bck_h_off;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			//printf("down even\r\n");
		}
 else
	 if (position == fwd && (leg == 1 || leg == 3 || leg ==5)){
			SendBuffer[0] = 0x06+(4*(leg+joint_offset));
			SendBuffer[1] = bck_l_on;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			SendBuffer[0] = 0x07+(4*(leg+joint_offset));
			SendBuffer[1] = bck_h_on;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			SendBuffer[0] = 0x08+(4*(leg+joint_offset));
			SendBuffer[1] = bck_l_off;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			SendBuffer[0] = 0x09+(4*(leg+joint_offset));
			SendBuffer[1] = bck_h_off;
			XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
			//printf("down even\r\n");
		}
  else
		 if (position == back && (leg == 1 || leg == 3 || leg ==5)){
					SendBuffer[0] = 0x06+(4*(leg+joint_offset));
					SendBuffer[1] = fwd_l_on;
					XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
					SendBuffer[0] = 0x07+(4*(leg+joint_offset));
					SendBuffer[1] = fwd_h_on;
					XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
					SendBuffer[0] = 0x08+(4*(leg+joint_offset));
					SendBuffer[1] = fwd_l_off;
					XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
					SendBuffer[0] = 0x09+(4*(leg+joint_offset));
					SendBuffer[1] = fwd_h_off;
					XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
					//printf("down even\r\n");
				}

}


void WriteLeg(int leg, position_t position )
//this positions a leg to either up or dwn
{
    u8 SendBuffer [2];
    u8 RecvBuffer [1];

    if (position == down && (leg == 0 || leg == 2 || leg ==4)){
    	SendBuffer[0] = 0x06+(4*leg);
    	SendBuffer[1] = up_l_on;
        XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
        SendBuffer[0] = 0x07+(4*leg);
        SendBuffer[1] = up_h_on;
        XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
        SendBuffer[0] = 0x08+(4*leg);
        SendBuffer[1] = up_l_off;
        XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
        SendBuffer[0] = 0x09+(4*leg);
        SendBuffer[1] = up_h_off;
        XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
        //printf("up even\r\n");
    }
    else
	 if (position == down && (leg == 1 || leg == 3 || leg == 5)){
		SendBuffer[0] = 0x06+(4*leg);
		SendBuffer[1] = down_l_on;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x07+(4*leg);
		SendBuffer[1] = down_h_on;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x08+(4*leg);
		SendBuffer[1] = down_l_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x09+(4*leg);
		SendBuffer[1] = down_h_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		//printf("up even\r\n");

	 }
    else
    	if (position == up && (leg == 0 || leg == 2 || leg ==4)){
		SendBuffer[0] = 0x06+(4*leg);
		SendBuffer[1] = down_l_on;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x07+(4*leg);
		SendBuffer[1] = down_h_on;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x08+(4*leg);
		SendBuffer[1] = down_l_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		SendBuffer[0] = 0x09+(4*leg);
		SendBuffer[1] = down_h_off;
		XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		//printf("down even\r\n");
    }
	else
		if (position == up && (leg == 1 || leg == 3 || leg ==5)){
		    	SendBuffer[0] = 0x06+(4*leg);
		    	SendBuffer[1] = up_l_on;
		        XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		        SendBuffer[0] = 0x07+(4*leg);
		        SendBuffer[1] = up_h_on;
		        XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		        SendBuffer[0] = 0x08+(4*leg);
		        SendBuffer[1] = up_l_off;
		        XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		        SendBuffer[0] = 0x09+(4*leg);
		        SendBuffer[1] = up_h_off;
		        XIic_Send(iic.BaseAddress,IIC_SLAVE_ADDR,(u8 *)&SendBuffer, sizeof(SendBuffer),XIIC_STOP);
		        //printf("down odd\r\n");
		    }


}

void SetUpInterruptSystem()
{
	XScuGic_Config *IntcConfig;
	u32 Status;

	IntcConfig = XScuGic_LookupConfig(int_dev);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(&Intc, IntcConfig,IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XScuGic_SetPriorityTriggerType(&Intc, INTC_DEVICE_INT_ID,
					0xA0, 0x3);

	Status = XScuGic_Connect(&Intc, INTC_DEVICE_INT_ID,
				 (Xil_InterruptHandler)XIic_InterruptHandler,
				 &iic);
	if (Status != XST_SUCCESS) {
		return Status;
	}

	XScuGic_Enable(&Intc, INTC_DEVICE_INT_ID);

	Xil_ExceptionInit();

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 (Xil_ExceptionHandler)XScuGic_InterruptHandler, &Intc);

	Xil_ExceptionEnable();
}


void StatusHandler(XIic *InstancePtr, int Event)
{

}

void ReceiveHandler(XIic *InstancePtr)
{
	ReceiveComplete = 0;
    //printf("here rx \n\r");
}

void SendHandler(XIic *InstancePtr)
{
	TransmitComplete = 0;
	//printf("here tx \n\r");
}

float NavDemo_AngleInXY(NAV_RectCoord r) {
   float d;
   if (r.X == 0)
      d = (r.Y < 0) ? 90 : 0;
   else
      d = atan2f(r.Y, r.X) * 180 / M_PI;
   if (d > 360)
      d -= 360;
   else if (d < 0)
      d += 360;
   return d;
}
